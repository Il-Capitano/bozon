; ModuleID = 'test'
source_filename = "test"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-w64-windows-gnu"

%builtin.str = type { i8*, i8* }
%"struct.std::string.4" = type { i8*, i8*, i8* }
%"struct.std::ryu::floating_decimal_64" = type { i64, i32 }
%"struct.std::ryu::floating_decimal_32" = type { i32, i32 }

@std.short_string_max_size = internal global i64 16
@std.unicode_max_char = global i32 1114111
@std.utf8_max_one_byte_char = global i32 127
@std.utf8_max_two_byte_char = global i32 2047
@std.utf8_max_three_byte_char = global i32 65535
@std.ryu.s2d_SUCCESS = global i32 0
@std.ryu.s2d_INPUT_TOO_SHORT = global i32 1
@std.ryu.s2d_INPUT_TOO_LONG = global i32 2
@std.ryu.s2d_MALFORMED_INPUT = global i32 3
@std.ryu.s2f_SUCCESS = global i32 0
@std.ryu.s2f_INPUT_TOO_SHORT = global i32 1
@std.ryu.s2f_INPUT_TOO_LONG = global i32 2
@std.ryu.s2f_MALFORMED_INPUT = global i32 3
@std.ryu.DOUBLE_MANTISSA_BITS = internal global i32 52
@std.ryu.DOUBLE_EXPONENT_BITS = internal global i32 11
@std.ryu.DOUBLE_BIAS = internal global i32 1023
@std.ryu.DIGIT_TABLE = global [200 x i8] c"00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899"
@std.ryu.DOUBLE_POW5_INV_BITCOUNT = global i32 125
@std.ryu.DOUBLE_POW5_BITCOUNT = global i32 125
@std.ryu.DOUBLE_POW5_INV_SPLIT = global [342 x [2 x i64]] [[2 x i64] [i64 1, i64 2305843009213693952], [2 x i64] [i64 -7378697629483820646, i64 1844674407370955161], [2 x i64] [i64 5165088340638674453, i64 1475739525896764129], [2 x i64] [i64 7821419487252849886, i64 1180591620717411303], [2 x i64] [i64 8824922364862649494, i64 1888946593147858085], [2 x i64] [i64 7059937891890119595, i64 1511157274518286468], [2 x i64] [i64 -5420096130713635294, i64 1208925819614629174], [2 x i64] [i64 -8672153809141816470, i64 1934281311383406679], [2 x i64] [i64 -6937723047313453176, i64 1547425049106725343], [2 x i64] [i64 -1860829623108852217, i64 1237940039285380274], [2 x i64] [i64 -2977327396974163548, i64 1980704062856608439], [2 x i64] [i64 -2381861917579330838, i64 1584563250285286751], [2 x i64] [i64 9162556910162266299, i64 1267650600228229401], [2 x i64] [i64 7281393426775805432, i64 2028240960365167042], [2 x i64] [i64 -1553582888063176301, i64 1622592768292133633], [2 x i64] [i64 2446482504291369283, i64 1298074214633706907], [2 x i64] [i64 7603720821608101175, i64 2076918743413931051], [2 x i64] [i64 2393627842544570617, i64 1661534994731144841], [2 x i64] [i64 -1774446540706253830, i64 1329227995784915872], [2 x i64] [i64 -6528463279871916451, i64 2126764793255865396], [2 x i64] [i64 5845275820328197809, i64 1701411834604692317], [2 x i64] [i64 -2702476973221262399, i64 1361129467683753853], [2 x i64] [i64 3054734472329800808, i64 2177807148294006166], [2 x i64] [i64 -1245561236878069677, i64 1742245718635204932], [2 x i64] [i64 6382248639981364905, i64 1393796574908163946], [2 x i64] [i64 2832900194486363201, i64 2230074519853062314], [2 x i64] [i64 5955668970331000884, i64 1784059615882449851], [2 x i64] [i64 1075186361522890384, i64 1427247692705959881], [2 x i64] [i64 -5658399451047196032, i64 2283596308329535809], [2 x i64] [i64 -4526719560837756825, i64 1826877046663628647], [2 x i64] [i64 3757321980813615186, i64 1461501637330902918], [2 x i64] [i64 -8062188859574838821, i64 1169201309864722334], [2 x i64] [i64 5547241898389809503, i64 1870722095783555735], [2 x i64] [i64 4437793518711847602, i64 1496577676626844588], [2 x i64] [i64 -7517811629256252888, i64 1197262141301475670], [2 x i64] [i64 -960452162584273651, i64 1915619426082361072], [2 x i64] [i64 6610335899416401726, i64 1532495540865888858], [2 x i64] [i64 -5779777724692609589, i64 1225996432692711086], [2 x i64] [i64 -5558295544766265019, i64 1961594292308337738], [2 x i64] [i64 -757287621071101692, i64 1569275433846670190], [2 x i64] [i64 -4295178911598791677, i64 1255420347077336152], [2 x i64] [i64 7885109000409574610, i64 2008672555323737844], [2 x i64] [i64 -8449308058639981605, i64 1606938044258990275], [2 x i64] [i64 7997948812055656009, i64 1285550435407192220], [2 x i64] [i64 -5650025974420502002, i64 2056880696651507552], [2 x i64] [i64 2858676849947419045, i64 1645504557321206042], [2 x i64] [i64 -5091756149525885410, i64 1316403645856964833], [2 x i64] [i64 -768112209757596011, i64 2106245833371143733], [2 x i64] [i64 3074859046935833515, i64 1684996666696914987], [2 x i64] [i64 -4918810391935153834, i64 1347997333357531989], [2 x i64] [i64 -7870096627096246135, i64 2156795733372051183], [2 x i64] [i64 -2606728486935086585, i64 1725436586697640946], [2 x i64] [i64 8982663654677661702, i64 1380349269358112757], [2 x i64] [i64 -385133411483382570, i64 2208558830972980411], [2 x i64] [i64 -7686804358670526703, i64 1766847064778384329], [2 x i64] [i64 -6149443486936421362, i64 1413477651822707463], [2 x i64] [i64 -2460411949614453533, i64 2261564242916331941], [2 x i64] [i64 9099716884534168143, i64 1809251394333065553], [2 x i64] [i64 -3788272936598396455, i64 1447401115466452442], [2 x i64] [i64 4348079280205103483, i64 1157920892373161954], [2 x i64] [i64 -4111119595897565398, i64 1852673427797059126], [2 x i64] [i64 7779150767507678651, i64 1482138742237647301], [2 x i64] [i64 2533971799264232598, i64 1185710993790117841], [2 x i64] [i64 -3324342750661048490, i64 1897137590064188545], [2 x i64] [i64 -6348823015270749115, i64 1517710072051350836], [2 x i64] [i64 5988988032009131678, i64 1214168057641080669], [2 x i64] [i64 -1485665593011120286, i64 1942668892225729070], [2 x i64] [i64 -4877881289150806552, i64 1554135113780583256], [2 x i64] [i64 7165741412905085728, i64 1243308091024466605], [2 x i64] [i64 -6981557813061414451, i64 1989292945639146568], [2 x i64] [i64 -1895897435707221237, i64 1591434356511317254], [2 x i64] [i64 -1516717948565776990, i64 1273147485209053803], [2 x i64] [i64 4951948911778577463, i64 2037035976334486086], [2 x i64] [i64 272210314680951647, i64 1629628781067588869], [2 x i64] [i64 3907117066486671641, i64 1303703024854071095], [2 x i64] [i64 6251387306378674625, i64 2085924839766513752], [2 x i64] [i64 -2377587784380880946, i64 1668739871813211001], [2 x i64] [i64 9165976216721026213, i64 1334991897450568801], [2 x i64] [i64 7286864317269821294, i64 2135987035920910082], [2 x i64] [i64 -1549206175667963611, i64 1708789628736728065], [2 x i64] [i64 -4928713755276281212, i64 1367031702989382452], [2 x i64] [i64 6871453250525591353, i64 2187250724783011924], [2 x i64] [i64 9186511415162383406, i64 1749800579826409539], [2 x i64] [i64 -7408186126837734568, i64 1399840463861127631], [2 x i64] [i64 -8163748988198464986, i64 2239744742177804210], [2 x i64] [i64 8226396068408869304, i64 1791795793742243368], [2 x i64] [i64 -4486929589498635526, i64 1433436634993794694], [2 x i64] [i64 -7179087343197816842, i64 2293498615990071511], [2 x i64] [i64 5324776569667477496, i64 1834798892792057209], [2 x i64] [i64 7949170070475892320, i64 1467839114233645767], [2 x i64] [i64 -1019361573103106790, i64 1174271291386916613], [2 x i64] [i64 5747719112518849781, i64 1878834066219066582], [2 x i64] [i64 -2780522339468740821, i64 1503067252975253265], [2 x i64] [i64 -5913766686316902980, i64 1202453802380202612], [2 x i64] [i64 5295368560860596524, i64 1923926083808324180], [2 x i64] [i64 4236294848688477220, i64 1539140867046659344], [2 x i64] [i64 7078384693692692099, i64 1231312693637327475], [2 x i64] [i64 -7121328563801244258, i64 1970100309819723960], [2 x i64] [i64 9060332407926645887, i64 1576080247855779168], [2 x i64] [i64 -3819780517884414260, i64 1260864198284623334], [2 x i64] [i64 -6111648828615062817, i64 2017382717255397335], [2 x i64] [i64 -8578667877633960576, i64 1613906173804317868], [2 x i64] [i64 -3173585487365258138, i64 1291124939043454294], [2 x i64] [i64 -5077736779784413021, i64 2065799902469526871], [2 x i64] [i64 7005857020398200553, i64 1652639921975621497], [2 x i64] [i64 -1774012013165260204, i64 1322111937580497197], [2 x i64] [i64 -6527768035806326650, i64 2115379100128795516], [2 x i64] [i64 5845832015580669650, i64 1692303280103036413], [2 x i64] [i64 -6391380831761195250, i64 1353842624082429130], [2 x i64] [i64 841837113407818570, i64 2166148198531886609], [2 x i64] [i64 4362818505468165179, i64 1732918558825509287], [2 x i64] [i64 -3888442825109288503, i64 1386334847060407429], [2 x i64] [i64 -6221508520174861605, i64 2218135755296651887], [2 x i64] [i64 2401490813343931363, i64 1774508604237321510], [2 x i64] [i64 1921192650675145090, i64 1419606883389857208], [2 x i64] [i64 -615440573661678179, i64 2271371013423771532], [2 x i64] [i64 6886345170554478103, i64 1817096810739017226], [2 x i64] [i64 1819727321701672159, i64 1453677448591213781], [2 x i64] [i64 -2233566957380572596, i64 1162941958872971024], [2 x i64] [i64 -3573707131808916153, i64 1860707134196753639], [2 x i64] [i64 -2858965705447132922, i64 1488565707357402911], [2 x i64] [i64 8780873879868024632, i64 1190852565885922329], [2 x i64] [i64 2981351763563108441, i64 1905364105417475727], [2 x i64] [i64 -4993616218633333894, i64 1524291284333980581], [2 x i64] [i64 7073153469319063855, i64 1219433027467184465], [2 x i64] [i64 -7129698522799049449, i64 1951092843947495144], [2 x i64] [i64 -5703758818239239559, i64 1560874275157996115], [2 x i64] [i64 -8252355869333301970, i64 1248699420126396892], [2 x i64] [i64 1553625868034358140, i64 1997919072202235028], [2 x i64] [i64 8621598323911307159, i64 1598335257761788022], [2 x i64] [i64 -481418970354774919, i64 1278668206209430417], [2 x i64] [i64 -4459619167309550194, i64 2045869129935088668], [2 x i64] [i64 121653480894270168, i64 1636695303948070935], [2 x i64] [i64 97322784715416134, i64 1309356243158456748], [2 x i64] [i64 -3533632359197244509, i64 2094969989053530796], [2 x i64] [i64 8241140556867935363, i64 1675975991242824637], [2 x i64] [i64 -785785183989472356, i64 1340780792994259709], [2 x i64] [i64 -1257256294383155770, i64 2145249268790815535], [2 x i64] [i64 -4695153850248434939, i64 1716199415032652428], [2 x i64] [i64 -66774265456837628, i64 1372959532026121942], [2 x i64] [i64 -3796187639472850528, i64 2196735251241795108], [2 x i64] [i64 652398703163629901, i64 1757388200993436087], [2 x i64] [i64 -6856778666952916726, i64 1405910560794748869], [2 x i64] [i64 7475898206584884855, i64 2249456897271598191], [2 x i64] [i64 2291369750525997561, i64 1799565517817278553], [2 x i64] [i64 9211793429904618695, i64 1439652414253822842], [2 x i64] [i64 -18525771120251381, i64 2303443862806116547], [2 x i64] [i64 7363877012587619542, i64 1842755090244893238], [2 x i64] [i64 -5176944834155635336, i64 1474204072195914590], [2 x i64] [i64 -7830904682066418592, i64 1179363257756731672], [2 x i64] [i64 2227947767661371545, i64 1886981212410770676], [2 x i64] [i64 -1906990600612813087, i64 1509584969928616540], [2 x i64] [i64 -5214941295232160793, i64 1207667975942893232], [2 x i64] [i64 6413489186596184024, i64 1932268761508629172], [2 x i64] [i64 -2247906280206873427, i64 1545815009206903337], [2 x i64] [i64 5580372605318321905, i64 1236652007365522670], [2 x i64] [i64 8928596168509315048, i64 1978643211784836272], [2 x i64] [i64 -235820694676368608, i64 1582914569427869017], [2 x i64] [i64 7190041073742725760, i64 1266331655542295214], [2 x i64] [i64 436019273762630246, i64 2026130648867672343], [2 x i64] [i64 7727513048493924843, i64 1620904519094137874], [2 x i64] [i64 -8575384820172501418, i64 1296723615275310299], [2 x i64] [i64 4726128361433549347, i64 2074757784440496479], [2 x i64] [i64 7470251503888749801, i64 1659806227552397183], [2 x i64] [i64 -5091845241114731129, i64 1327844982041917746], [2 x i64] [i64 -4457603571041659483, i64 2124551971267068394], [2 x i64] [i64 -3566082856833327587, i64 1699641577013654715], [2 x i64] [i64 -6542215100208572392, i64 1359713261610923772], [2 x i64] [i64 4289851098633925465, i64 2175541218577478036], [2 x i64] [i64 -257467935834769951, i64 1740432974861982428], [2 x i64] [i64 3483374466074094362, i64 1392346379889585943], [2 x i64] [i64 1884050330976640656, i64 2227754207823337509], [2 x i64] [i64 5196589079523222848, i64 1782203366258670007], [2 x i64] [i64 -3221426365865242368, i64 1425762693006936005], [2 x i64] [i64 5913764258841343181, i64 2281220308811097609], [2 x i64] [i64 8420360221814984868, i64 1824976247048878087], [2 x i64] [i64 -642409452031832752, i64 1459980997639102469], [2 x i64] [i64 -513927561625466201, i64 1167984798111281975], [2 x i64] [i64 -8200981728084566569, i64 1868775676978051161], [2 x i64] [i64 4507261061758077715, i64 1495020541582440929], [2 x i64] [i64 7295157664148372495, i64 1196016433265952743], [2 x i64] [i64 7982903447895485668, i64 1913626293225524389], [2 x i64] [i64 -8371072500651252758, i64 1530901034580419511], [2 x i64] [i64 4371188443704728763, i64 1224720827664335609], [2 x i64] [i64 -4074144934298164949, i64 1959553324262936974], [2 x i64] [i64 -3259315947438531959, i64 1567642659410349579], [2 x i64] [i64 -2607452757950825567, i64 1254114127528279663], [2 x i64] [i64 3206773216762499739, i64 2006582604045247462], [2 x i64] [i64 -4813279056073820855, i64 1605266083236197969], [2 x i64] [i64 -3850623244859056684, i64 1284212866588958375], [2 x i64] [i64 4907049252451240275, i64 2054740586542333401], [2 x i64] [i64 236290587219081897, i64 1643792469233866721], [2 x i64] [i64 -3500316344966644806, i64 1315033975387093376], [2 x i64] [i64 -1911157337204721366, i64 2104054360619349402], [2 x i64] [i64 5849771759720043554, i64 1683243488495479522], [2 x i64] [i64 -2698880221707785803, i64 1346594790796383617], [2 x i64] [i64 -8007557169474367609, i64 2154551665274213788], [2 x i64] [i64 -2716696920837583764, i64 1723641332219371030], [2 x i64] [i64 -5862706351411977334, i64 1378913065775496824], [2 x i64] [i64 9066413911450387881, i64 2206260905240794919], [2 x i64] [i64 -7504264129807330988, i64 1765008724192635935], [2 x i64] [i64 8753983955121776503, i64 1412006979354108748], [2 x i64] [i64 -8129718560256619535, i64 2259211166966573997], [2 x i64] [i64 874922781278525018, i64 1807368933573259198], [2 x i64] [i64 8078635854506640661, i64 1445895146858607358], [2 x i64] [i64 -4605137760620418441, i64 1156716117486885886], [2 x i64] [i64 -3678871602250759182, i64 1850745787979017418], [2 x i64] [i64 746251532941302978, i64 1480596630383213935], [2 x i64] [i64 597001226353042382, i64 1184477304306571148], [2 x i64] [i64 -2734146852577042512, i64 1895163686890513836], [2 x i64] [i64 8880728962164096960, i64 1516130949512411069], [2 x i64] [i64 -7652812089236363725, i64 1212904759609928855], [2 x i64] [i64 -1176452898552450990, i64 1940647615375886168], [2 x i64] [i64 2748186495899949531, i64 1552518092300708935], [2 x i64] [i64 2198549196719959625, i64 1242014473840567148], [2 x i64] [i64 -171670099989974923, i64 1987223158144907436], [2 x i64] [i64 -7516033709475800585, i64 1589778526515925949], [2 x i64] [i64 -6012826967580640468, i64 1271822821212740759], [2 x i64] [i64 8826220925580526867, i64 2034916513940385215], [2 x i64] [i64 7060976740464421494, i64 1627933211152308172], [2 x i64] [i64 -1729916237112283451, i64 1302346568921846537], [2 x i64] [i64 -6457214794121563846, i64 2083754510274954460], [2 x i64] [i64 -8855120650039161400, i64 1667003608219963568], [2 x i64] [i64 -3394747705289418796, i64 1333602886575970854], [2 x i64] [i64 -5431596328463070074, i64 2133764618521553367], [2 x i64] [i64 3033420566713364587, i64 1707011694817242694], [2 x i64] [i64 6116085268112601993, i64 1365609355853794155], [2 x i64] [i64 -8661007644729388428, i64 2184974969366070648], [2 x i64] [i64 -3239457301041600419, i64 1747979975492856518], [2 x i64] [i64 1097782973908629988, i64 1398383980394285215], [2 x i64] [i64 1756452758253807981, i64 2237414368630856344], [2 x i64] [i64 5094511021344956708, i64 1789931494904685075], [2 x i64] [i64 4075608817075965366, i64 1431945195923748060], [2 x i64] [i64 6520974107321544586, i64 2291112313477996896], [2 x i64] [i64 1527430471115325346, i64 1832889850782397517], [2 x i64] [i64 -6156753252591560370, i64 1466311880625918013], [2 x i64] [i64 -1236053787331337972, i64 1173049504500734410], [2 x i64] [i64 9090360384495590213, i64 1876879207201175057], [2 x i64] [i64 -106409321887348476, i64 1501503365760940045], [2 x i64] [i64 -3774476272251789104, i64 1201202692608752036], [2 x i64] [i64 -2349813220860952243, i64 1921924308174003258], [2 x i64] [i64 1809498238053148529, i64 1537539446539202607], [2 x i64] [i64 -5931099039041301823, i64 1230031557231362085], [2 x i64] [i64 1578287981759648052, i64 1968050491570179337], [2 x i64] [i64 -6116067244076102204, i64 1574440393256143469], [2 x i64] [i64 -4892853795260881763, i64 1259552314604914775], [2 x i64] [i64 3239480371808320148, i64 2015283703367863641], [2 x i64] [i64 -1097764517295254205, i64 1612226962694290912], [2 x i64] [i64 6500486015647617283, i64 1289781570155432730], [2 x i64] [i64 -8045966448673363964, i64 2063650512248692368], [2 x i64] [i64 -2747424344196780848, i64 1650920409798953894], [2 x i64] [i64 -2197939475357424678, i64 1320736327839163115], [2 x i64] [i64 7551343283653851484, i64 2113178124542660985], [2 x i64] [i64 6041074626923081187, i64 1690542499634128788], [2 x i64] [i64 -6235186742687266020, i64 1352433999707303030], [2 x i64] [i64 1091747655926105338, i64 2163894399531684849], [2 x i64] [i64 4562746939482794594, i64 1731115519625347879], [2 x i64] [i64 7339546366328145998, i64 1384892415700278303], [2 x i64] [i64 8053925371383123274, i64 2215827865120445285], [2 x i64] [i64 6443140297106498619, i64 1772662292096356228], [2 x i64] [i64 -5913534206540532074, i64 1418129833677084982], [2 x i64] [i64 5295740528502789974, i64 2269007733883335972], [2 x i64] [i64 -3142105206681588667, i64 1815206187106668777], [2 x i64] [i64 4865013464138549713, i64 1452164949685335022], [2 x i64] [i64 -3486686858172980876, i64 1161731959748268017], [2 x i64] [i64 9178696285890871890, i64 1858771135597228828], [2 x i64] [i64 -3725089415513033457, i64 1487016908477783062], [2 x i64] [i64 4398626097073393881, i64 1189613526782226450], [2 x i64] [i64 7037801755317430209, i64 1903381642851562320], [2 x i64] [i64 5630241404253944167, i64 1522705314281249856], [2 x i64] [i64 814844308661245011, i64 1218164251424999885], [2 x i64] [i64 1303750893857992017, i64 1949062802279999816], [2 x i64] [i64 -2646348099655516710, i64 1559250241823999852], [2 x i64] [i64 5261619149759407279, i64 1247400193459199882], [2 x i64] [i64 -6338804619352589647, i64 1995840309534719811], [2 x i64] [i64 5997002748743659252, i64 1596672247627775849], [2 x i64] [i64 8486951013736837725, i64 1277337798102220679], [2 x i64] [i64 2511075177753209390, i64 2043740476963553087], [2 x i64] [i64 -5369837487281253134, i64 1634992381570842469], [2 x i64] [i64 -4295869989825002507, i64 1307993905256673975], [2 x i64] [i64 4194654460505726958, i64 2092790248410678361], [2 x i64] [i64 -333625246337328757, i64 1674232198728542688], [2 x i64] [i64 3422448617672047318, i64 1339385758982834151], [2 x i64] [i64 -1902779841208544938, i64 2143017214372534641], [2 x i64] [i64 -8900921502450656597, i64 1714413771498027713], [2 x i64] [i64 -3431388387218614954, i64 1371531017198422170], [2 x i64] [i64 5577825024675947042, i64 2194449627517475473], [2 x i64] [i64 -6605786424484973336, i64 1755559702013980378], [2 x i64] [i64 -1595280324846068345, i64 1404447761611184302], [2 x i64] [i64 -6241797334495619676, i64 2247116418577894884], [2 x i64] [i64 -4993437867596495741, i64 1797693134862315907], [2 x i64] [i64 3383947335406624054, i64 1438154507889852726], [2 x i64] [i64 -1964381892833222160, i64 2301047212623764361], [2 x i64] [i64 -8950203143750398374, i64 1840837770099011489], [2 x i64] [i64 -7160162515000318699, i64 1472670216079209191], [2 x i64] [i64 5339916432225476010, i64 1178136172863367353], [2 x i64] [i64 4854517476818851293, i64 1885017876581387765], [2 x i64] [i64 3883613981455081034, i64 1508014301265110212], [2 x i64] [i64 -4271806444319755819, i64 1206411441012088169], [2 x i64] [i64 -6834890310911609310, i64 1930258305619341071], [2 x i64] [i64 5600134195496443521, i64 1544206644495472857], [2 x i64] [i64 -2898590273086665829, i64 1235365315596378285], [2 x i64] [i64 6430302007287065643, i64 1976584504954205257], [2 x i64] [i64 -2234456023654168132, i64 1581267603963364205], [2 x i64] [i64 -5476913633665244829, i64 1265014083170691364], [2 x i64] [i64 -8763061813864391727, i64 2024022533073106183], [2 x i64] [i64 -3321100636349603058, i64 1619218026458484946], [2 x i64] [i64 8411165935146048523, i64 1295374421166787957], [2 x i64] [i64 -1299529762733963656, i64 2072599073866860731], [2 x i64] [i64 -8418321439670991571, i64 1658079259093488585], [2 x i64] [i64 8022738107230848036, i64 1326463407274790868], [2 x i64] [i64 9147032156827446534, i64 2122341451639665389], [2 x i64] [i64 -7439769533505684065, i64 1697873161311732311], [2 x i64] [i64 5116230817421183718, i64 1358298529049385849], [2 x i64] [i64 -2882077136351837022, i64 2173277646479017358], [2 x i64] [i64 1383687105660440706, i64 1738622117183213887], [2 x i64] [i64 -6271747944955468082, i64 1390897693746571109], [2 x i64] [i64 8411947361780802685, i64 2225436309994513775], [2 x i64] [i64 6729557889424642148, i64 1780349047995611020], [2 x i64] [i64 5383646311539713719, i64 1424279238396488816], [2 x i64] [i64 1235136468979721303, i64 2278846781434382106], [2 x i64] [i64 -2701239639558133281, i64 1823077425147505684], [2 x i64] [i64 -2160991711646506624, i64 1458461940118004547], [2 x i64] [i64 5649904260166615347, i64 1166769552094403638], [2 x i64] [i64 5350498001524674232, i64 1866831283351045821], [2 x i64] [i64 591049586477829062, i64 1493465026680836657], [2 x i64] [i64 -6905857960301557397, i64 1194772021344669325], [2 x i64] [i64 18673707743239135, i64 1911635234151470921], [2 x i64] [i64 -3674409848547319015, i64 1529308187321176736], [2 x i64] [i64 8128518565387875758, i64 1223446549856941389], [2 x i64] [i64 1937583260394870242, i64 1957514479771106223], [2 x i64] [i64 8928764237799716840, i64 1566011583816884978], [2 x i64] [i64 -3925035053985957497, i64 1252809267053507982], [2 x i64] [i64 8477339172590109297, i64 2004494827285612772], [2 x i64] [i64 -596826291411733209, i64 1603595861828490217], [2 x i64] [i64 6901236596354434079, i64 1282876689462792174], [2 x i64] [i64 -26067890058636443, i64 2052602703140467478], [2 x i64] [i64 3668494502695001169, i64 1642082162512373983], [2 x i64] [i64 -8133250842069730034, i64 1313665730009899186], [2 x i64] [i64 9122891541139893884, i64 2101865168015838698], [2 x i64] [i64 -3769733211313815862, i64 1681492134412670958], [2 x i64] [i64 673562245690857633, i64 1345193707530136767]]
@std.ryu.DOUBLE_POW5_SPLIT = global [326 x [2 x i64]] [[2 x i64] [i64 0, i64 1152921504606846976], [2 x i64] [i64 0, i64 1441151880758558720], [2 x i64] [i64 0, i64 1801439850948198400], [2 x i64] [i64 0, i64 2251799813685248000], [2 x i64] [i64 0, i64 1407374883553280000], [2 x i64] [i64 0, i64 1759218604441600000], [2 x i64] [i64 0, i64 2199023255552000000], [2 x i64] [i64 0, i64 1374389534720000000], [2 x i64] [i64 0, i64 1717986918400000000], [2 x i64] [i64 0, i64 2147483648000000000], [2 x i64] [i64 0, i64 1342177280000000000], [2 x i64] [i64 0, i64 1677721600000000000], [2 x i64] [i64 0, i64 2097152000000000000], [2 x i64] [i64 0, i64 1310720000000000000], [2 x i64] [i64 0, i64 1638400000000000000], [2 x i64] [i64 0, i64 2048000000000000000], [2 x i64] [i64 0, i64 1280000000000000000], [2 x i64] [i64 0, i64 1600000000000000000], [2 x i64] [i64 0, i64 2000000000000000000], [2 x i64] [i64 0, i64 1250000000000000000], [2 x i64] [i64 0, i64 1562500000000000000], [2 x i64] [i64 0, i64 1953125000000000000], [2 x i64] [i64 0, i64 1220703125000000000], [2 x i64] [i64 0, i64 1525878906250000000], [2 x i64] [i64 0, i64 1907348632812500000], [2 x i64] [i64 0, i64 1192092895507812500], [2 x i64] [i64 0, i64 1490116119384765625], [2 x i64] [i64 4611686018427387904, i64 1862645149230957031], [2 x i64] [i64 -8646911284551352320, i64 1164153218269348144], [2 x i64] [i64 -6196953087261802496, i64 1455191522836685180], [2 x i64] [i64 -3134505340649865216, i64 1818989403545856475], [2 x i64] [i64 -3918131675812331520, i64 2273736754432320594], [2 x i64] [i64 -4754675306596401152, i64 1421085471520200371], [2 x i64] [i64 -5943344133245501440, i64 1776356839400250464], [2 x i64] [i64 -2817494148129488896, i64 2220446049250313080], [2 x i64] [i64 -8678462870222012416, i64 1387778780781445675], [2 x i64] [i64 7598665485932036096, i64 1734723475976807094], [2 x i64] [i64 274959820560269312, i64 2168404344971008868], [2 x i64] [i64 -9051522149004607488, i64 1355252715606880542], [2 x i64] [i64 2520655369026404352, i64 1694065894508600678], [2 x i64] [i64 -6072552825571770368, i64 2117582368135750847], [2 x i64] [i64 -3795345515982356480, i64 1323488980084844279], [2 x i64] [i64 -4744181894977945600, i64 1654361225106055349], [2 x i64] [i64 3293144668132343808, i64 2067951531382569187], [2 x i64] [i64 -247627591630979072, i64 1292469707114105741], [2 x i64] [i64 8913837547316051968, i64 1615587133892632177], [2 x i64] [i64 -2692761121137098752, i64 2019483917365790221], [2 x i64] [i64 -6294661719138074624, i64 1262177448353618888], [2 x i64] [i64 -3256641130495205376, i64 1577721810442023610], [2 x i64] [i64 -8682487431546394624, i64 1972152263052529513], [2 x i64] [i64 -814868626289108736, i64 1232595164407830945], [2 x i64] [i64 8204786253993389888, i64 1540743955509788682], [2 x i64] [i64 1032610780636961552, i64 1925929944387235853], [2 x i64] [i64 2951224747111794922, i64 1203706215242022408], [2 x i64] [i64 3689030933889743652, i64 1504632769052528010], [2 x i64] [i64 -4612083369492596243, i64 1880790961315660012], [2 x i64] [i64 -576709096719178700, i64 1175494350822287507], [2 x i64] [i64 -720886370898973375, i64 1469367938527859384], [2 x i64] [i64 3710578054803671186, i64 1836709923159824231], [2 x i64] [i64 26536550077201078, i64 2295887403949780289], [2 x i64] [i64 -6900943683842831182, i64 1434929627468612680], [2 x i64] [i64 -4014493586376151074, i64 1793662034335765850], [2 x i64] [i64 8816941072311974870, i64 2242077542919707313], [2 x i64] [i64 -1406940857446097563, i64 1401298464324817070], [2 x i64] [i64 -6370362090235009857, i64 1751623080406021338], [2 x i64] [i64 5872105442488401391, i64 2189528850507526673], [2 x i64] [i64 -3247463126085830987, i64 1368455531567204170], [2 x i64] [i64 -8671014926034676638, i64 1710569414459005213], [2 x i64] [i64 -1615396620688569989, i64 2138211768073756516], [2 x i64] [i64 1296220121283337709, i64 1336382355046097823], [2 x i64] [i64 -2991410866823215768, i64 1670477943807622278], [2 x i64] [i64 -8350949601956407614, i64 2088097429759527848], [2 x i64] [i64 6309871544845715001, i64 1305060893599704905], [2 x i64] [i64 -5947718624225019960, i64 1631326116999631131], [2 x i64] [i64 -7434648280281274950, i64 2039157646249538914], [2 x i64] [i64 -6952498184389490796, i64 1274473528905961821], [2 x i64] [i64 532749306367912313, i64 1593091911132452277], [2 x i64] [i64 5277622651387278295, i64 1991364888915565346], [2 x i64] [i64 7910200175544436838, i64 1244603055572228341], [2 x i64] [i64 -3947307835851617664, i64 1555753819465285426], [2 x i64] [i64 8900923260467641632, i64 1944692274331606783], [2 x i64] [i64 -5966138008276193740, i64 1215432671457254239], [2 x i64] [i64 -7457672510345242175, i64 1519290839321567799], [2 x i64] [i64 9124653435777998898, i64 1899113549151959749], [2 x i64] [i64 8008751406574943263, i64 1186945968219974843], [2 x i64] [i64 5399253239791291175, i64 1483682460274968554], [2 x i64] [i64 -2474305487115661840, i64 1854603075343710692], [2 x i64] [i64 759402079766405302, i64 1159126922089819183], [2 x i64] [i64 -3662433418719381276, i64 1448908652612273978], [2 x i64] [i64 -9189727791826614499, i64 1811135815765342473], [2 x i64] [i64 -2263787702928492316, i64 2263919769706678091], [2 x i64] [i64 7808504722524468110, i64 1414949856066673807], [2 x i64] [i64 5148944884728197234, i64 1768687320083342259], [2 x i64] [i64 1824495087482858639, i64 2210859150104177824], [2 x i64] [i64 1140309429676786649, i64 1381786968815111140], [2 x i64] [i64 1425386787095983311, i64 1727233711018888925], [2 x i64] [i64 6393419502297367043, i64 2159042138773611156], [2 x i64] [i64 -5227484847918921406, i64 1349401336733506972], [2 x i64] [i64 -1922670041471263854, i64 1686751670916883715], [2 x i64] [i64 -2403337551839079817, i64 2108439588646104644], [2 x i64] [i64 803757039314269066, i64 1317774742903815403], [2 x i64] [i64 -3606989719284551571, i64 1647218428629769253], [2 x i64] [i64 4714634887749086344, i64 2059023035787211567], [2 x i64] [i64 -8582568241225290795, i64 1286889397367007229], [2 x i64] [i64 -1504838264676837686, i64 1608611746708759036], [2 x i64] [i64 2730638187581340797, i64 2010764683385948796], [2 x i64] [i64 -7516723169616437810, i64 1256727927116217997], [2 x i64] [i64 -172531925165771454, i64 1570909908895272496], [2 x i64] [i64 4396021111970173586, i64 1963637386119090621], [2 x i64] [i64 5053356204195052443, i64 1227273366324431638], [2 x i64] [i64 -2906676781610960254, i64 1534091707905539547], [2 x i64] [i64 -3633345977013700317, i64 1917614634881924434], [2 x i64] [i64 -4576684244847256650, i64 1198509146801202771], [2 x i64] [i64 -5720855306059070813, i64 1498136433501503464], [2 x i64] [i64 -2539383114146450612, i64 1872670541876879330], [2 x i64] [i64 -3892957455555225585, i64 1170419088673049581], [2 x i64] [i64 4357175217410743827, i64 1463023860841311977], [2 x i64] [i64 -8388589033518733928, i64 1828779826051639971], [2 x i64] [i64 7961007781811134206, i64 2285974782564549964], [2 x i64] [i64 -4247742173222816929, i64 1428734239102843727], [2 x i64] [i64 -5309677716528521161, i64 1785917798878554659], [2 x i64] [i64 -6637097145660651452, i64 2232397248598193324], [2 x i64] [i64 -1842342706824213205, i64 1395248280373870827], [2 x i64] [i64 -2302928383530266507, i64 1744060350467338534], [2 x i64] [i64 -7490346497840221037, i64 2180075438084173168], [2 x i64] [i64 6847748484918331612, i64 1362547148802608230], [2 x i64] [i64 -663686430706861293, i64 1703183936003260287], [2 x i64] [i64 -829608038383576617, i64 2128979920004075359], [2 x i64] [i64 -518505023989735386, i64 1330612450002547099], [2 x i64] [i64 -648131279987169232, i64 1663265562503183874], [2 x i64] [i64 -5421850118411349444, i64 2079081953128979843], [2 x i64] [i64 5834715712847682405, i64 1299426220705612402], [2 x i64] [i64 -1929977395795172801, i64 1624282775882015502], [2 x i64] [i64 -7024157763171353905, i64 2030353469852519378], [2 x i64] [i64 -6695941611195790143, i64 1268970918657824611], [2 x i64] [i64 -8369927013994737679, i64 1586213648322280764], [2 x i64] [i64 -5850722749066034194, i64 1982767060402850955], [2 x i64] [i64 5566670318688504437, i64 1239229412751781847], [2 x i64] [i64 2346651879933242642, i64 1549036765939727309], [2 x i64] [i64 7545000868343941206, i64 1936295957424659136], [2 x i64] [i64 4715625542714963254, i64 1210184973390411960], [2 x i64] [i64 5894531928393704067, i64 1512731216738014950], [2 x i64] [i64 -1855207126362645724, i64 1890914020922518687], [2 x i64] [i64 -1159504453976653577, i64 1181821263076574179], [2 x i64] [i64 -1449380567470816972, i64 1477276578845717724], [2 x i64] [i64 2799960309088866689, i64 1846595723557147156], [2 x i64] [i64 -7473396843674234127, i64 1154122327223216972], [2 x i64] [i64 -4730060036165404755, i64 1442652909029021215], [2 x i64] [i64 -5912575045206755944, i64 1803316136286276519], [2 x i64] [i64 -7390718806508444929, i64 2254145170357845649], [2 x i64] [i64 -7513235640390177, i64 1408840731473653530], [2 x i64] [i64 -4621077562977875625, i64 1761050914342066913], [2 x i64] [i64 3447025083132431277, i64 2201313642927583642], [2 x i64] [i64 6766076695385157452, i64 1375821026829739776], [2 x i64] [i64 8457595869231446815, i64 1719776283537174720], [2 x i64] [i64 -7874749237170243097, i64 2149720354421468400], [2 x i64] [i64 6607496772837067824, i64 1343575221513417750], [2 x i64] [i64 -964001070808441028, i64 1679469026891772187], [2 x i64] [i64 -1205001338510551285, i64 2099336283614715234], [2 x i64] [i64 -3058968845782788505, i64 1312085177259197021], [2 x i64] [i64 5399660979626290177, i64 1640106471573996277], [2 x i64] [i64 -7085481830749300991, i64 2050133089467495346], [2 x i64] [i64 -6734269153432007072, i64 1281333180917184591], [2 x i64] [i64 -8417836441790008839, i64 1601666476146480739], [2 x i64] [i64 7924448521472040567, i64 2002083095183100924], [2 x i64] [i64 -4270591710934750454, i64 1251301934489438077], [2 x i64] [i64 3885132398186337741, i64 1564127418111797597], [2 x i64] [i64 -8978642557549241536, i64 1955159272639746996], [2 x i64] [i64 -3305808589254582008, i64 1221974545399841872], [2 x i64] [i64 479425281859160394, i64 1527468181749802341], [2 x i64] [i64 5210967620751338397, i64 1909335227187252926], [2 x i64] [i64 -1354831255457801406, i64 1193334516992033078], [2 x i64] [i64 -6305225087749639662, i64 1491668146240041348], [2 x i64] [i64 -3269845341259661673, i64 1864585182800051685], [2 x i64] [i64 -6655339356714676450, i64 1165365739250032303], [2 x i64] [i64 -8319174195893345562, i64 1456707174062540379], [2 x i64] [i64 8047776328842869663, i64 1820883967578175474], [2 x i64] [i64 836348374198811271, i64 2276104959472719343], [2 x i64] [i64 7440246761515338900, i64 1422565599670449589], [2 x i64] [i64 -4534749603387990086, i64 1778206999588061986], [2 x i64] [i64 8166621051047176104, i64 2222758749485077483], [2 x i64] [i64 2798295147690791113, i64 1389224218428173427], [2 x i64] [i64 -1113817083813899013, i64 1736530273035216783], [2 x i64] [i64 -1392271354767373766, i64 2170662841294020979], [2 x i64] [i64 8353202440125167204, i64 1356664275808763112], [2 x i64] [i64 -8005241023553092611, i64 1695830344760953890], [2 x i64] [i64 3828506775840797949, i64 2119787930951192363], [2 x i64] [i64 86973725686804766, i64 1324867456844495227], [2 x i64] [i64 -4502968861318881947, i64 1656084321055619033], [2 x i64] [i64 3594660960206173375, i64 2070105401319523792], [2 x i64] [i64 2246663100128858359, i64 1293815875824702370], [2 x i64] [i64 -6415043161693702859, i64 1617269844780877962], [2 x i64] [i64 5816254103165035138, i64 2021587305976097453], [2 x i64] [i64 5941001823691840913, i64 1263492066235060908], [2 x i64] [i64 7426252279614801142, i64 1579365082793826135], [2 x i64] [i64 4671129331091113523, i64 1974206353492282669], [2 x i64] [i64 5225298841145639904, i64 1233878970932676668], [2 x i64] [i64 6531623551432049880, i64 1542348713665845835], [2 x i64] [i64 3552843420862674446, i64 1927935892082307294], [2 x i64] [i64 -2391158880388216375, i64 1204959932551442058], [2 x i64] [i64 -7600634618912658373, i64 1506199915689302573], [2 x i64] [i64 -277421236786047158, i64 1882749894611628216], [2 x i64] [i64 -7090917300632361330, i64 1176718684132267635], [2 x i64] [i64 -8863646625790451662, i64 1470898355165334544], [2 x i64] [i64 -6467872263810676674, i64 1838622943956668180], [2 x i64] [i64 -3473154311335957938, i64 2298278679945835225], [2 x i64] [i64 2440964573842414192, i64 1436424174966147016], [2 x i64] [i64 3051205717303017741, i64 1795530218707683770], [2 x i64] [i64 -5409364890226003632, i64 2244412773384604712], [2 x i64] [i64 8148361989677217490, i64 1402757983365377945], [2 x i64] [i64 -3649605568185641850, i64 1753447479206722431], [2 x i64] [i64 -4562006960232052312, i64 2191809349008403039], [2 x i64] [i64 -2851254350145032695, i64 1369880843130251899], [2 x i64] [i64 -3564067937681290869, i64 1712351053912814874], [2 x i64] [i64 -9066770940529001490, i64 2140438817391018593], [2 x i64] [i64 -1055045819403238027, i64 1337774260869386620], [2 x i64] [i64 3292878744173340370, i64 1672217826086733276], [2 x i64] [i64 4116098430216675462, i64 2090272282608416595], [2 x i64] [i64 266718509671728212, i64 1306420176630260372], [2 x i64] [i64 333398137089660265, i64 1633025220787825465], [2 x i64] [i64 5028433689789463235, i64 2041281525984781831], [2 x i64] [i64 -8386443989950055238, i64 1275800953740488644], [2 x i64] [i64 -5871368969010181144, i64 1594751192175610805], [2 x i64] [i64 1884160825592049379, i64 1993438990219513507], [2 x i64] [i64 -1128242493218663091, i64 1245899368887195941], [2 x i64] [i64 7813068920331446945, i64 1557374211108994927], [2 x i64] [i64 5154650131986920777, i64 1946717763886243659], [2 x i64] [i64 915813323278131534, i64 1216698602428902287], [2 x i64] [i64 -3466919364329723487, i64 1520873253036127858], [2 x i64] [i64 -8945335223839542262, i64 1901091566295159823], [2 x i64] [i64 -5590834514899713914, i64 1188182228934474889], [2 x i64] [i64 2234828893230133415, i64 1485227786168093612], [2 x i64] [i64 2793536116537666769, i64 1856534732710117015], [2 x i64] [i64 8663489100477123587, i64 1160334207943823134], [2 x i64] [i64 1605989338741628675, i64 1450417759929778918], [2 x i64] [i64 -7215885363427739964, i64 1813022199912223647], [2 x i64] [i64 -9019856704284674954, i64 2266277749890279559], [2 x i64] [i64 -5637410440177921847, i64 1416423593681424724], [2 x i64] [i64 -2435077031795014404, i64 1770529492101780905], [2 x i64] [i64 6179525747111007803, i64 2213161865127226132], [2 x i64] [i64 -5361168444910395931, i64 1383226165704516332], [2 x i64] [i64 -2089774537710607010, i64 1729032707130645415], [2 x i64] [i64 -2612218172138258762, i64 2161290883913306769], [2 x i64] [i64 2979049660840976177, i64 1350806802445816731], [2 x i64] [i64 -887873942376167682, i64 1688508503057270913], [2 x i64] [i64 8113529608884566205, i64 2110635628821588642], [2 x i64] [i64 -8764102049729309834, i64 1319147268013492901], [2 x i64] [i64 -1731755525306861484, i64 1648934085016866126], [2 x i64] [i64 -6776380425060964759, i64 2061167606271082658], [2 x i64] [i64 -6541080774876796927, i64 1288229753919426661], [2 x i64] [i64 1047021068258779650, i64 1610287192399283327], [2 x i64] [i64 -3302909683103913342, i64 2012858990499104158], [2 x i64] [i64 4853210475701136017, i64 1258036869061940099], [2 x i64] [i64 1454827076199032118, i64 1572546086327425124], [2 x i64] [i64 1818533845248790147, i64 1965682607909281405], [2 x i64] [i64 3442426662494187794, i64 1228551629943300878], [2 x i64] [i64 -4920338708737041066, i64 1535689537429126097], [2 x i64] [i64 3072948650933474476, i64 1919611921786407622], [2 x i64] [i64 -2691093111593966357, i64 1199757451116504763], [2 x i64] [i64 -3363866389492457946, i64 1499696813895630954], [2 x i64] [i64 -8816519005292960336, i64 1874621017369538693], [2 x i64] [i64 8324733676974063502, i64 1171638135855961683], [2 x i64] [i64 5794231077790191473, i64 1464547669819952104], [2 x i64] [i64 7242788847237739342, i64 1830684587274940130], [2 x i64] [i64 -169885977807601630, i64 2288355734093675162], [2 x i64] [i64 -2412021745343444971, i64 1430222333808546976], [2 x i64] [i64 1596658836748081690, i64 1787777917260683721], [2 x i64] [i64 6607509564362490017, i64 2234722396575854651], [2 x i64] [i64 1823850468512862308, i64 1396701497859909157], [2 x i64] [i64 6891499104068465790, i64 1745876872324886446], [2 x i64] [i64 -608998156769193571, i64 2182346090406108057], [2 x i64] [i64 4231062170446641922, i64 1363966306503817536], [2 x i64] [i64 5288827713058302403, i64 1704957883129771920], [2 x i64] [i64 6611034641322878003, i64 2131197353912214900], [2 x i64] [i64 -5091475386027977056, i64 1331998346195134312], [2 x i64] [i64 -1752658214107583416, i64 1664997932743917890], [2 x i64] [i64 -6802508786061867174, i64 2081247415929897363], [2 x i64] [i64 4971804045566108824, i64 1300779634956185852], [2 x i64] [i64 6214755056957636030, i64 1625974543695232315], [2 x i64] [i64 3156757802769657134, i64 2032468179619040394], [2 x i64] [i64 6584659645158423613, i64 1270292612261900246], [2 x i64] [i64 -992547480406746292, i64 1587865765327375307], [2 x i64] [i64 -1240684350508432865, i64 1984832206659219134], [2 x i64] [i64 6142101308573311315, i64 1240520129162011959], [2 x i64] [i64 3065940617289251240, i64 1550650161452514949], [2 x i64] [i64 8444111790038951954, i64 1938312701815643686], [2 x i64] [i64 665883850346957067, i64 1211445438634777304], [2 x i64] [i64 832354812933696334, i64 1514306798293471630], [2 x i64] [i64 -8182928520687655390, i64 1892883497866839537], [2 x i64] [i64 -502644307002396715, i64 1183052186166774710], [2 x i64] [i64 -5239991402180383798, i64 1478815232708468388], [2 x i64] [i64 -1938303234298091843, i64 1848519040885585485], [2 x i64] [i64 -5823125539863695306, i64 1155324400553490928], [2 x i64] [i64 -2667220906402231229, i64 1444155500691863660], [2 x i64] [i64 1277659885424598868, i64 1805194375864829576], [2 x i64] [i64 1597074856780748586, i64 2256492969831036970], [2 x i64] [i64 5609857803915355770, i64 1410308106144398106], [2 x i64] [i64 -2211049781960581095, i64 1762885132680497632], [2 x i64] [i64 1847873790976661535, i64 2203606415850622041], [2 x i64] [i64 -5762607908280668397, i64 1377254009906638775], [2 x i64] [i64 -7203259885350835496, i64 1721567512383298469], [2 x i64] [i64 219297180166231438, i64 2151959390479123087], [2 x i64] [i64 7054589765244976505, i64 1344974619049451929], [2 x i64] [i64 -5016820848725943081, i64 1681218273811814911], [2 x i64] [i64 -6271026060907428851, i64 2101522842264768639], [2 x i64] [i64 -3919391288067143032, i64 1313451776415480399], [2 x i64] [i64 -4899239110083928790, i64 1641814720519350499], [2 x i64] [i64 -6124048887604910988, i64 2052268400649188124], [2 x i64] [i64 -1521687545539375415, i64 1282667750405742577], [2 x i64] [i64 7321262604930556539, i64 1603334688007178222], [2 x i64] [i64 -71793780691580134, i64 2004168360008972777], [2 x i64] [i64 4566814905495150320, i64 1252605225005607986], [2 x i64] [i64 -3514853404985837908, i64 1565756531257009982], [2 x i64] [i64 -9005252774659685289, i64 1957195664071262478], [2 x i64] [i64 1289246043478778550, i64 1223247290044539049], [2 x i64] [i64 6223243572775861092, i64 1529059112555673811], [2 x i64] [i64 3167368447542438461, i64 1911323890694592264], [2 x i64] [i64 1979605279714024038, i64 1194577431684120165], [2 x i64] [i64 7086192618069917952, i64 1493221789605150206], [2 x i64] [i64 -365631264267378368, i64 1866527237006437757], [2 x i64] [i64 -4840205558594499384, i64 1166579523129023598], [2 x i64] [i64 7784801107039039482, i64 1458224403911279498], [2 x i64] [i64 507629346944023544, i64 1822780504889099373], [2 x i64] [i64 5246222702107417334, i64 2278475631111374216], [2 x i64] [i64 3278889188817135834, i64 1424047269444608885], [2 x i64] [i64 8710297504448807696, i64 1780059086805761106]]
@std.ryu.DOUBLE_POW5_INV_TABLE_SIZE = internal global i64 342
@std.ryu.DOUBLE_POW5_TABLE_SIZE = internal global i64 326
@std.ryu.FLOAT_MANTISSA_BITS = internal global i32 23
@std.ryu.FLOAT_EXPONENT_BITS = internal global i32 8
@std.ryu.FLOAT_BIAS = internal global i32 127
@std.ryu.FLOAT_POW5_INV_BITCOUNT = global i32 59
@std.ryu.FLOAT_POW5_BITCOUNT = global i32 61
@std.ryu.FLOAT_POW5_INV_SPLIT = global [55 x i64] [i64 576460752303423489, i64 461168601842738791, i64 368934881474191033, i64 295147905179352826, i64 472236648286964522, i64 377789318629571618, i64 302231454903657294, i64 483570327845851670, i64 386856262276681336, i64 309485009821345069, i64 495176015714152110, i64 396140812571321688, i64 316912650057057351, i64 507060240091291761, i64 405648192073033409, i64 324518553658426727, i64 519229685853482763, i64 415383748682786211, i64 332306998946228969, i64 531691198313966350, i64 425352958651173080, i64 340282366920938464, i64 544451787073501542, i64 435561429658801234, i64 348449143727040987, i64 557518629963265579, i64 446014903970612463, i64 356811923176489971, i64 570899077082383953, i64 456719261665907162, i64 365375409332725730, i64 292300327466180584, i64 467680523945888934, i64 374144419156711148, i64 299315535325368918, i64 478904856520590269, i64 383123885216472215, i64 306499108173177772, i64 490398573077084435, i64 392318858461667548, i64 313855086769334039, i64 502168138830934462, i64 401734511064747569, i64 321387608851798056, i64 514220174162876889, i64 411376139330301511, i64 329100911464241209, i64 526561458342785934, i64 421249166674228747, i64 336999333339382998, i64 539198933343012796, i64 431359146674410237, i64 345087317339528190, i64 552139707743245103, i64 441711766194596083]
@std.ryu.FLOAT_POW5_SPLIT = global [47 x i64] [i64 1152921504606846976, i64 1441151880758558720, i64 1801439850948198400, i64 2251799813685248000, i64 1407374883553280000, i64 1759218604441600000, i64 2199023255552000000, i64 1374389534720000000, i64 1717986918400000000, i64 2147483648000000000, i64 1342177280000000000, i64 1677721600000000000, i64 2097152000000000000, i64 1310720000000000000, i64 1638400000000000000, i64 2048000000000000000, i64 1280000000000000000, i64 1600000000000000000, i64 2000000000000000000, i64 1250000000000000000, i64 1562500000000000000, i64 1953125000000000000, i64 1220703125000000000, i64 1525878906250000000, i64 1907348632812500000, i64 1192092895507812500, i64 1490116119384765625, i64 1862645149230957031, i64 1164153218269348144, i64 1455191522836685180, i64 1818989403545856475, i64 2273736754432320594, i64 1421085471520200371, i64 1776356839400250464, i64 2220446049250313080, i64 1387778780781445675, i64 1734723475976807094, i64 2168404344971008868, i64 1355252715606880542, i64 1694065894508600678, i64 2117582368135750847, i64 1323488980084844279, i64 1654361225106055349, i64 2067951531382569187, i64 1292469707114105741, i64 1615587133892632177, i64 2019483917365790221]
@std.ryu.DOUBLE_EXPONENT_BIAS = internal global i32 1023
@std.ryu.FLOAT_EXPONENT_BIAS = internal global i32 127
@.str = private unnamed_addr constant [4 x i8] c"NaN\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"Infinity\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"0E0\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"inf\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"0.0\00", align 1
@.str.8 = private unnamed_addr constant [6 x i8] c"0.000\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"0.000\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"0.000\00", align 1
@.str.11 = private unnamed_addr constant [6 x i8] c"0.000\00", align 1

define void @"func.std.as_str..1.0R.const.struct.std::string.builtin.str"(%builtin.str* noalias nocapture nonnull sret(%builtin.str) %0, %"struct.std::string.4"* %1) {
alloca:
  %2 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %1, i64 0, i32 0
  %load_tmp.i.i = load i8*, i8** %2, align 8
  %3 = ptrtoint i8* %load_tmp.i.i to i64
  %cmp_tmp.i.i = icmp eq i8* %load_tmp.i.i, null
  %bit_and_tmp.i.i = and i64 %3, 1
  %4 = icmp ne i64 %bit_and_tmp.i.i, 0
  %bool_or_tmp.i.i = or i1 %cmp_tmp.i.i, %4
  %5 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %1, i64 0, i32 1
  %6 = bitcast i8** %5 to i8*
  br i1 %bool_or_tmp.i.i, label %then.i5, label %else.i6

then.i5:                                          ; preds = %alloca
  %rshift_tmp.i.i = lshr i64 %3, 1
  %ptr_add_tmp.i = getelementptr i8, i8* %6, i64 %rshift_tmp.i.i
  br label %"func.std.end_ptr..1.0R.const.struct.std::string.0P.builtin.uint8.exit"

else.i6:                                          ; preds = %alloca
  %load_tmp1.i = load i8*, i8** %5, align 8
  br label %"func.std.end_ptr..1.0R.const.struct.std::string.0P.builtin.uint8.exit"

"func.std.end_ptr..1.0R.const.struct.std::string.0P.builtin.uint8.exit": ; preds = %else.i6, %then.i5
  %7 = phi i8* [ %load_tmp.i.i, %else.i6 ], [ %6, %then.i5 ]
  %8 = phi i8* [ %load_tmp1.i, %else.i6 ], [ %ptr_add_tmp.i, %then.i5 ]
  %9 = getelementptr inbounds %builtin.str, %builtin.str* %0, i64 0, i32 0
  %10 = getelementptr inbounds %builtin.str, %builtin.str* %0, i64 0, i32 1
  store i8* %7, i8** %9, align 8
  store i8* %8, i8** %10, align 8
  ret void
}

define void @"func.std.swap..2.0R.struct.std::string.0R.struct.std::string.void"(%"struct.std::string.4"* %0, %"struct.std::string.4"* %1) {
alloca:
  %2 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %0, i64 0, i32 0
  %3 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %1, i64 0, i32 0
  %load_tmp.i = load i8*, i8** %2, align 8
  %load_tmp1.i = load i8*, i8** %3, align 8
  store i8* %load_tmp1.i, i8** %2, align 8
  store i8* %load_tmp.i, i8** %3, align 8
  %4 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %1, i64 0, i32 1
  %load_tmp.i3 = load i8*, i8** %4, align 8
  %load_tmp1.i4 = load i8*, i8** %5, align 8
  store i8* %load_tmp1.i4, i8** %4, align 8
  store i8* %load_tmp.i3, i8** %5, align 8
  %6 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %0, i64 0, i32 2
  %7 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %1, i64 0, i32 2
  %load_tmp.i1 = load i8*, i8** %6, align 8
  %load_tmp1.i2 = load i8*, i8** %7, align 8
  store i8* %load_tmp1.i2, i8** %6, align 8
  store i8* %load_tmp.i1, i8** %7, align 8
  ret void
}

define i64 @"func.std.size..1.0R.const.struct.std::string.builtin.uint64"(%"struct.std::string.4"* %0) {
alloca:
  %1 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %0, i64 0, i32 0
  %load_tmp.i.i.i = load i8*, i8** %1, align 8, !noalias !0
  %2 = ptrtoint i8* %load_tmp.i.i.i to i64
  %cmp_tmp.i.i.i = icmp eq i8* %load_tmp.i.i.i, null
  %bit_and_tmp.i.i.i = and i64 %2, 1
  %3 = icmp ne i64 %bit_and_tmp.i.i.i, 0
  %bool_or_tmp.i.i.i = or i1 %cmp_tmp.i.i.i, %3
  %4 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %0, i64 0, i32 1
  br i1 %bool_or_tmp.i.i.i, label %then.i5.i, label %else.i6.i

then.i5.i:                                        ; preds = %alloca
  %5 = bitcast i8** %4 to i8*
  %rshift_tmp.i.i.i = lshr i64 %2, 1
  %ptr_add_tmp.i.i = getelementptr i8, i8* %5, i64 %rshift_tmp.i.i.i
  %.pre = ptrtoint i8** %4 to i64
  br label %"func.std.as_str..1.0R.const.struct.std::string.builtin.str.exit"

else.i6.i:                                        ; preds = %alloca
  %load_tmp1.i.i = load i8*, i8** %4, align 8, !noalias !0
  br label %"func.std.as_str..1.0R.const.struct.std::string.builtin.str.exit"

"func.std.as_str..1.0R.const.struct.std::string.builtin.str.exit": ; preds = %then.i5.i, %else.i6.i
  %.pre-phi = phi i64 [ %.pre, %then.i5.i ], [ %2, %else.i6.i ]
  %6 = phi i8* [ %ptr_add_tmp.i.i, %then.i5.i ], [ %load_tmp1.i.i, %else.i6.i ]
  %7 = ptrtoint i8* %6 to i64
  %8 = sub i64 %7, %.pre-phi
  ret i64 %8
}

define i8* @"func.std.data..1.0R.struct.std::string.0P.builtin.uint8"(%"struct.std::string.4"* %0) {
alloca:
  %1 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %0, i64 0, i32 0
  %load_tmp.i.i = load i8*, i8** %1, align 8
  %2 = ptrtoint i8* %load_tmp.i.i to i64
  %cmp_tmp.i.i = icmp eq i8* %load_tmp.i.i, null
  %bit_and_tmp.i.i = and i64 %2, 1
  %3 = icmp ne i64 %bit_and_tmp.i.i, 0
  %bool_or_tmp.i.i = or i1 %cmp_tmp.i.i, %3
  %4 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %0, i64 0, i32 1
  %5 = bitcast i8** %4 to i8*
  %6 = select i1 %bool_or_tmp.i.i, i8* %5, i8* %load_tmp.i.i
  ret i8* %6
}

define %"struct.std::string.4"* @"op.290..2.0R.struct.std::string.builtin.str.0R.struct.std::string"(%"struct.std::string.4"* %0, %builtin.str* noalias nocapture nonnull byval(%builtin.str) %1) {
alloca:
  %load_tmp.elt = getelementptr inbounds %builtin.str, %builtin.str* %1, i64 0, i32 0
  %load_tmp.unpack = load i8*, i8** %load_tmp.elt, align 8
  %load_tmp.elt7 = getelementptr inbounds %builtin.str, %builtin.str* %1, i64 0, i32 1
  %load_tmp.unpack8 = load i8*, i8** %load_tmp.elt7, align 8
  %2 = ptrtoint i8* %load_tmp.unpack8 to i64
  %3 = ptrtoint i8* %load_tmp.unpack to i64
  %4 = sub i64 %2, %3
  %5 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %0, i64 0, i32 0
  %load_tmp.i.i.i.i = load i8*, i8** %5, align 8, !noalias !3
  %6 = ptrtoint i8* %load_tmp.i.i.i.i to i64
  %cmp_tmp.i.i.i.i = icmp eq i8* %load_tmp.i.i.i.i, null
  %bit_and_tmp.i.i.i.i = and i64 %6, 1
  %7 = icmp ne i64 %bit_and_tmp.i.i.i.i, 0
  %bool_or_tmp.i.i.i.i = or i1 %cmp_tmp.i.i.i.i, %7
  %8 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %0, i64 0, i32 1
  %9 = bitcast i8** %8 to i8*
  %10 = select i1 %bool_or_tmp.i.i.i.i, i8* %9, i8* %load_tmp.i.i.i.i
  br i1 %bool_or_tmp.i.i.i.i, label %then.i5.i.i, label %else.i6.i.i

then.i5.i.i:                                      ; preds = %alloca
  %rshift_tmp.i.i.i.i = lshr i64 %6, 1
  %ptr_add_tmp.i.i.i = getelementptr i8, i8* %9, i64 %rshift_tmp.i.i.i.i
  br label %"func.std.size..1.0R.const.struct.std::string.builtin.uint64.exit"

else.i6.i.i:                                      ; preds = %alloca
  %load_tmp1.i.i.i = load i8*, i8** %8, align 8, !noalias !3
  br label %"func.std.size..1.0R.const.struct.std::string.builtin.uint64.exit"

"func.std.size..1.0R.const.struct.std::string.builtin.uint64.exit": ; preds = %then.i5.i.i, %else.i6.i.i
  %11 = phi i8* [ %ptr_add_tmp.i.i.i, %then.i5.i.i ], [ %load_tmp1.i.i.i, %else.i6.i.i ]
  %12 = ptrtoint i8* %11 to i64
  %13 = ptrtoint i8* %10 to i64
  %14 = sub i64 %12, %13
  %add_tmp = add i64 %14, %4
  call void @"func.std.reserve..2.0R.struct.std::string.builtin.uint64.void"(%"struct.std::string.4"* %0, i64 %add_tmp)
  %load_tmp.i.i13 = load i8*, i8** %5, align 8
  %15 = ptrtoint i8* %load_tmp.i.i13 to i64
  %cmp_tmp.i.i14 = icmp eq i8* %load_tmp.i.i13, null
  %bit_and_tmp.i.i15 = and i64 %15, 1
  %16 = icmp ne i64 %bit_and_tmp.i.i15, 0
  %bool_or_tmp.i.i16 = or i1 %cmp_tmp.i.i14, %16
  br i1 %bool_or_tmp.i.i16, label %then.i18, label %else.i20

then.i18:                                         ; preds = %"func.std.size..1.0R.const.struct.std::string.builtin.uint64.exit"
  %rshift_tmp.i.i = lshr i64 %15, 1
  %ptr_add_tmp.i17 = getelementptr i8, i8* %9, i64 %rshift_tmp.i.i
  br label %"func.std.end_ptr..1.0R.const.struct.std::string.0P.builtin.uint8.exit"

else.i20:                                         ; preds = %"func.std.size..1.0R.const.struct.std::string.builtin.uint64.exit"
  %load_tmp1.i19 = load i8*, i8** %8, align 8
  br label %"func.std.end_ptr..1.0R.const.struct.std::string.0P.builtin.uint8.exit"

"func.std.end_ptr..1.0R.const.struct.std::string.0P.builtin.uint8.exit": ; preds = %else.i20, %then.i18
  %17 = phi i8* [ %ptr_add_tmp.i17, %then.i18 ], [ %load_tmp1.i19, %else.i20 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %17, i8* align 1 %load_tmp.unpack, i64 %4, i1 false)
  %load_tmp.i.i = load i8*, i8** %5, align 8
  %18 = ptrtoint i8* %load_tmp.i.i to i64
  %cmp_tmp.i.i = icmp eq i8* %load_tmp.i.i, null
  %bit_and_tmp.i.i = and i64 %18, 1
  %19 = icmp ne i64 %bit_and_tmp.i.i, 0
  %bool_or_tmp.i.i = or i1 %cmp_tmp.i.i, %19
  br i1 %bool_or_tmp.i.i, label %then.i, label %else.i

then.i:                                           ; preds = %"func.std.end_ptr..1.0R.const.struct.std::string.0P.builtin.uint8.exit"
  %20 = icmp eq i64 %add_tmp, 0
  br i1 %20, label %then.i.i, label %else.i.i

then.i.i:                                         ; preds = %then.i
  store i8* null, i8** %5, align 8
  br label %"func.std.set_size_unsafe..2.0R.struct.std::string.builtin.uint64.void.exit"

else.i.i:                                         ; preds = %then.i
  %lshift_tmp.i.i = shl i64 %add_tmp, 1
  %bit_or_tmp.i.i = or i64 %lshift_tmp.i.i, 1
  %21 = inttoptr i64 %bit_or_tmp.i.i to i8*
  store i8* %21, i8** %5, align 8
  br label %"func.std.set_size_unsafe..2.0R.struct.std::string.builtin.uint64.void.exit"

else.i:                                           ; preds = %"func.std.end_ptr..1.0R.const.struct.std::string.0P.builtin.uint8.exit"
  %ptr_add_tmp.i = getelementptr i8, i8* %load_tmp.i.i, i64 %add_tmp
  store i8* %ptr_add_tmp.i, i8** %8, align 8
  br label %"func.std.set_size_unsafe..2.0R.struct.std::string.builtin.uint64.void.exit"

"func.std.set_size_unsafe..2.0R.struct.std::string.builtin.uint64.void.exit": ; preds = %then.i.i, %else.i.i, %else.i
  ret %"struct.std::string.4"* %0
}

define void @"func.std.reserve..2.0R.struct.std::string.builtin.uint64.void"(%"struct.std::string.4"* %0, i64 %1) {
alloca:
  %2 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %0, i64 0, i32 0
  %load_tmp.i.i = load i8*, i8** %2, align 8
  %3 = ptrtoint i8* %load_tmp.i.i to i64
  %cmp_tmp.i.i = icmp eq i8* %load_tmp.i.i, null
  %bit_and_tmp.i.i = and i64 %3, 1
  %4 = icmp ne i64 %bit_and_tmp.i.i, 0
  %bool_or_tmp.i.i = or i1 %cmp_tmp.i.i, %4
  br i1 %bool_or_tmp.i.i, label %"func.std.capacity..1.0R.const.struct.std::string.builtin.uint64.exit", label %else.i

else.i:                                           ; preds = %alloca
  %5 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %0, i64 0, i32 2
  %load_tmp.i = load i8*, i8** %5, align 8
  %6 = ptrtoint i8* %load_tmp.i to i64
  %7 = sub i64 %6, %3
  br label %"func.std.capacity..1.0R.const.struct.std::string.builtin.uint64.exit"

"func.std.capacity..1.0R.const.struct.std::string.builtin.uint64.exit": ; preds = %alloca, %else.i
  %8 = phi i64 [ %7, %else.i ], [ 16, %alloca ]
  %9 = icmp ult i64 %8, %1
  br i1 %9, label %then, label %endif12

then:                                             ; preds = %"func.std.capacity..1.0R.const.struct.std::string.builtin.uint64.exit"
  %sub_tmp.i.i = add i64 %1, -1
  %rshift_tmp.i.i = lshr i64 %sub_tmp.i.i, 1
  %bit_or_tmp.i.i = or i64 %rshift_tmp.i.i, %sub_tmp.i.i
  %rshift_tmp4.i.i = lshr i64 %bit_or_tmp.i.i, 2
  %bit_or_tmp6.i.i = or i64 %rshift_tmp4.i.i, %bit_or_tmp.i.i
  %rshift_tmp8.i.i = lshr i64 %bit_or_tmp6.i.i, 4
  %bit_or_tmp10.i.i = or i64 %rshift_tmp8.i.i, %bit_or_tmp6.i.i
  %rshift_tmp12.i.i = lshr i64 %bit_or_tmp10.i.i, 8
  %bit_or_tmp14.i.i = or i64 %rshift_tmp12.i.i, %bit_or_tmp10.i.i
  %rshift_tmp16.i.i = lshr i64 %bit_or_tmp14.i.i, 16
  %bit_or_tmp18.i.i = or i64 %rshift_tmp16.i.i, %bit_or_tmp14.i.i
  %rshift_tmp20.i.i = lshr i64 %bit_or_tmp18.i.i, 32
  %bit_or_tmp22.i.i = or i64 %rshift_tmp20.i.i, %bit_or_tmp18.i.i
  %add_tmp.i.i = add i64 %bit_or_tmp22.i.i, 1
  %10 = call i8* @malloc(i64 %add_tmp.i.i), !noalias !6
  %load_tmp.i.i.i.i = load i8*, i8** %2, align 8, !noalias !9
  %11 = ptrtoint i8* %load_tmp.i.i.i.i to i64
  %cmp_tmp.i.i.i.i = icmp eq i8* %load_tmp.i.i.i.i, null
  %bit_and_tmp.i.i.i.i = and i64 %11, 1
  %12 = icmp ne i64 %bit_and_tmp.i.i.i.i, 0
  %bool_or_tmp.i.i.i.i = or i1 %cmp_tmp.i.i.i.i, %12
  %13 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %0, i64 0, i32 1
  %14 = bitcast i8** %13 to i8*
  %15 = select i1 %bool_or_tmp.i.i.i.i, i8* %14, i8* %load_tmp.i.i.i.i
  br i1 %bool_or_tmp.i.i.i.i, label %then.i5.i.i, label %else.i6.i.i

then.i5.i.i:                                      ; preds = %then
  %rshift_tmp.i.i.i.i = lshr i64 %11, 1
  %ptr_add_tmp.i.i.i = getelementptr i8, i8* %14, i64 %rshift_tmp.i.i.i.i
  br label %"func.std.size..1.0R.const.struct.std::string.builtin.uint64.exit"

else.i6.i.i:                                      ; preds = %then
  %load_tmp1.i.i.i = load i8*, i8** %13, align 8, !noalias !9
  br label %"func.std.size..1.0R.const.struct.std::string.builtin.uint64.exit"

"func.std.size..1.0R.const.struct.std::string.builtin.uint64.exit": ; preds = %then.i5.i.i, %else.i6.i.i
  %16 = phi i8* [ %ptr_add_tmp.i.i.i, %then.i5.i.i ], [ %load_tmp1.i.i.i, %else.i6.i.i ]
  %17 = ptrtoint i8* %16 to i64
  %18 = ptrtoint i8* %15 to i64
  %19 = sub i64 %17, %18
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 1 %15, i64 %19, i1 false)
  %load_tmp.i14 = load i8*, i8** %2, align 8
  %20 = ptrtoint i8* %load_tmp.i14 to i64
  %cmp_tmp.i = icmp eq i8* %load_tmp.i14, null
  %bit_and_tmp.i = and i64 %20, 1
  %21 = icmp ne i64 %bit_and_tmp.i, 0
  %bool_or_tmp.i = or i1 %cmp_tmp.i, %21
  br i1 %bool_or_tmp.i, label %endif, label %then4

then4:                                            ; preds = %"func.std.size..1.0R.const.struct.std::string.builtin.uint64.exit"
  call void @free(i8* %load_tmp.i14)
  br label %endif

endif:                                            ; preds = %then4, %"func.std.size..1.0R.const.struct.std::string.builtin.uint64.exit"
  store i8* %10, i8** %2, align 8
  %ptr_add_tmp = getelementptr i8, i8* %10, i64 %19
  store i8* %ptr_add_tmp, i8** %13, align 8
  %ptr_add_tmp11 = getelementptr i8, i8* %10, i64 %add_tmp.i.i
  %22 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %0, i64 0, i32 2
  store i8* %ptr_add_tmp11, i8** %22, align 8
  br label %endif12

endif12:                                          ; preds = %endif, %"func.std.capacity..1.0R.const.struct.std::string.builtin.uint64.exit"
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #0

define %"struct.std::string.4"* @"op.61..2.0R.struct.std::string.0R.const.struct.std::string.0R.struct.std::string"(%"struct.std::string.4"* %0, %"struct.std::string.4"* %1) {
alloca:
  %cmp_tmp = icmp eq %"struct.std::string.4"* %0, %1
  br i1 %cmp_tmp, label %then, label %endif

then:                                             ; preds = %then.i.i, %else.i.i, %else.i, %alloca
  ret %"struct.std::string.4"* %0

endif:                                            ; preds = %alloca
  %2 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %1, i64 0, i32 0
  %load_tmp.i.i.i.i = load i8*, i8** %2, align 8, !noalias !12
  %3 = ptrtoint i8* %load_tmp.i.i.i.i to i64
  %cmp_tmp.i.i.i.i = icmp eq i8* %load_tmp.i.i.i.i, null
  %bit_and_tmp.i.i.i.i = and i64 %3, 1
  %4 = icmp ne i64 %bit_and_tmp.i.i.i.i, 0
  %bool_or_tmp.i.i.i.i = or i1 %cmp_tmp.i.i.i.i, %4
  %5 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %1, i64 0, i32 1
  %6 = bitcast i8** %5 to i8*
  %7 = select i1 %bool_or_tmp.i.i.i.i, i8* %6, i8* %load_tmp.i.i.i.i
  br i1 %bool_or_tmp.i.i.i.i, label %then.i5.i.i, label %else.i6.i.i

then.i5.i.i:                                      ; preds = %endif
  %rshift_tmp.i.i.i.i = lshr i64 %3, 1
  %ptr_add_tmp.i.i.i = getelementptr i8, i8* %6, i64 %rshift_tmp.i.i.i.i
  br label %"func.std.size..1.0R.const.struct.std::string.builtin.uint64.exit"

else.i6.i.i:                                      ; preds = %endif
  %load_tmp1.i.i.i = load i8*, i8** %5, align 8, !noalias !12
  br label %"func.std.size..1.0R.const.struct.std::string.builtin.uint64.exit"

"func.std.size..1.0R.const.struct.std::string.builtin.uint64.exit": ; preds = %then.i5.i.i, %else.i6.i.i
  %8 = phi i8* [ %ptr_add_tmp.i.i.i, %then.i5.i.i ], [ %load_tmp1.i.i.i, %else.i6.i.i ]
  %9 = ptrtoint i8* %8 to i64
  %10 = ptrtoint i8* %7 to i64
  %11 = sub i64 %9, %10
  call void @"func.std.reserve..2.0R.struct.std::string.builtin.uint64.void"(%"struct.std::string.4"* %0, i64 %11)
  %12 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %0, i64 0, i32 0
  %load_tmp.i.i9 = load i8*, i8** %12, align 8
  %13 = ptrtoint i8* %load_tmp.i.i9 to i64
  %cmp_tmp.i.i10 = icmp eq i8* %load_tmp.i.i9, null
  %bit_and_tmp.i.i11 = and i64 %13, 1
  %14 = icmp ne i64 %bit_and_tmp.i.i11, 0
  %bool_or_tmp.i.i12 = or i1 %cmp_tmp.i.i10, %14
  %15 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %0, i64 0, i32 1
  %16 = bitcast i8** %15 to i8*
  %17 = select i1 %bool_or_tmp.i.i12, i8* %16, i8* %load_tmp.i.i9
  %load_tmp.i.i3 = load i8*, i8** %2, align 8
  %18 = ptrtoint i8* %load_tmp.i.i3 to i64
  %cmp_tmp.i.i4 = icmp eq i8* %load_tmp.i.i3, null
  %bit_and_tmp.i.i5 = and i64 %18, 1
  %19 = icmp ne i64 %bit_and_tmp.i.i5, 0
  %bool_or_tmp.i.i6 = or i1 %cmp_tmp.i.i4, %19
  %20 = select i1 %bool_or_tmp.i.i6, i8* %6, i8* %load_tmp.i.i3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %17, i8* align 1 %20, i64 %11, i1 false)
  %load_tmp.i.i = load i8*, i8** %12, align 8
  %21 = ptrtoint i8* %load_tmp.i.i to i64
  %cmp_tmp.i.i = icmp eq i8* %load_tmp.i.i, null
  %bit_and_tmp.i.i = and i64 %21, 1
  %22 = icmp ne i64 %bit_and_tmp.i.i, 0
  %bool_or_tmp.i.i = or i1 %cmp_tmp.i.i, %22
  br i1 %bool_or_tmp.i.i, label %then.i, label %else.i

then.i:                                           ; preds = %"func.std.size..1.0R.const.struct.std::string.builtin.uint64.exit"
  %23 = icmp eq i64 %11, 0
  br i1 %23, label %then.i.i, label %else.i.i

then.i.i:                                         ; preds = %then.i
  store i8* null, i8** %12, align 8
  br label %then

else.i.i:                                         ; preds = %then.i
  %lshift_tmp.i.i = shl i64 %11, 1
  %bit_or_tmp.i.i = or i64 %lshift_tmp.i.i, 1
  %24 = inttoptr i64 %bit_or_tmp.i.i to i8*
  store i8* %24, i8** %12, align 8
  br label %then

else.i:                                           ; preds = %"func.std.size..1.0R.const.struct.std::string.builtin.uint64.exit"
  %ptr_add_tmp.i = getelementptr i8, i8* %load_tmp.i.i, i64 %11
  store i8* %ptr_add_tmp.i, i8** %15, align 8
  br label %then
}

define i64 @"func.std.capacity..1.0R.const.struct.std::string.builtin.uint64"(%"struct.std::string.4"* %0) {
alloca:
  %1 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %0, i64 0, i32 0
  %load_tmp.i = load i8*, i8** %1, align 8
  %2 = ptrtoint i8* %load_tmp.i to i64
  %cmp_tmp.i = icmp eq i8* %load_tmp.i, null
  %bit_and_tmp.i = and i64 %2, 1
  %3 = icmp ne i64 %bit_and_tmp.i, 0
  %bool_or_tmp.i = or i1 %cmp_tmp.i, %3
  br i1 %bool_or_tmp.i, label %endif, label %else

else:                                             ; preds = %alloca
  %4 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %0, i64 0, i32 2
  %load_tmp = load i8*, i8** %4, align 8
  %5 = ptrtoint i8* %load_tmp to i64
  %6 = sub i64 %5, %2
  br label %endif

endif:                                            ; preds = %alloca, %else
  %7 = phi i64 [ %6, %else ], [ 16, %alloca ]
  ret i64 %7
}

define %"struct.std::string.4"* @"op.61..2.0R.struct.std::string.struct.std::string.0R.struct.std::string"(%"struct.std::string.4"* %0, %"struct.std::string.4"* %1) {
alloca:
  %2 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %0, i64 0, i32 0
  %3 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %1, i64 0, i32 0
  %load_tmp.i.i = load i8*, i8** %2, align 8
  %load_tmp1.i.i = load i8*, i8** %3, align 8
  store i8* %load_tmp1.i.i, i8** %2, align 8
  store i8* %load_tmp.i.i, i8** %3, align 8
  %4 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %1, i64 0, i32 1
  %load_tmp.i3.i = load i8*, i8** %4, align 8
  %load_tmp1.i4.i = load i8*, i8** %5, align 8
  store i8* %load_tmp1.i4.i, i8** %4, align 8
  store i8* %load_tmp.i3.i, i8** %5, align 8
  %6 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %0, i64 0, i32 2
  %7 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %1, i64 0, i32 2
  %load_tmp.i1.i = load i8*, i8** %6, align 8
  %load_tmp1.i2.i = load i8*, i8** %7, align 8
  store i8* %load_tmp1.i2.i, i8** %6, align 8
  store i8* %load_tmp.i1.i, i8** %7, align 8
  %load_tmp.i.i1 = load i8*, i8** %3, align 8
  %8 = ptrtoint i8* %load_tmp.i.i1 to i64
  %cmp_tmp.i.i = icmp eq i8* %load_tmp.i.i1, null
  %bit_and_tmp.i.i = and i64 %8, 1
  %9 = icmp ne i64 %bit_and_tmp.i.i, 0
  %bool_or_tmp.i.i = or i1 %cmp_tmp.i.i, %9
  br i1 %bool_or_tmp.i.i, label %"dtor.std::string.exit", label %then.i

then.i:                                           ; preds = %alloca
  call void @free(i8* %load_tmp.i.i1)
  br label %"dtor.std::string.exit"

"dtor.std::string.exit":                          ; preds = %alloca, %then.i
  ret %"struct.std::string.4"* %0
}

define %"struct.std::string.4"* @"op.61..2.0R.struct.std::string.builtin.str.0R.struct.std::string"(%"struct.std::string.4"* %0, %builtin.str* noalias nocapture nonnull byval(%builtin.str) %1) {
alloca:
  %2 = alloca [2 x i8*], align 8
  %3 = alloca %builtin.str, align 8
  %load_tmp.elt = getelementptr inbounds %builtin.str, %builtin.str* %1, i64 0, i32 0
  %load_tmp.unpack = load i8*, i8** %load_tmp.elt, align 8
  %load_tmp.elt5 = getelementptr inbounds %builtin.str, %builtin.str* %1, i64 0, i32 1
  %load_tmp.unpack6 = load i8*, i8** %load_tmp.elt5, align 8
  %4 = ptrtoint i8* %load_tmp.unpack6 to i64
  %5 = ptrtoint i8* %load_tmp.unpack to i64
  %6 = sub i64 %4, %5
  %7 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %0, i64 0, i32 0
  %load_tmp.i.i = load i8*, i8** %7, align 8
  %8 = ptrtoint i8* %load_tmp.i.i to i64
  %cmp_tmp.i.i = icmp eq i8* %load_tmp.i.i, null
  %bit_and_tmp.i.i = and i64 %8, 1
  %9 = icmp ne i64 %bit_and_tmp.i.i, 0
  %bool_or_tmp.i.i = or i1 %cmp_tmp.i.i, %9
  br i1 %bool_or_tmp.i.i, label %"func.std.capacity..1.0R.const.struct.std::string.builtin.uint64.exit", label %else.i

else.i:                                           ; preds = %alloca
  %10 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %0, i64 0, i32 2
  %load_tmp.i = load i8*, i8** %10, align 8
  %11 = ptrtoint i8* %load_tmp.i to i64
  %12 = sub i64 %11, %8
  br label %"func.std.capacity..1.0R.const.struct.std::string.builtin.uint64.exit"

"func.std.capacity..1.0R.const.struct.std::string.builtin.uint64.exit": ; preds = %alloca, %else.i
  %13 = phi i64 [ %12, %else.i ], [ 16, %alloca ]
  %.not = icmp ult i64 %13, %6
  br i1 %.not, label %else, label %then

then:                                             ; preds = %"func.std.capacity..1.0R.const.struct.std::string.builtin.uint64.exit"
  %14 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %0, i64 0, i32 1
  %15 = bitcast i8** %14 to i8*
  %16 = select i1 %bool_or_tmp.i.i, i8* %15, i8* %load_tmp.i.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %16, i8* align 1 %load_tmp.unpack, i64 %6, i1 false)
  %load_tmp.i.i20 = load i8*, i8** %7, align 8
  %17 = ptrtoint i8* %load_tmp.i.i20 to i64
  %cmp_tmp.i.i21 = icmp eq i8* %load_tmp.i.i20, null
  %bit_and_tmp.i.i22 = and i64 %17, 1
  %18 = icmp ne i64 %bit_and_tmp.i.i22, 0
  %bool_or_tmp.i.i23 = or i1 %cmp_tmp.i.i21, %18
  br i1 %bool_or_tmp.i.i23, label %then.i24, label %else.i29

then.i24:                                         ; preds = %then
  %19 = icmp eq i64 %6, 0
  br i1 %19, label %then.i.i25, label %else.i.i26

then.i.i25:                                       ; preds = %then.i24
  store i8* null, i8** %7, align 8
  br label %endif

else.i.i26:                                       ; preds = %then.i24
  %lshift_tmp.i.i = shl i64 %6, 1
  %bit_or_tmp.i.i = or i64 %lshift_tmp.i.i, 1
  %20 = inttoptr i64 %bit_or_tmp.i.i to i8*
  store i8* %20, i8** %7, align 8
  br label %endif

else.i29:                                         ; preds = %then
  %ptr_add_tmp.i28 = getelementptr i8, i8* %load_tmp.i.i20, i64 %6
  store i8* %ptr_add_tmp.i28, i8** %14, align 8
  br label %endif

else:                                             ; preds = %"func.std.capacity..1.0R.const.struct.std::string.builtin.uint64.exit"
  call void @llvm.experimental.noalias.scope.decl(metadata !15)
  %21 = bitcast %builtin.str* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %21)
  %22 = bitcast [2 x i8*]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %22)
  %23 = bitcast %builtin.str* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %21, i8* nonnull align 1 dereferenceable(16) %23, i64 16, i1 false)
  %load_tmp.elt.i = getelementptr inbounds %builtin.str, %builtin.str* %3, i64 0, i32 0
  %load_tmp.unpack.i = load i8*, i8** %load_tmp.elt.i, align 8, !alias.scope !15, !noalias !18
  %load_tmp.elt21.i = getelementptr inbounds %builtin.str, %builtin.str* %3, i64 0, i32 1
  %load_tmp.unpack22.i = load i8*, i8** %load_tmp.elt21.i, align 8, !alias.scope !15, !noalias !18
  %24 = ptrtoint i8* %load_tmp.unpack22.i to i64
  %25 = ptrtoint i8* %load_tmp.unpack.i to i64
  %26 = sub i64 %24, %25
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %then.i18, label %bool_and_rhs.i

then.i18:                                         ; preds = %else
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %21)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %22)
  br label %"ctor.std::string..1.builtin.str.exit"

bool_and_rhs.i:                                   ; preds = %else
  %28 = icmp ult i64 %26, 17
  br i1 %28, label %then3.i, label %else10.i

then3.i:                                          ; preds = %bool_and_rhs.i
  %lshift_tmp.i = shl i64 %26, 1
  %bit_or_tmp.i = or i64 %lshift_tmp.i, 1
  %29 = inttoptr i64 %bit_or_tmp.i to i8*
  %.repack.i = getelementptr inbounds [2 x i8*], [2 x i8*]* %2, i64 0, i64 0
  store i8* null, i8** %.repack.i, align 8, !noalias !20
  %.repack27.i = getelementptr inbounds [2 x i8*], [2 x i8*]* %2, i64 0, i64 1
  store i8* null, i8** %.repack27.i, align 8, !noalias !20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %22, i8* align 1 %load_tmp.unpack.i, i64 %26, i1 false), !noalias !20
  %load_tmp8.i = load i8*, i8** %.repack.i, align 8, !noalias !20
  %load_tmp9.i = load i8*, i8** %.repack27.i, align 8, !noalias !20
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %21)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %22)
  br label %"ctor.std::string..1.builtin.str.exit"

else10.i:                                         ; preds = %bool_and_rhs.i
  %sub_tmp.i.i.i = add i64 %26, -1
  %rshift_tmp.i.i.i = lshr i64 %sub_tmp.i.i.i, 1
  %bit_or_tmp.i.i.i = or i64 %rshift_tmp.i.i.i, %sub_tmp.i.i.i
  %rshift_tmp4.i.i.i = lshr i64 %bit_or_tmp.i.i.i, 2
  %bit_or_tmp6.i.i.i = or i64 %rshift_tmp4.i.i.i, %bit_or_tmp.i.i.i
  %rshift_tmp8.i.i.i = lshr i64 %bit_or_tmp6.i.i.i, 4
  %bit_or_tmp10.i.i.i = or i64 %rshift_tmp8.i.i.i, %bit_or_tmp6.i.i.i
  %rshift_tmp12.i.i.i = lshr i64 %bit_or_tmp10.i.i.i, 8
  %bit_or_tmp14.i.i.i = or i64 %rshift_tmp12.i.i.i, %bit_or_tmp10.i.i.i
  %rshift_tmp16.i.i.i = lshr i64 %bit_or_tmp14.i.i.i, 16
  %bit_or_tmp18.i.i.i = or i64 %rshift_tmp16.i.i.i, %bit_or_tmp14.i.i.i
  %rshift_tmp20.i.i.i = lshr i64 %bit_or_tmp18.i.i.i, 32
  %bit_or_tmp22.i.i.i = or i64 %rshift_tmp20.i.i.i, %bit_or_tmp18.i.i.i
  %add_tmp.i.i.i = add i64 %bit_or_tmp22.i.i.i, 1
  %30 = call i8* @malloc(i64 %add_tmp.i.i.i), !noalias !20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %30, i8* align 1 %load_tmp.unpack.i, i64 %26, i1 false), !noalias !20
  %ptr_add_tmp.i = getelementptr i8, i8* %30, i64 %26
  %ptr_add_tmp20.i = getelementptr i8, i8* %30, i64 %add_tmp.i.i.i
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %21)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %22)
  %load_tmp.i.i.i.pre = load i8*, i8** %7, align 8
  %.pre = ptrtoint i8* %load_tmp.i.i.i.pre to i64
  br label %"ctor.std::string..1.builtin.str.exit"

"ctor.std::string..1.builtin.str.exit":           ; preds = %else10.i, %then3.i, %then.i18
  %.pre-phi = phi i64 [ %.pre, %else10.i ], [ %8, %then3.i ], [ %8, %then.i18 ]
  %load_tmp1.i2.i.i = phi i8* [ %ptr_add_tmp20.i, %else10.i ], [ %load_tmp9.i, %then3.i ], [ null, %then.i18 ]
  %load_tmp1.i4.i.i = phi i8* [ %ptr_add_tmp.i, %else10.i ], [ %load_tmp8.i, %then3.i ], [ null, %then.i18 ]
  %load_tmp1.i.i.i = phi i8* [ %30, %else10.i ], [ %29, %then3.i ], [ null, %then.i18 ]
  %load_tmp.i.i11 = phi i8* [ %load_tmp.i.i.i.pre, %else10.i ], [ %load_tmp.i.i, %then3.i ], [ %load_tmp.i.i, %then.i18 ]
  store i8* %load_tmp1.i.i.i, i8** %7, align 8
  %31 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %0, i64 0, i32 1
  store i8* %load_tmp1.i4.i.i, i8** %31, align 8
  %32 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %0, i64 0, i32 2
  store i8* %load_tmp1.i2.i.i, i8** %32, align 8
  %cmp_tmp.i.i.i = icmp eq i8* %load_tmp.i.i11, null
  %bit_and_tmp.i.i.i = and i64 %.pre-phi, 1
  %33 = icmp ne i64 %bit_and_tmp.i.i.i, 0
  %bool_or_tmp.i.i.i = or i1 %33, %cmp_tmp.i.i.i
  br i1 %bool_or_tmp.i.i.i, label %endif, label %then.i.i

then.i.i:                                         ; preds = %"ctor.std::string..1.builtin.str.exit"
  call void @free(i8* %load_tmp.i.i11)
  br label %endif

endif:                                            ; preds = %then.i.i, %"ctor.std::string..1.builtin.str.exit", %else.i29, %else.i.i26, %then.i.i25
  ret %"struct.std::string.4"* %0
}

define i8* @"func.std.data..1.0R.const.struct.std::string.0P.const.builtin.uint8"(%"struct.std::string.4"* %0) {
alloca:
  %1 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %0, i64 0, i32 0
  %load_tmp.i.i = load i8*, i8** %1, align 8
  %2 = ptrtoint i8* %load_tmp.i.i to i64
  %cmp_tmp.i.i = icmp eq i8* %load_tmp.i.i, null
  %bit_and_tmp.i.i = and i64 %2, 1
  %3 = icmp ne i64 %bit_and_tmp.i.i, 0
  %bool_or_tmp.i.i = or i1 %cmp_tmp.i.i, %3
  %4 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %0, i64 0, i32 1
  %5 = bitcast i8** %4 to i8*
  %6 = select i1 %bool_or_tmp.i.i, i8* %5, i8* %load_tmp.i.i
  ret i8* %6
}

define i8* @"func.std.data_end..1.0R.struct.std::string.0P.builtin.uint8"(%"struct.std::string.4"* %0) {
alloca:
  %1 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %0, i64 0, i32 0
  %load_tmp.i.i = load i8*, i8** %1, align 8
  %2 = ptrtoint i8* %load_tmp.i.i to i64
  %cmp_tmp.i.i = icmp eq i8* %load_tmp.i.i, null
  %bit_and_tmp.i.i = and i64 %2, 1
  %3 = icmp ne i64 %bit_and_tmp.i.i, 0
  %bool_or_tmp.i.i = or i1 %cmp_tmp.i.i, %3
  br i1 %bool_or_tmp.i.i, label %then.i, label %else.i

then.i:                                           ; preds = %alloca
  %rshift_tmp.i.i = lshr i64 %2, 1
  %4 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %0, i64 0, i32 1
  %5 = bitcast i8** %4 to i8*
  %ptr_add_tmp.i = getelementptr i8, i8* %5, i64 %rshift_tmp.i.i
  br label %"func.std.end_ptr..1.0R.const.struct.std::string.0P.builtin.uint8.exit"

else.i:                                           ; preds = %alloca
  %6 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %0, i64 0, i32 1
  %load_tmp1.i = load i8*, i8** %6, align 8
  br label %"func.std.end_ptr..1.0R.const.struct.std::string.0P.builtin.uint8.exit"

"func.std.end_ptr..1.0R.const.struct.std::string.0P.builtin.uint8.exit": ; preds = %else.i, %then.i
  %7 = phi i8* [ %ptr_add_tmp.i, %then.i ], [ %load_tmp1.i, %else.i ]
  ret i8* %7
}

define i8* @"func.std.data_end..1.0R.const.struct.std::string.0P.const.builtin.uint8"(%"struct.std::string.4"* %0) {
alloca:
  %1 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %0, i64 0, i32 0
  %load_tmp.i.i = load i8*, i8** %1, align 8
  %2 = ptrtoint i8* %load_tmp.i.i to i64
  %cmp_tmp.i.i = icmp eq i8* %load_tmp.i.i, null
  %bit_and_tmp.i.i = and i64 %2, 1
  %3 = icmp ne i64 %bit_and_tmp.i.i, 0
  %bool_or_tmp.i.i = or i1 %cmp_tmp.i.i, %3
  br i1 %bool_or_tmp.i.i, label %then.i, label %else.i

then.i:                                           ; preds = %alloca
  %rshift_tmp.i.i = lshr i64 %2, 1
  %4 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %0, i64 0, i32 1
  %5 = bitcast i8** %4 to i8*
  %ptr_add_tmp.i = getelementptr i8, i8* %5, i64 %rshift_tmp.i.i
  br label %"func.std.end_ptr..1.0R.const.struct.std::string.0P.builtin.uint8.exit"

else.i:                                           ; preds = %alloca
  %6 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %0, i64 0, i32 1
  %load_tmp1.i = load i8*, i8** %6, align 8
  br label %"func.std.end_ptr..1.0R.const.struct.std::string.0P.builtin.uint8.exit"

"func.std.end_ptr..1.0R.const.struct.std::string.0P.builtin.uint8.exit": ; preds = %else.i, %then.i
  %7 = phi i8* [ %ptr_add_tmp.i, %then.i ], [ %load_tmp1.i, %else.i ]
  ret i8* %7
}

define void @"func.std.clear..1.0R.struct.std::string.void"(%"struct.std::string.4"* %0) {
alloca:
  %1 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %0, i64 0, i32 0
  %load_tmp.i.i = load i8*, i8** %1, align 8
  %2 = ptrtoint i8* %load_tmp.i.i to i64
  %cmp_tmp.i.i = icmp eq i8* %load_tmp.i.i, null
  %bit_and_tmp.i.i = and i64 %2, 1
  %3 = icmp ne i64 %bit_and_tmp.i.i, 0
  %bool_or_tmp.i.i = or i1 %cmp_tmp.i.i, %3
  br i1 %bool_or_tmp.i.i, label %then.i, label %else.i

then.i:                                           ; preds = %alloca
  store i8* null, i8** %1, align 8
  br label %"func.std.set_size_unsafe..2.0R.struct.std::string.builtin.uint64.void.exit"

else.i:                                           ; preds = %alloca
  %4 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %0, i64 0, i32 1
  store i8* %load_tmp.i.i, i8** %4, align 8
  br label %"func.std.set_size_unsafe..2.0R.struct.std::string.builtin.uint64.void.exit"

"func.std.set_size_unsafe..2.0R.struct.std::string.builtin.uint64.void.exit": ; preds = %then.i, %else.i
  ret void
}

define void @"func.std.push_back..2.0R.struct.std::string.builtin.char.void"(%"struct.std::string.4"* %0, i32 %1) {
alloca:
  %2 = alloca i64, align 8
  %3 = call i64 @func.std.encode_char_utf8..1.builtin.char.0T.2.0A.4.builtin.uint8.builtin.uint32(i32 %1)
  store i64 %3, i64* %2, align 8
  %4 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %0, i64 0, i32 0
  %load_tmp.i.i.i.i = load i8*, i8** %4, align 8, !noalias !21
  %5 = ptrtoint i8* %load_tmp.i.i.i.i to i64
  %cmp_tmp.i.i.i.i = icmp eq i8* %load_tmp.i.i.i.i, null
  %bit_and_tmp.i.i.i.i = and i64 %5, 1
  %6 = icmp ne i64 %bit_and_tmp.i.i.i.i, 0
  %bool_or_tmp.i.i.i.i = or i1 %cmp_tmp.i.i.i.i, %6
  %7 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %0, i64 0, i32 1
  %8 = bitcast i8** %7 to i8*
  %9 = select i1 %bool_or_tmp.i.i.i.i, i8* %8, i8* %load_tmp.i.i.i.i
  br i1 %bool_or_tmp.i.i.i.i, label %then.i5.i.i, label %else.i6.i.i

then.i5.i.i:                                      ; preds = %alloca
  %rshift_tmp.i.i.i.i = lshr i64 %5, 1
  %ptr_add_tmp.i.i.i = getelementptr i8, i8* %8, i64 %rshift_tmp.i.i.i.i
  br label %"func.std.size..1.0R.const.struct.std::string.builtin.uint64.exit"

else.i6.i.i:                                      ; preds = %alloca
  %load_tmp1.i.i.i = load i8*, i8** %7, align 8, !noalias !21
  br label %"func.std.size..1.0R.const.struct.std::string.builtin.uint64.exit"

"func.std.size..1.0R.const.struct.std::string.builtin.uint64.exit": ; preds = %then.i5.i.i, %else.i6.i.i
  %10 = phi i8* [ %ptr_add_tmp.i.i.i, %then.i5.i.i ], [ %load_tmp1.i.i.i, %else.i6.i.i ]
  %11 = ptrtoint i8* %10 to i64
  %12 = ptrtoint i8* %9 to i64
  %13 = lshr i64 %3, 32
  %14 = sub i64 %13, %12
  %add_tmp = add i64 %14, %11
  call void @"func.std.reserve..2.0R.struct.std::string.builtin.uint64.void"(%"struct.std::string.4"* %0, i64 %add_tmp)
  %load_tmp.i.i30 = load i8*, i8** %4, align 8
  %15 = ptrtoint i8* %load_tmp.i.i30 to i64
  %cmp_tmp.i.i31 = icmp eq i8* %load_tmp.i.i30, null
  %bit_and_tmp.i.i32 = and i64 %15, 1
  %16 = icmp ne i64 %bit_and_tmp.i.i32, 0
  %bool_or_tmp.i.i33 = or i1 %cmp_tmp.i.i31, %16
  br i1 %bool_or_tmp.i.i33, label %then.i35, label %else.i37

then.i35:                                         ; preds = %"func.std.size..1.0R.const.struct.std::string.builtin.uint64.exit"
  %rshift_tmp.i.i = lshr i64 %15, 1
  %ptr_add_tmp.i34 = getelementptr i8, i8* %8, i64 %rshift_tmp.i.i
  br label %"func.std.end_ptr..1.0R.const.struct.std::string.0P.builtin.uint8.exit"

else.i37:                                         ; preds = %"func.std.size..1.0R.const.struct.std::string.builtin.uint64.exit"
  %load_tmp1.i36 = load i8*, i8** %7, align 8
  br label %"func.std.end_ptr..1.0R.const.struct.std::string.0P.builtin.uint8.exit"

"func.std.end_ptr..1.0R.const.struct.std::string.0P.builtin.uint8.exit": ; preds = %else.i37, %then.i35
  %17 = phi i8* [ %ptr_add_tmp.i34, %then.i35 ], [ %load_tmp1.i36, %else.i37 ]
  %18 = bitcast i64* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %17, i8* nonnull align 8 %18, i64 %13, i1 false)
  %load_tmp.i.i.i.i7 = load i8*, i8** %4, align 8, !noalias !24
  %19 = ptrtoint i8* %load_tmp.i.i.i.i7 to i64
  %cmp_tmp.i.i.i.i8 = icmp eq i8* %load_tmp.i.i.i.i7, null
  %bit_and_tmp.i.i.i.i9 = and i64 %19, 1
  %20 = icmp ne i64 %bit_and_tmp.i.i.i.i9, 0
  %bool_or_tmp.i.i.i.i10 = or i1 %cmp_tmp.i.i.i.i8, %20
  %21 = select i1 %bool_or_tmp.i.i.i.i10, i8* %8, i8* %load_tmp.i.i.i.i7
  br i1 %bool_or_tmp.i.i.i.i10, label %then.i5.i.i22, label %else.i6.i.i24

then.i5.i.i22:                                    ; preds = %"func.std.end_ptr..1.0R.const.struct.std::string.0P.builtin.uint8.exit"
  %rshift_tmp.i.i.i.i20 = lshr i64 %19, 1
  %ptr_add_tmp.i.i.i21 = getelementptr i8, i8* %8, i64 %rshift_tmp.i.i.i.i20
  br label %"func.std.size..1.0R.const.struct.std::string.builtin.uint64.exit29"

else.i6.i.i24:                                    ; preds = %"func.std.end_ptr..1.0R.const.struct.std::string.0P.builtin.uint8.exit"
  %load_tmp1.i.i.i23 = load i8*, i8** %7, align 8, !noalias !24
  br label %"func.std.size..1.0R.const.struct.std::string.builtin.uint64.exit29"

"func.std.size..1.0R.const.struct.std::string.builtin.uint64.exit29": ; preds = %then.i5.i.i22, %else.i6.i.i24
  %22 = phi i8* [ %ptr_add_tmp.i.i.i21, %then.i5.i.i22 ], [ %load_tmp1.i.i.i23, %else.i6.i.i24 ]
  %23 = ptrtoint i8* %22 to i64
  %24 = ptrtoint i8* %21 to i64
  %25 = sub i64 %23, %24
  %add_tmp6 = add i64 %25, %13
  br i1 %bool_or_tmp.i.i.i.i10, label %then.i, label %else.i

then.i:                                           ; preds = %"func.std.size..1.0R.const.struct.std::string.builtin.uint64.exit29"
  %26 = icmp eq i64 %add_tmp6, 0
  br i1 %26, label %then.i.i, label %else.i.i

then.i.i:                                         ; preds = %then.i
  store i8* null, i8** %4, align 8
  br label %"func.std.set_size_unsafe..2.0R.struct.std::string.builtin.uint64.void.exit"

else.i.i:                                         ; preds = %then.i
  %lshift_tmp.i.i = shl i64 %add_tmp6, 1
  %bit_or_tmp.i.i = or i64 %lshift_tmp.i.i, 1
  %27 = inttoptr i64 %bit_or_tmp.i.i to i8*
  store i8* %27, i8** %4, align 8
  br label %"func.std.set_size_unsafe..2.0R.struct.std::string.builtin.uint64.void.exit"

else.i:                                           ; preds = %"func.std.size..1.0R.const.struct.std::string.builtin.uint64.exit29"
  %ptr_add_tmp.i = getelementptr i8, i8* %load_tmp.i.i.i.i7, i64 %add_tmp6
  store i8* %ptr_add_tmp.i, i8** %7, align 8
  br label %"func.std.set_size_unsafe..2.0R.struct.std::string.builtin.uint64.void.exit"

"func.std.set_size_unsafe..2.0R.struct.std::string.builtin.uint64.void.exit": ; preds = %then.i.i, %else.i.i, %else.i
  ret void
}

define i64 @func.std.encode_char_utf8..1.builtin.char.0T.2.0A.4.builtin.uint8.builtin.uint32(i32 %0) {
alloca:
  %1 = alloca i64, align 8
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = icmp ult i32 %0, 127
  br i1 %5, label %then, label %else

then:                                             ; preds = %alloca
  %tmpcast101 = bitcast i64* %1 to { [4 x i8], i32 }*
  %cast_tmp = trunc i32 %0 to i8
  %6 = bitcast i64* %1 to [4 x i8]*
  %.repack109 = bitcast i64* %1 to i8*
  store i8 %cast_tmp, i8* %.repack109, align 8
  %.repack110 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 1
  store i8 0, i8* %.repack110, align 1
  %.repack112 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 2
  store i8 0, i8* %.repack112, align 2
  %.repack114 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 3
  store i8 0, i8* %.repack114, align 1
  %7 = getelementptr inbounds { [4 x i8], i32 }, { [4 x i8], i32 }* %tmpcast101, i64 0, i32 1
  store i32 1, i32* %7, align 4
  %8 = load i64, i64* %1, align 8
  ret i64 %8

else:                                             ; preds = %alloca
  %9 = icmp ult i32 %0, 2047
  br i1 %9, label %then4, label %else13

then4:                                            ; preds = %else
  %tmpcast86 = bitcast i64* %2 to { [4 x i8], i32 }*
  %rshift_tmp = lshr i32 %0, 6
  %10 = trunc i32 %rshift_tmp to i8
  %11 = and i8 %10, 31
  %cast_tmp6 = or i8 %11, -64
  %12 = trunc i32 %0 to i8
  %13 = and i8 %12, 63
  %cast_tmp11 = or i8 %13, -128
  %14 = bitcast i64* %2 to [4 x i8]*
  %.repack94 = bitcast i64* %2 to i8*
  store i8 %cast_tmp6, i8* %.repack94, align 8
  %.repack95 = getelementptr inbounds [4 x i8], [4 x i8]* %14, i64 0, i64 1
  store i8 %cast_tmp11, i8* %.repack95, align 1
  %.repack97 = getelementptr inbounds [4 x i8], [4 x i8]* %14, i64 0, i64 2
  store i8 0, i8* %.repack97, align 2
  %.repack99 = getelementptr inbounds [4 x i8], [4 x i8]* %14, i64 0, i64 3
  store i8 0, i8* %.repack99, align 1
  %15 = getelementptr inbounds { [4 x i8], i32 }, { [4 x i8], i32 }* %tmpcast86, i64 0, i32 1
  store i32 2, i32* %15, align 4
  %16 = load i64, i64* %2, align 8
  ret i64 %16

else13:                                           ; preds = %else
  %17 = icmp ult i32 %0, 65535
  br i1 %17, label %then15, label %else32

then15:                                           ; preds = %else13
  %tmpcast71 = bitcast i64* %3 to { [4 x i8], i32 }*
  %rshift_tmp17 = lshr i32 %0, 12
  %18 = trunc i32 %rshift_tmp17 to i8
  %19 = and i8 %18, 15
  %cast_tmp20 = or i8 %19, -32
  %rshift_tmp22 = lshr i32 %0, 6
  %20 = trunc i32 %rshift_tmp22 to i8
  %21 = and i8 %20, 63
  %cast_tmp25 = or i8 %21, -128
  %22 = trunc i32 %0 to i8
  %23 = and i8 %22, 63
  %cast_tmp30 = or i8 %23, -128
  %24 = bitcast i64* %3 to [4 x i8]*
  %.repack79 = bitcast i64* %3 to i8*
  store i8 %cast_tmp20, i8* %.repack79, align 8
  %.repack80 = getelementptr inbounds [4 x i8], [4 x i8]* %24, i64 0, i64 1
  store i8 %cast_tmp25, i8* %.repack80, align 1
  %.repack82 = getelementptr inbounds [4 x i8], [4 x i8]* %24, i64 0, i64 2
  store i8 %cast_tmp30, i8* %.repack82, align 2
  %.repack84 = getelementptr inbounds [4 x i8], [4 x i8]* %24, i64 0, i64 3
  store i8 0, i8* %.repack84, align 1
  %25 = getelementptr inbounds { [4 x i8], i32 }, { [4 x i8], i32 }* %tmpcast71, i64 0, i32 1
  store i32 3, i32* %25, align 4
  %26 = load i64, i64* %3, align 8
  ret i64 %26

else32:                                           ; preds = %else13
  %tmpcast = bitcast i64* %4 to { [4 x i8], i32 }*
  %rshift_tmp34 = lshr i32 %0, 18
  %27 = trunc i32 %rshift_tmp34 to i8
  %28 = and i8 %27, 7
  %cast_tmp37 = or i8 %28, -16
  %rshift_tmp39 = lshr i32 %0, 12
  %29 = trunc i32 %rshift_tmp39 to i8
  %30 = and i8 %29, 63
  %cast_tmp42 = or i8 %30, -128
  %rshift_tmp44 = lshr i32 %0, 6
  %31 = trunc i32 %rshift_tmp44 to i8
  %32 = and i8 %31, 63
  %cast_tmp47 = or i8 %32, -128
  %33 = trunc i32 %0 to i8
  %34 = and i8 %33, 63
  %cast_tmp52 = or i8 %34, -128
  %35 = bitcast i64* %4 to [4 x i8]*
  %.repack64 = bitcast i64* %4 to i8*
  store i8 %cast_tmp37, i8* %.repack64, align 8
  %.repack65 = getelementptr inbounds [4 x i8], [4 x i8]* %35, i64 0, i64 1
  store i8 %cast_tmp42, i8* %.repack65, align 1
  %.repack67 = getelementptr inbounds [4 x i8], [4 x i8]* %35, i64 0, i64 2
  store i8 %cast_tmp47, i8* %.repack67, align 2
  %.repack69 = getelementptr inbounds [4 x i8], [4 x i8]* %35, i64 0, i64 3
  store i8 %cast_tmp52, i8* %.repack69, align 1
  %36 = getelementptr inbounds { [4 x i8], i32 }, { [4 x i8], i32 }* %tmpcast, i64 0, i32 1
  store i32 4, i32* %36, align 4
  %37 = load i64, i64* %4, align 8
  ret i64 %37
}

define %"struct.std::string.4"* @"op.290..2.0R.struct.std::string.builtin.char.0R.struct.std::string"(%"struct.std::string.4"* %0, i32 %1) {
alloca:
  %2 = alloca i64, align 8
  %3 = call i64 @func.std.encode_char_utf8..1.builtin.char.0T.2.0A.4.builtin.uint8.builtin.uint32(i32 %1)
  store i64 %3, i64* %2, align 8
  %4 = lshr i64 %3, 32
  %5 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %0, i64 0, i32 0
  %load_tmp.i.i.i.i = load i8*, i8** %5, align 8, !noalias !27
  %6 = ptrtoint i8* %load_tmp.i.i.i.i to i64
  %cmp_tmp.i.i.i.i = icmp eq i8* %load_tmp.i.i.i.i, null
  %bit_and_tmp.i.i.i.i = and i64 %6, 1
  %7 = icmp ne i64 %bit_and_tmp.i.i.i.i, 0
  %bool_or_tmp.i.i.i.i = or i1 %cmp_tmp.i.i.i.i, %7
  %8 = getelementptr inbounds %"struct.std::string.4", %"struct.std::string.4"* %0, i64 0, i32 1
  %9 = bitcast i8** %8 to i8*
  %10 = select i1 %bool_or_tmp.i.i.i.i, i8* %9, i8* %load_tmp.i.i.i.i
  br i1 %bool_or_tmp.i.i.i.i, label %then.i5.i.i, label %else.i6.i.i

then.i5.i.i:                                      ; preds = %alloca
  %rshift_tmp.i.i.i.i = lshr i64 %6, 1
  %ptr_add_tmp.i.i.i = getelementptr i8, i8* %9, i64 %rshift_tmp.i.i.i.i
  br label %"func.std.size..1.0R.const.struct.std::string.builtin.uint64.exit"

else.i6.i.i:                                      ; preds = %alloca
  %load_tmp1.i.i.i = load i8*, i8** %8, align 8, !noalias !27
  br label %"func.std.size..1.0R.const.struct.std::string.builtin.uint64.exit"

"func.std.size..1.0R.const.struct.std::string.builtin.uint64.exit": ; preds = %then.i5.i.i, %else.i6.i.i
  %11 = phi i8* [ %ptr_add_tmp.i.i.i, %then.i5.i.i ], [ %load_tmp1.i.i.i, %else.i6.i.i ]
  %12 = ptrtoint i8* %11 to i64
  %13 = ptrtoint i8* %10 to i64
  %14 = sub i64 %12, %13
  %add_tmp = add i64 %14, %4
  call void @"func.std.reserve..2.0R.struct.std::string.builtin.uint64.void"(%"struct.std::string.4"* %0, i64 %add_tmp)
  %load_tmp.i.i7 = load i8*, i8** %5, align 8
  %15 = ptrtoint i8* %load_tmp.i.i7 to i64
  %cmp_tmp.i.i8 = icmp eq i8* %load_tmp.i.i7, null
  %bit_and_tmp.i.i9 = and i64 %15, 1
  %16 = icmp ne i64 %bit_and_tmp.i.i9, 0
  %bool_or_tmp.i.i10 = or i1 %cmp_tmp.i.i8, %16
  br i1 %bool_or_tmp.i.i10, label %then.i12, label %else.i14

then.i12:                                         ; preds = %"func.std.size..1.0R.const.struct.std::string.builtin.uint64.exit"
  %rshift_tmp.i.i = lshr i64 %15, 1
  %ptr_add_tmp.i11 = getelementptr i8, i8* %9, i64 %rshift_tmp.i.i
  br label %"func.std.end_ptr..1.0R.const.struct.std::string.0P.builtin.uint8.exit"

else.i14:                                         ; preds = %"func.std.size..1.0R.const.struct.std::string.builtin.uint64.exit"
  %load_tmp1.i13 = load i8*, i8** %8, align 8
  br label %"func.std.end_ptr..1.0R.const.struct.std::string.0P.builtin.uint8.exit"

"func.std.end_ptr..1.0R.const.struct.std::string.0P.builtin.uint8.exit": ; preds = %else.i14, %then.i12
  %17 = phi i8* [ %ptr_add_tmp.i11, %then.i12 ], [ %load_tmp1.i13, %else.i14 ]
  %18 = bitcast i64* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %17, i8* nonnull align 8 %18, i64 %4, i1 false)
  %load_tmp.i.i = load i8*, i8** %5, align 8
  %19 = ptrtoint i8* %load_tmp.i.i to i64
  %cmp_tmp.i.i = icmp eq i8* %load_tmp.i.i, null
  %bit_and_tmp.i.i = and i64 %19, 1
  %20 = icmp ne i64 %bit_and_tmp.i.i, 0
  %bool_or_tmp.i.i = or i1 %cmp_tmp.i.i, %20
  br i1 %bool_or_tmp.i.i, label %then.i, label %else.i

then.i:                                           ; preds = %"func.std.end_ptr..1.0R.const.struct.std::string.0P.builtin.uint8.exit"
  %21 = icmp eq i64 %add_tmp, 0
  br i1 %21, label %then.i.i, label %else.i.i

then.i.i:                                         ; preds = %then.i
  store i8* null, i8** %5, align 8
  br label %"func.std.set_size_unsafe..2.0R.struct.std::string.builtin.uint64.void.exit"

else.i.i:                                         ; preds = %then.i
  %lshift_tmp.i.i = shl i64 %add_tmp, 1
  %bit_or_tmp.i.i = or i64 %lshift_tmp.i.i, 1
  %22 = inttoptr i64 %bit_or_tmp.i.i to i8*
  store i8* %22, i8** %5, align 8
  br label %"func.std.set_size_unsafe..2.0R.struct.std::string.builtin.uint64.void.exit"

else.i:                                           ; preds = %"func.std.end_ptr..1.0R.const.struct.std::string.0P.builtin.uint8.exit"
  %ptr_add_tmp.i = getelementptr i8, i8* %load_tmp.i.i, i64 %add_tmp
  store i8* %ptr_add_tmp.i, i8** %8, align 8
  br label %"func.std.set_size_unsafe..2.0R.struct.std::string.builtin.uint64.void.exit"

"func.std.set_size_unsafe..2.0R.struct.std::string.builtin.uint64.void.exit": ; preds = %then.i.i, %else.i.i, %else.i
  ret %"struct.std::string.4"* %0
}

define void @func.std.decode_char_utf8..2.0P.builtin.uint8.0P.builtin.uint8.0T.2.builtin.char.0P.builtin.uint8({ i32, i8* }* noalias nocapture nonnull sret({ i32, i8* }) %0, i8* %1, i8* %2) {
alloca:
  %3 = ptrtoint i8* %2 to i64
  %4 = ptrtoint i8* %1 to i64
  %5 = sub i64 %3, %4
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %then, label %endif

then:                                             ; preds = %alloca
  %7 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %0, i64 0, i32 0
  store i32 0, i32* %7, align 8
  %8 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %0, i64 0, i32 1
  store i8* %1, i8** %8, align 8
  ret void

endif:                                            ; preds = %alloca
  %load_tmp5 = load i8, i8* %1, align 1
  %9 = icmp ult i8 %load_tmp5, 127
  br i1 %9, label %then7, label %else

then7:                                            ; preds = %endif
  %10 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %0, i64 0, i32 0
  %cast_tmp = zext i8 %load_tmp5 to i32
  store i32 %cast_tmp, i32* %10, align 8
  %11 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %0, i64 0, i32 1
  %ptr_add_tmp = getelementptr i8, i8* %1, i64 1
  store i8* %ptr_add_tmp, i8** %11, align 8
  ret void

else:                                             ; preds = %endif
  %12 = icmp sgt i64 %5, 1
  %bit_and_tmp = and i8 %load_tmp5, -32
  %13 = icmp eq i8 %bit_and_tmp, -64
  %bool_and_tmp = and i1 %12, %13
  br i1 %bool_and_tmp, label %then12, label %else32

then12:                                           ; preds = %else
  %ptr_add_tmp15 = getelementptr i8, i8* %1, i64 1
  %load_tmp16 = load i8, i8* %ptr_add_tmp15, align 1
  %bit_and_tmp18 = and i8 %load_tmp16, -64
  %.not129 = icmp eq i8 %bit_and_tmp18, -128
  br i1 %.not129, label %endif21, label %then19

then19:                                           ; preds = %then12
  %14 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %0, i64 0, i32 0
  store i32 0, i32* %14, align 8
  %15 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %0, i64 0, i32 1
  store i8* %1, i8** %15, align 8
  ret void

endif21:                                          ; preds = %then12
  %bit_and_tmp23 = and i8 %load_tmp5, 31
  %cast_tmp24 = zext i8 %bit_and_tmp23 to i32
  %lshift_tmp = shl nuw nsw i32 %cast_tmp24, 6
  %bit_and_tmp26 = and i8 %load_tmp16, 63
  %cast_tmp27 = zext i8 %bit_and_tmp26 to i32
  %bit_or_tmp = or i32 %lshift_tmp, %cast_tmp27
  %16 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %0, i64 0, i32 0
  store i32 %bit_or_tmp, i32* %16, align 8
  %17 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %0, i64 0, i32 1
  %ptr_add_tmp31 = getelementptr i8, i8* %1, i64 2
  store i8* %ptr_add_tmp31, i8** %17, align 8
  ret void

else32:                                           ; preds = %else
  %18 = icmp sgt i64 %5, 2
  %bit_and_tmp36 = and i8 %load_tmp5, -16
  %19 = icmp eq i8 %bit_and_tmp36, -32
  %bool_and_tmp38 = and i1 %18, %19
  br i1 %bool_and_tmp38, label %then39, label %else71

then39:                                           ; preds = %else32
  %ptr_add_tmp42 = getelementptr i8, i8* %1, i64 1
  %load_tmp43 = load i8, i8* %ptr_add_tmp42, align 1
  %ptr_add_tmp45 = getelementptr i8, i8* %1, i64 2
  %load_tmp46 = load i8, i8* %ptr_add_tmp45, align 1
  %bit_and_tmp48 = and i8 %load_tmp43, -64
  %.not128 = icmp ne i8 %bit_and_tmp48, -128
  %bit_and_tmp50 = and i8 %load_tmp46, -64
  %20 = icmp ne i8 %bit_and_tmp50, -128
  %bool_or_tmp = or i1 %.not128, %20
  br i1 %bool_or_tmp, label %then51, label %endif53

then51:                                           ; preds = %then39
  %21 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %0, i64 0, i32 0
  store i32 0, i32* %21, align 8
  %22 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %0, i64 0, i32 1
  store i8* %1, i8** %22, align 8
  ret void

endif53:                                          ; preds = %then39
  %bit_and_tmp55 = and i8 %load_tmp5, 15
  %cast_tmp56 = zext i8 %bit_and_tmp55 to i32
  %lshift_tmp57 = shl nuw nsw i32 %cast_tmp56, 12
  %bit_and_tmp59 = and i8 %load_tmp43, 63
  %cast_tmp60 = zext i8 %bit_and_tmp59 to i32
  %lshift_tmp61 = shl nuw nsw i32 %cast_tmp60, 6
  %bit_or_tmp62 = or i32 %lshift_tmp61, %lshift_tmp57
  %bit_and_tmp64 = and i8 %load_tmp46, 63
  %cast_tmp65 = zext i8 %bit_and_tmp64 to i32
  %bit_or_tmp67 = or i32 %bit_or_tmp62, %cast_tmp65
  %23 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %0, i64 0, i32 0
  store i32 %bit_or_tmp67, i32* %23, align 8
  %24 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %0, i64 0, i32 1
  %ptr_add_tmp70 = getelementptr i8, i8* %1, i64 3
  store i8* %ptr_add_tmp70, i8** %24, align 8
  ret void

else71:                                           ; preds = %else32
  %25 = icmp sgt i64 %5, 3
  %bit_and_tmp75 = and i8 %load_tmp5, -8
  %26 = icmp eq i8 %bit_and_tmp75, -16
  %bool_and_tmp77 = and i1 %25, %26
  br i1 %bool_and_tmp77, label %then78, label %else126

then78:                                           ; preds = %else71
  %ptr_add_tmp81 = getelementptr i8, i8* %1, i64 1
  %load_tmp82 = load i8, i8* %ptr_add_tmp81, align 1
  %ptr_add_tmp84 = getelementptr i8, i8* %1, i64 2
  %load_tmp85 = load i8, i8* %ptr_add_tmp84, align 1
  %ptr_add_tmp87 = getelementptr i8, i8* %1, i64 3
  %load_tmp88 = load i8, i8* %ptr_add_tmp87, align 1
  %bit_and_tmp90 = and i8 %load_tmp82, -64
  %.not = icmp ne i8 %bit_and_tmp90, -128
  %bit_and_tmp93 = and i8 %load_tmp85, -64
  %27 = icmp ne i8 %bit_and_tmp93, -128
  %bool_or_tmp95 = or i1 %.not, %27
  %bit_and_tmp98 = and i8 %load_tmp88, -64
  %28 = icmp ne i8 %bit_and_tmp98, -128
  %bool_or_tmp100 = or i1 %bool_or_tmp95, %28
  br i1 %bool_or_tmp100, label %then101, label %endif103

then101:                                          ; preds = %then78
  %29 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %0, i64 0, i32 0
  store i32 0, i32* %29, align 8
  %30 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %0, i64 0, i32 1
  store i8* %1, i8** %30, align 8
  ret void

endif103:                                         ; preds = %then78
  %bit_and_tmp105 = and i8 %load_tmp5, 7
  %cast_tmp106 = zext i8 %bit_and_tmp105 to i32
  %lshift_tmp107 = shl nuw nsw i32 %cast_tmp106, 18
  %bit_and_tmp109 = and i8 %load_tmp82, 63
  %cast_tmp110 = zext i8 %bit_and_tmp109 to i32
  %lshift_tmp111 = shl nuw nsw i32 %cast_tmp110, 12
  %bit_or_tmp112 = or i32 %lshift_tmp111, %lshift_tmp107
  %bit_and_tmp114 = and i8 %load_tmp85, 63
  %cast_tmp115 = zext i8 %bit_and_tmp114 to i32
  %lshift_tmp116 = shl nuw nsw i32 %cast_tmp115, 6
  %bit_or_tmp117 = or i32 %bit_or_tmp112, %lshift_tmp116
  %bit_and_tmp119 = and i8 %load_tmp88, 63
  %cast_tmp120 = zext i8 %bit_and_tmp119 to i32
  %bit_or_tmp122 = or i32 %bit_or_tmp117, %cast_tmp120
  %31 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %0, i64 0, i32 0
  store i32 %bit_or_tmp122, i32* %31, align 8
  %32 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %0, i64 0, i32 1
  %ptr_add_tmp125 = getelementptr i8, i8* %1, i64 4
  store i8* %ptr_add_tmp125, i8** %32, align 8
  ret void

else126:                                          ; preds = %else71
  %33 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %0, i64 0, i32 0
  store i32 0, i32* %33, align 8
  %34 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %0, i64 0, i32 1
  store i8* %1, i8** %34, align 8
  ret void
}

define i8* @d2s_short(double %0, i8* %1) {
alloca:
  %2 = call i8* @func.std.ryu.d2s_shortest..2.builtin.float64.0P.builtin.uint8.0P.builtin.uint8(double %0, i8* %1)
  ret i8* %2
}

define i8* @func.std.ryu.d2s_shortest..2.builtin.float64.0P.builtin.uint8.0P.builtin.uint8(double %0, i8* %1) {
alloca:
  %2 = alloca %"struct.std::ryu::floating_decimal_64", align 8
  %3 = alloca %"struct.std::ryu::floating_decimal_64", align 8
  %4 = alloca %"struct.std::ryu::floating_decimal_64", align 8
  %5 = alloca %"struct.std::ryu::floating_decimal_64", align 8
  %6 = alloca %"struct.std::ryu::floating_decimal_64", align 8
  %load_tmp.cast.i = bitcast double %0 to i64
  %7 = icmp slt i64 %load_tmp.cast.i, 0
  %bit_and_tmp3 = and i64 %load_tmp.cast.i, 4503599627370495
  %rshift_tmp5 = lshr i64 %load_tmp.cast.i, 52
  %8 = trunc i64 %rshift_tmp5 to i32
  %cast_tmp = and i32 %8, 2047
  switch i32 %cast_tmp, label %endif [
    i32 2047, label %then
    i32 0, label %bool_and_rhs
  ]

bool_and_rhs:                                     ; preds = %alloca
  %9 = icmp eq i64 %bit_and_tmp3, 0
  br i1 %9, label %then, label %endif

then:                                             ; preds = %alloca, %bool_and_rhs
  %.not = icmp eq i32 %cast_tmp, 0
  %.not47 = icmp eq i64 %bit_and_tmp3, 0
  br i1 %.not47, label %endif.i42, label %then.i41

then.i41:                                         ; preds = %then
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 dereferenceable(3) %1, i8* nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i64 3, i1 false)
  %ptr_add_tmp.i = getelementptr i8, i8* %1, i64 3
  br label %func.std.ryu.copy_short_special_str..4.0P.builtin.uint8.builtin.bool.builtin.bool.builtin.bool.0P.builtin.uint8.exit

endif.i42:                                        ; preds = %then
  br i1 %7, label %then4.i, label %endif7.i

then4.i:                                          ; preds = %endif.i42
  store i8 45, i8* %1, align 1
  %10 = getelementptr i8, i8* %1, i64 1
  br label %endif7.i

endif7.i:                                         ; preds = %then4.i, %endif.i42
  %.0.i43 = phi i8* [ %10, %then4.i ], [ %1, %endif.i42 ]
  br i1 %.not, label %else.i44, label %then9.i

then9.i:                                          ; preds = %endif7.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 dereferenceable(3) %.0.i43, i8* nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0), i64 3, i1 false)
  %ptr_add_tmp12.i = getelementptr i8, i8* %.0.i43, i64 3
  br label %func.std.ryu.copy_short_special_str..4.0P.builtin.uint8.builtin.bool.builtin.bool.builtin.bool.0P.builtin.uint8.exit

else.i44:                                         ; preds = %endif7.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 dereferenceable(3) %.0.i43, i8* nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), i64 3, i1 false)
  %ptr_add_tmp15.i = getelementptr i8, i8* %.0.i43, i64 3
  br label %func.std.ryu.copy_short_special_str..4.0P.builtin.uint8.builtin.bool.builtin.bool.builtin.bool.0P.builtin.uint8.exit

func.std.ryu.copy_short_special_str..4.0P.builtin.uint8.builtin.bool.builtin.bool.builtin.bool.0P.builtin.uint8.exit: ; preds = %"func.std.ryu.to_chars_fixed..2.struct.std::ryu::floating_decimal_64.0P.builtin.uint8.0P.builtin.uint8.exit.i", %"func.std.ryu.to_chars_scientific..2.struct.std::ryu::floating_decimal_64.0P.builtin.uint8.0P.builtin.uint8.exit.i", %else.i44, %then9.i, %then.i41
  %11 = phi i8* [ %ptr_add_tmp.i, %then.i41 ], [ %ptr_add_tmp12.i, %then9.i ], [ %ptr_add_tmp15.i, %else.i44 ], [ %.1.i48.i, %"func.std.ryu.to_chars_fixed..2.struct.std::ryu::floating_decimal_64.0P.builtin.uint8.0P.builtin.uint8.exit.i" ], [ %storemerge178.i.i, %"func.std.ryu.to_chars_scientific..2.struct.std::ryu::floating_decimal_64.0P.builtin.uint8.0P.builtin.uint8.exit.i" ]
  ret i8* %11

endif:                                            ; preds = %alloca, %bool_and_rhs
  store %"struct.std::ryu::floating_decimal_64" zeroinitializer, %"struct.std::ryu::floating_decimal_64"* %5, align 8
  %bit_or_tmp.i = or i64 %bit_and_tmp3, 4503599627370496
  %cast_tmp.off = add nsw i32 %cast_tmp, -1023
  %12 = icmp ugt i32 %cast_tmp.off, 52
  br i1 %12, label %else, label %endif6.i

endif6.i:                                         ; preds = %endif
  %unary_minus_tmp.i = sub nsw i32 1075, %cast_tmp
  %13 = zext i32 %unary_minus_tmp.i to i64
  %notmask.i = shl nsw i64 -1, %13
  %sub_tmp8.i = xor i64 %notmask.i, -1
  %bit_and_tmp.i = and i64 %bit_or_tmp.i, %sub_tmp8.i
  %.not.i = icmp eq i64 %bit_and_tmp.i, 0
  br i1 %.not.i, label %endif13.i, label %else

endif13.i:                                        ; preds = %endif6.i
  %rshift_tmp.i = lshr i64 %bit_or_tmp.i, %13
  %14 = getelementptr inbounds %"struct.std::ryu::floating_decimal_64", %"struct.std::ryu::floating_decimal_64"* %5, i64 0, i32 0
  store i64 %rshift_tmp.i, i64* %14, align 8
  %15 = getelementptr inbounds %"struct.std::ryu::floating_decimal_64", %"struct.std::ryu::floating_decimal_64"* %5, i64 0, i32 1
  store i32 0, i32* %15, align 8
  %div_tmp.i45 = udiv i64 %rshift_tmp.i, 10
  %cast_tmp20 = trunc i64 %rshift_tmp.i to i32
  %cast_tmp22 = trunc i64 %div_tmp.i45 to i32
  %mul_tmp.neg = mul i32 %cast_tmp22, -10
  %sub_tmp = add i32 %mul_tmp.neg, %cast_tmp20
  br label %for_condition_check

for_condition_check:                              ; preds = %for, %endif13.i
  %load_tmp32 = phi i32 [ 0, %endif13.i ], [ %17, %for ]
  %.040 = phi i64 [ %div_tmp.i45, %endif13.i ], [ %div_tmp.i, %for ]
  %.0 = phi i32 [ %sub_tmp, %endif13.i ], [ %sub_tmp31, %for ]
  %16 = icmp eq i32 %.0, 0
  br i1 %16, label %for, label %endif37

for:                                              ; preds = %for_condition_check
  store i64 %.040, i64* %14, align 8
  %div_tmp.i = udiv i64 %.040, 10
  %cast_tmp27 = trunc i64 %.040 to i32
  %cast_tmp29 = trunc i64 %div_tmp.i to i32
  %mul_tmp30.neg = mul i32 %cast_tmp29, -10
  %sub_tmp31 = add i32 %mul_tmp30.neg, %cast_tmp27
  %17 = add i32 %load_tmp32, 1
  store i32 %17, i32* %15, align 8
  br label %for_condition_check

else:                                             ; preds = %endif6.i, %endif
  call void @"func.std.ryu.d2d..2.builtin.uint64.builtin.uint32.struct.std::ryu::floating_decimal_64"(%"struct.std::ryu::floating_decimal_64"* sret(%"struct.std::ryu::floating_decimal_64") %6, i64 %bit_and_tmp3, i32 %cast_tmp)
  %18 = getelementptr inbounds %"struct.std::ryu::floating_decimal_64", %"struct.std::ryu::floating_decimal_64"* %5, i64 0, i32 0
  %19 = getelementptr inbounds %"struct.std::ryu::floating_decimal_64", %"struct.std::ryu::floating_decimal_64"* %6, i64 0, i32 0
  %load_tmp35 = load i64, i64* %19, align 8
  store i64 %load_tmp35, i64* %18, align 8
  %20 = getelementptr inbounds %"struct.std::ryu::floating_decimal_64", %"struct.std::ryu::floating_decimal_64"* %5, i64 0, i32 1
  %21 = getelementptr inbounds %"struct.std::ryu::floating_decimal_64", %"struct.std::ryu::floating_decimal_64"* %6, i64 0, i32 1
  %load_tmp36 = load i32, i32* %21, align 8
  store i32 %load_tmp36, i32* %20, align 8
  br label %endif37

endif37:                                          ; preds = %for_condition_check, %else
  call void @llvm.experimental.noalias.scope.decl(metadata !30)
  %22 = bitcast %"struct.std::ryu::floating_decimal_64"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %22)
  %23 = bitcast %"struct.std::ryu::floating_decimal_64"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %22, i8* nonnull align 8 dereferenceable(16) %23, i64 16, i1 false)
  br i1 %7, label %then.i, label %endif.i

then.i:                                           ; preds = %endif37
  store i8 45, i8* %1, align 1, !noalias !30
  %24 = getelementptr i8, i8* %1, i64 1
  br label %endif.i

endif.i:                                          ; preds = %then.i, %endif37
  %.0.i = phi i8* [ %24, %then.i ], [ %1, %endif37 ]
  %25 = getelementptr inbounds %"struct.std::ryu::floating_decimal_64", %"struct.std::ryu::floating_decimal_64"* %4, i64 0, i32 0
  %load_tmp3.i = load i64, i64* %25, align 8, !alias.scope !30
  %26 = icmp ugt i64 %load_tmp3.i, 9999999999999999
  br i1 %26, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i, label %else.i.i

else.i.i:                                         ; preds = %endif.i
  %27 = icmp ugt i64 %load_tmp3.i, 999999999999999
  br i1 %27, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i, label %else3.i.i

else3.i.i:                                        ; preds = %else.i.i
  %28 = icmp ugt i64 %load_tmp3.i, 99999999999999
  br i1 %28, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i, label %else6.i.i

else6.i.i:                                        ; preds = %else3.i.i
  %29 = icmp ugt i64 %load_tmp3.i, 9999999999999
  br i1 %29, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i, label %else9.i.i

else9.i.i:                                        ; preds = %else6.i.i
  %30 = icmp ugt i64 %load_tmp3.i, 999999999999
  br i1 %30, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i, label %else12.i.i

else12.i.i:                                       ; preds = %else9.i.i
  %31 = icmp ugt i64 %load_tmp3.i, 99999999999
  br i1 %31, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i, label %else15.i.i

else15.i.i:                                       ; preds = %else12.i.i
  %32 = icmp ugt i64 %load_tmp3.i, 9999999999
  br i1 %32, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i, label %else18.i.i

else18.i.i:                                       ; preds = %else15.i.i
  %33 = icmp ugt i64 %load_tmp3.i, 999999999
  br i1 %33, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i, label %else21.i.i

else21.i.i:                                       ; preds = %else18.i.i
  %34 = icmp ugt i64 %load_tmp3.i, 99999999
  br i1 %34, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i, label %else24.i.i

else24.i.i:                                       ; preds = %else21.i.i
  %35 = icmp ugt i64 %load_tmp3.i, 9999999
  br i1 %35, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i, label %else27.i.i

else27.i.i:                                       ; preds = %else24.i.i
  %36 = icmp ugt i64 %load_tmp3.i, 999999
  br i1 %36, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i, label %else30.i.i

else30.i.i:                                       ; preds = %else27.i.i
  %37 = icmp ugt i64 %load_tmp3.i, 99999
  br i1 %37, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i, label %else33.i.i

else33.i.i:                                       ; preds = %else30.i.i
  %38 = icmp ugt i64 %load_tmp3.i, 9999
  br i1 %38, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i, label %else36.i.i

else36.i.i:                                       ; preds = %else33.i.i
  %39 = icmp ugt i64 %load_tmp3.i, 999
  br i1 %39, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i, label %else39.i.i

else39.i.i:                                       ; preds = %else36.i.i
  %40 = icmp ugt i64 %load_tmp3.i, 99
  br i1 %40, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i, label %else42.i.i

else42.i.i:                                       ; preds = %else39.i.i
  %41 = icmp ugt i64 %load_tmp3.i, 9
  %42 = select i1 %41, i32 2, i32 1
  br label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i

func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i: ; preds = %else42.i.i, %else39.i.i, %else36.i.i, %else33.i.i, %else30.i.i, %else27.i.i, %else24.i.i, %else21.i.i, %else18.i.i, %else15.i.i, %else12.i.i, %else9.i.i, %else6.i.i, %else3.i.i, %else.i.i, %endif.i
  %43 = phi i32 [ 17, %endif.i ], [ 16, %else.i.i ], [ 15, %else3.i.i ], [ 14, %else6.i.i ], [ 13, %else9.i.i ], [ 12, %else12.i.i ], [ 11, %else15.i.i ], [ 10, %else18.i.i ], [ 9, %else21.i.i ], [ 8, %else24.i.i ], [ 7, %else27.i.i ], [ 6, %else30.i.i ], [ 5, %else33.i.i ], [ 4, %else36.i.i ], [ 3, %else39.i.i ], [ %42, %else42.i.i ]
  %44 = getelementptr inbounds %"struct.std::ryu::floating_decimal_64", %"struct.std::ryu::floating_decimal_64"* %4, i64 0, i32 1
  %load_tmp5.i = load i32, i32* %44, align 8, !alias.scope !30
  %add_tmp.i = add nuw nsw i32 %43, 3
  %add_tmp.i.off = add i32 %add_tmp.i, %load_tmp5.i
  %45 = icmp ult i32 %add_tmp.i.off, 19
  br i1 %45, label %then8.i, label %else.i

then8.i:                                          ; preds = %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i
  call void @llvm.experimental.noalias.scope.decl(metadata !33), !noalias !30
  %46 = bitcast %"struct.std::ryu::floating_decimal_64"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %46), !noalias !30
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %46, i8* nonnull align 8 dereferenceable(16) %22, i64 16, i1 false)
  %47 = getelementptr inbounds %"struct.std::ryu::floating_decimal_64", %"struct.std::ryu::floating_decimal_64"* %2, i64 0, i32 0
  %load_tmp.i12.i = load i64, i64* %47, align 8, !alias.scope !33, !noalias !30
  %48 = icmp ugt i64 %load_tmp.i12.i, 9999999999999999
  br i1 %48, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i29.i, label %else.i.i13.i

else.i.i13.i:                                     ; preds = %then8.i
  %49 = icmp ugt i64 %load_tmp.i12.i, 999999999999999
  br i1 %49, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i29.i, label %else3.i.i14.i

else3.i.i14.i:                                    ; preds = %else.i.i13.i
  %50 = icmp ugt i64 %load_tmp.i12.i, 99999999999999
  br i1 %50, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i29.i, label %else6.i.i15.i

else6.i.i15.i:                                    ; preds = %else3.i.i14.i
  %51 = icmp ugt i64 %load_tmp.i12.i, 9999999999999
  br i1 %51, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i29.i, label %else9.i.i16.i

else9.i.i16.i:                                    ; preds = %else6.i.i15.i
  %52 = icmp ugt i64 %load_tmp.i12.i, 999999999999
  br i1 %52, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i29.i, label %else12.i.i17.i

else12.i.i17.i:                                   ; preds = %else9.i.i16.i
  %53 = icmp ugt i64 %load_tmp.i12.i, 99999999999
  br i1 %53, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i29.i, label %else15.i.i18.i

else15.i.i18.i:                                   ; preds = %else12.i.i17.i
  %54 = icmp ugt i64 %load_tmp.i12.i, 9999999999
  br i1 %54, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i29.i, label %else18.i.i19.i

else18.i.i19.i:                                   ; preds = %else15.i.i18.i
  %55 = icmp ugt i64 %load_tmp.i12.i, 999999999
  br i1 %55, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i29.i, label %else21.i.i20.i

else21.i.i20.i:                                   ; preds = %else18.i.i19.i
  %56 = icmp ugt i64 %load_tmp.i12.i, 99999999
  br i1 %56, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i29.i, label %else24.i.i21.i

else24.i.i21.i:                                   ; preds = %else21.i.i20.i
  %57 = icmp ugt i64 %load_tmp.i12.i, 9999999
  br i1 %57, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i29.i, label %else27.i.i22.i

else27.i.i22.i:                                   ; preds = %else24.i.i21.i
  %58 = icmp ugt i64 %load_tmp.i12.i, 999999
  br i1 %58, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i29.i, label %else30.i.i23.i

else30.i.i23.i:                                   ; preds = %else27.i.i22.i
  %59 = icmp ugt i64 %load_tmp.i12.i, 99999
  br i1 %59, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i29.i, label %else33.i.i24.i

else33.i.i24.i:                                   ; preds = %else30.i.i23.i
  %60 = icmp ugt i64 %load_tmp.i12.i, 9999
  br i1 %60, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i29.i, label %else36.i.i25.i

else36.i.i25.i:                                   ; preds = %else33.i.i24.i
  %61 = icmp ugt i64 %load_tmp.i12.i, 999
  br i1 %61, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i29.i, label %else39.i.i26.i

else39.i.i26.i:                                   ; preds = %else36.i.i25.i
  %62 = icmp ugt i64 %load_tmp.i12.i, 99
  br i1 %62, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i29.i, label %else42.i.i27.i

else42.i.i27.i:                                   ; preds = %else39.i.i26.i
  %63 = icmp ugt i64 %load_tmp.i12.i, 9
  %64 = select i1 %63, i32 2, i32 1
  br label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i29.i

func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i29.i: ; preds = %else42.i.i27.i, %else39.i.i26.i, %else36.i.i25.i, %else33.i.i24.i, %else30.i.i23.i, %else27.i.i22.i, %else24.i.i21.i, %else21.i.i20.i, %else18.i.i19.i, %else15.i.i18.i, %else12.i.i17.i, %else9.i.i16.i, %else6.i.i15.i, %else3.i.i14.i, %else.i.i13.i, %then8.i
  %65 = phi i32 [ 17, %then8.i ], [ 16, %else.i.i13.i ], [ 15, %else3.i.i14.i ], [ 14, %else6.i.i15.i ], [ 13, %else9.i.i16.i ], [ 12, %else12.i.i17.i ], [ 11, %else15.i.i18.i ], [ 10, %else18.i.i19.i ], [ 9, %else21.i.i20.i ], [ 8, %else24.i.i21.i ], [ 7, %else27.i.i22.i ], [ 6, %else30.i.i23.i ], [ 5, %else33.i.i24.i ], [ 4, %else36.i.i25.i ], [ 3, %else39.i.i26.i ], [ %64, %else42.i.i27.i ]
  %66 = getelementptr inbounds %"struct.std::ryu::floating_decimal_64", %"struct.std::ryu::floating_decimal_64"* %2, i64 0, i32 1
  %load_tmp3.i.i = load i32, i32* %66, align 8, !alias.scope !33, !noalias !30
  %sub_tmp.i28.i = add i32 %load_tmp3.i.i, %65
  %add_tmp.i.i = add i32 %sub_tmp.i28.i, -1
  %67 = icmp slt i32 %add_tmp.i.i, 0
  br i1 %67, label %then.i32.i, label %endif.i34.i

then.i32.i:                                       ; preds = %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i29.i
  %add_tmp7.i.i = sub i32 2, %sub_tmp.i28.i
  %cast_tmp.i30.i = sext i32 %add_tmp7.i.i to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %.0.i, i8* align 1 getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i64 0, i64 0), i64 %cast_tmp.i30.i, i1 false), !noalias !36
  %unary_minus_tmp9.i.i = sub i32 1, %sub_tmp.i28.i
  %68 = sext i32 %unary_minus_tmp9.i.i to i64
  %ptr_add_tmp.i31.i = getelementptr i8, i8* %.0.i, i64 %68
  br label %endif.i34.i

endif.i34.i:                                      ; preds = %then.i32.i, %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i29.i
  %.0.i.i = phi i8* [ %ptr_add_tmp.i31.i, %then.i32.i ], [ %.0.i, %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i29.i ]
  %.not.i33.i = icmp ult i64 %load_tmp.i12.i, 4294967296
  br i1 %.not.i33.i, label %endif.endif68_crit_edge.i.i, label %then12.i.i

endif.endif68_crit_edge.i.i:                      ; preds = %endif.i34.i
  %.pre.i35.i = trunc i64 %load_tmp.i12.i to i32
  br label %endif68.i.i

then12.i.i:                                       ; preds = %endif.i34.i
  %div_tmp.i.i36.i = udiv i64 %load_tmp.i12.i, 100000000
  %cast_tmp15.i.i = trunc i64 %load_tmp.i12.i to i32
  %cast_tmp17.i.i = trunc i64 %div_tmp.i.i36.i to i32
  %mul_tmp.neg.i37.i = mul i32 %cast_tmp17.i.i, -100000000
  %sub_tmp18.i.i = add i32 %mul_tmp.neg.i37.i, %cast_tmp15.i.i
  %mod_tmp.i38.i = urem i32 %sub_tmp18.i.i, 10000
  %div_tmp.i39.i = udiv i32 %sub_tmp18.i.i, 10000
  %mod_tmp23.i.i = urem i32 %div_tmp.i39.i, 10000
  %mod_tmp25.i.i = urem i32 %mod_tmp.i38.i, 100
  %lshift_tmp.i40.i = shl nuw nsw i32 %mod_tmp25.i.i, 1
  %div_tmp27.i.i = udiv i32 %mod_tmp.i38.i, 100
  %lshift_tmp28.i.i = shl nuw nsw i32 %div_tmp27.i.i, 1
  %mod_tmp30.i.i = urem i32 %mod_tmp23.i.i, 100
  %lshift_tmp31.i.i = shl nuw nsw i32 %mod_tmp30.i.i, 1
  %div_tmp33.i.i = udiv i32 %mod_tmp23.i.i, 100
  %lshift_tmp34.i.i = shl nuw nsw i32 %div_tmp33.i.i, 1
  %69 = zext i32 %65 to i64
  %ptr_add_tmp37.i.i = getelementptr i8, i8* %.0.i.i, i64 %69
  %ptr_sub_tmp39.i.i = getelementptr i8, i8* %ptr_add_tmp37.i.i, i64 -1
  %70 = zext i32 %lshift_tmp.i40.i to i64
  %ptr_add_tmp41.i.i = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %70
  %71 = bitcast i8* %ptr_add_tmp41.i.i to i16*
  %72 = bitcast i8* %ptr_sub_tmp39.i.i to i16*
  %73 = load i16, i16* %71, align 2, !noalias !36
  store i16 %73, i16* %72, align 1, !noalias !36
  %ptr_sub_tmp47.i.i = getelementptr i8, i8* %ptr_add_tmp37.i.i, i64 -3
  %74 = zext i32 %lshift_tmp28.i.i to i64
  %ptr_add_tmp49.i.i = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %74
  %75 = bitcast i8* %ptr_add_tmp49.i.i to i16*
  %76 = bitcast i8* %ptr_sub_tmp47.i.i to i16*
  %77 = load i16, i16* %75, align 2, !noalias !36
  store i16 %77, i16* %76, align 1, !noalias !36
  %ptr_sub_tmp55.i.i = getelementptr i8, i8* %ptr_add_tmp37.i.i, i64 -5
  %78 = zext i32 %lshift_tmp31.i.i to i64
  %ptr_add_tmp57.i.i = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %78
  %79 = bitcast i8* %ptr_add_tmp57.i.i to i16*
  %80 = bitcast i8* %ptr_sub_tmp55.i.i to i16*
  %81 = load i16, i16* %79, align 2, !noalias !36
  store i16 %81, i16* %80, align 1, !noalias !36
  %ptr_sub_tmp63.i.i = getelementptr i8, i8* %ptr_add_tmp37.i.i, i64 -7
  %82 = zext i32 %lshift_tmp34.i.i to i64
  %ptr_add_tmp65.i.i = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %82
  %83 = bitcast i8* %ptr_add_tmp65.i.i to i16*
  %84 = bitcast i8* %ptr_sub_tmp63.i.i to i16*
  %85 = load i16, i16* %83, align 2, !noalias !36
  store i16 %85, i16* %84, align 1, !noalias !36
  br label %endif68.i.i

endif68.i.i:                                      ; preds = %then12.i.i, %endif.endif68_crit_edge.i.i
  %cast_tmp70.pre-phi.i.i = phi i32 [ %.pre.i35.i, %endif.endif68_crit_edge.i.i ], [ %cast_tmp17.i.i, %then12.i.i ]
  %.0173.i.i = phi i32 [ 0, %endif.endif68_crit_edge.i.i ], [ 8, %then12.i.i ]
  br label %while_condition_check.i41.i

while_condition_check.i41.i:                      ; preds = %while.i42.i, %endif68.i.i
  %.1174.i.i = phi i32 [ %.0173.i.i, %endif68.i.i ], [ %add_tmp102.i.i, %while.i42.i ]
  %.0171.i.i = phi i32 [ %cast_tmp70.pre-phi.i.i, %endif68.i.i ], [ %div_tmp78.i.i, %while.i42.i ]
  %86 = icmp ugt i32 %.0171.i.i, 9999
  br i1 %86, label %while.i42.i, label %endwhile.i43.i

while.i42.i:                                      ; preds = %while_condition_check.i41.i
  %87 = urem i32 %.0171.i.i, 10000
  %div_tmp78.i.i = udiv i32 %.0171.i.i, 10000
  %mod_tmp80.i.i = urem i32 %87, 100
  %lshift_tmp81.i.i = shl nuw nsw i32 %mod_tmp80.i.i, 1
  %div_tmp83.i.i = udiv i32 %87, 100
  %lshift_tmp84.i.i = shl nuw nsw i32 %div_tmp83.i.i, 1
  %88 = zext i32 %65 to i64
  %ptr_add_tmp87.i.i = getelementptr i8, i8* %.0.i.i, i64 -1
  %89 = zext i32 %.1174.i.i to i64
  %90 = sub nsw i64 0, %89
  %ptr_sub_tmp89.i.i = getelementptr i8, i8* %ptr_add_tmp87.i.i, i64 %88
  %ptr_sub_tmp90.i.i = getelementptr i8, i8* %ptr_sub_tmp89.i.i, i64 %90
  %91 = zext i32 %lshift_tmp81.i.i to i64
  %ptr_add_tmp92.i.i = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %91
  %92 = bitcast i8* %ptr_add_tmp92.i.i to i16*
  %93 = bitcast i8* %ptr_sub_tmp90.i.i to i16*
  %94 = load i16, i16* %92, align 2, !noalias !36
  store i16 %94, i16* %93, align 1, !noalias !36
  %ptr_add_tmp95.i.i = getelementptr i8, i8* %.0.i.i, i64 -3
  %ptr_sub_tmp97.i.i = getelementptr i8, i8* %ptr_add_tmp95.i.i, i64 %88
  %ptr_sub_tmp98.i.i = getelementptr i8, i8* %ptr_sub_tmp97.i.i, i64 %90
  %95 = zext i32 %lshift_tmp84.i.i to i64
  %ptr_add_tmp100.i.i = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %95
  %96 = bitcast i8* %ptr_add_tmp100.i.i to i16*
  %97 = bitcast i8* %ptr_sub_tmp98.i.i to i16*
  %98 = load i16, i16* %96, align 2, !noalias !36
  store i16 %98, i16* %97, align 1, !noalias !36
  %add_tmp102.i.i = add i32 %.1174.i.i, 4
  br label %while_condition_check.i41.i

endwhile.i43.i:                                   ; preds = %while_condition_check.i41.i
  %99 = icmp ugt i32 %.0171.i.i, 99
  br i1 %99, label %then104.i.i, label %endif120.i.i

then104.i.i:                                      ; preds = %endwhile.i43.i
  %mod_tmp106.i.i = urem i32 %.0171.i.i, 100
  %lshift_tmp107.i.i = shl nuw nsw i32 %mod_tmp106.i.i, 1
  %div_tmp109.i.i = udiv i32 %.0171.i.i, 100
  %100 = zext i32 %65 to i64
  %ptr_add_tmp112.i.i = getelementptr i8, i8* %.0.i.i, i64 %100
  %101 = zext i32 %.1174.i.i to i64
  %102 = sub nsw i64 0, %101
  %ptr_sub_tmp114.i.i = getelementptr i8, i8* %ptr_add_tmp112.i.i, i64 %102
  %ptr_sub_tmp115.i.i = getelementptr i8, i8* %ptr_sub_tmp114.i.i, i64 -1
  %103 = zext i32 %lshift_tmp107.i.i to i64
  %ptr_add_tmp117.i.i = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %103
  %104 = bitcast i8* %ptr_add_tmp117.i.i to i16*
  %105 = bitcast i8* %ptr_sub_tmp115.i.i to i16*
  %106 = load i16, i16* %104, align 2, !noalias !36
  store i16 %106, i16* %105, align 1, !noalias !36
  br label %endif120.i.i

endif120.i.i:                                     ; preds = %then104.i.i, %endwhile.i43.i
  %.1172.i.i = phi i32 [ %div_tmp109.i.i, %then104.i.i ], [ %.0171.i.i, %endwhile.i43.i ]
  %107 = icmp ugt i32 %.1172.i.i, 9
  br i1 %107, label %then122.i.i, label %else.i45.i

then122.i.i:                                      ; preds = %endif120.i.i
  %lshift_tmp124.i.i = shl i32 %.1172.i.i, 1
  %ptr_add_tmp126.i.i = getelementptr i8, i8* %.0.i.i, i64 1
  %108 = zext i32 %lshift_tmp124.i.i to i64
  %ptr_add_tmp128.i.i = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %108
  %109 = bitcast i8* %ptr_add_tmp128.i.i to i16*
  %110 = bitcast i8* %ptr_add_tmp126.i.i to i16*
  %111 = load i16, i16* %109, align 2, !noalias !36
  store i16 %111, i16* %110, align 1, !noalias !36
  br label %endif134.i.i

else.i45.i:                                       ; preds = %endif120.i.i
  %112 = trunc i32 %.1172.i.i to i8
  %cast_tmp131.i.i = add i8 %112, 48
  %ptr_add_tmp133.i44.i = getelementptr i8, i8* %.0.i.i, i64 1
  store i8 %cast_tmp131.i.i, i8* %ptr_add_tmp133.i44.i, align 1, !noalias !36
  br label %endif134.i.i

endif134.i.i:                                     ; preds = %else.i45.i, %then122.i.i
  %113 = icmp sgt i32 %load_tmp3.i.i, -1
  br i1 %113, label %then136.i.i, label %endif143.i.i

then136.i.i:                                      ; preds = %endif134.i.i
  %114 = zext i32 %65 to i64
  %ptr_add_tmp139.i.i = getelementptr i8, i8* %.0.i.i, i64 %114
  %ptr_add_tmp140.i.i = getelementptr i8, i8* %ptr_add_tmp139.i.i, i64 1
  %cast_tmp142.i.i = sext i32 %load_tmp3.i.i to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %ptr_add_tmp140.i.i, i8 48, i64 %cast_tmp142.i.i, i1 false), !noalias !36
  br label %endif143.i.i

endif143.i.i:                                     ; preds = %then136.i.i, %endif134.i.i
  %115 = icmp sgt i32 %add_tmp.i.i, -1
  br i1 %115, label %then145.i.i, label %endif156.i.i

then145.i.i:                                      ; preds = %endif143.i.i
  %ptr_add_tmp148.i.i = getelementptr i8, i8* %.0.i.i, i64 1
  %cast_tmp151.i.i = sext i32 %sub_tmp.i28.i to i64
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %.0.i.i, i8* align 1 %ptr_add_tmp148.i.i, i64 %cast_tmp151.i.i, i1 false), !noalias !36
  %116 = sext i32 %add_tmp.i.i to i64
  %ptr_add_tmp154.i.i = getelementptr i8, i8* %.0.i.i, i64 %116
  %ptr_add_tmp155.i.i = getelementptr i8, i8* %ptr_add_tmp154.i.i, i64 1
  store i8 46, i8* %ptr_add_tmp155.i.i, align 1, !noalias !36
  br label %endif156.i.i

endif156.i.i:                                     ; preds = %then145.i.i, %endif143.i.i
  %add_tmp158.i.i = add nuw nsw i32 %65, 1
  %117 = zext i32 %add_tmp158.i.i to i64
  %ptr_add_tmp160.i46.i = getelementptr i8, i8* %.0.i.i, i64 %117
  br i1 %113, label %then162.i.i, label %"func.std.ryu.to_chars_fixed..2.struct.std::ryu::floating_decimal_64.0P.builtin.uint8.0P.builtin.uint8.exit.i"

then162.i.i:                                      ; preds = %endif156.i.i
  %118 = sext i32 %load_tmp3.i.i to i64
  %ptr_add_tmp165.i47.i = getelementptr i8, i8* %ptr_add_tmp160.i46.i, i64 %118
  store i8 48, i8* %ptr_add_tmp165.i47.i, align 1, !noalias !36
  %119 = getelementptr i8, i8* %ptr_add_tmp165.i47.i, i64 1
  br label %"func.std.ryu.to_chars_fixed..2.struct.std::ryu::floating_decimal_64.0P.builtin.uint8.0P.builtin.uint8.exit.i"

"func.std.ryu.to_chars_fixed..2.struct.std::ryu::floating_decimal_64.0P.builtin.uint8.0P.builtin.uint8.exit.i": ; preds = %then162.i.i, %endif156.i.i
  %.1.i48.i = phi i8* [ %119, %then162.i.i ], [ %ptr_add_tmp160.i46.i, %endif156.i.i ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %46), !noalias !30
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %22)
  br label %func.std.ryu.copy_short_special_str..4.0P.builtin.uint8.builtin.bool.builtin.bool.builtin.bool.0P.builtin.uint8.exit

else.i:                                           ; preds = %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i
  call void @llvm.experimental.noalias.scope.decl(metadata !37), !noalias !30
  %120 = bitcast %"struct.std::ryu::floating_decimal_64"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %120), !noalias !30
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %120, i8* nonnull align 8 dereferenceable(16) %22, i64 16, i1 false)
  %121 = getelementptr inbounds %"struct.std::ryu::floating_decimal_64", %"struct.std::ryu::floating_decimal_64"* %3, i64 0, i32 0
  %load_tmp.i.i = load i64, i64* %121, align 8, !alias.scope !37, !noalias !30
  %122 = icmp ugt i64 %load_tmp.i.i, 9999999999999999
  br i1 %122, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i.i, label %else.i.i.i

else.i.i.i:                                       ; preds = %else.i
  %123 = icmp ugt i64 %load_tmp.i.i, 999999999999999
  br i1 %123, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i.i, label %else3.i.i.i

else3.i.i.i:                                      ; preds = %else.i.i.i
  %124 = icmp ugt i64 %load_tmp.i.i, 99999999999999
  br i1 %124, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i.i, label %else6.i.i.i

else6.i.i.i:                                      ; preds = %else3.i.i.i
  %125 = icmp ugt i64 %load_tmp.i.i, 9999999999999
  br i1 %125, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i.i, label %else9.i.i.i

else9.i.i.i:                                      ; preds = %else6.i.i.i
  %126 = icmp ugt i64 %load_tmp.i.i, 999999999999
  br i1 %126, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i.i, label %else12.i.i.i

else12.i.i.i:                                     ; preds = %else9.i.i.i
  %127 = icmp ugt i64 %load_tmp.i.i, 99999999999
  br i1 %127, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i.i, label %else15.i.i.i

else15.i.i.i:                                     ; preds = %else12.i.i.i
  %128 = icmp ugt i64 %load_tmp.i.i, 9999999999
  br i1 %128, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i.i, label %else18.i.i.i

else18.i.i.i:                                     ; preds = %else15.i.i.i
  %129 = icmp ugt i64 %load_tmp.i.i, 999999999
  br i1 %129, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i.i, label %else21.i.i.i

else21.i.i.i:                                     ; preds = %else18.i.i.i
  %130 = icmp ugt i64 %load_tmp.i.i, 99999999
  br i1 %130, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i.i, label %else24.i.i.i

else24.i.i.i:                                     ; preds = %else21.i.i.i
  %131 = icmp ugt i64 %load_tmp.i.i, 9999999
  br i1 %131, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i.i, label %else27.i.i.i

else27.i.i.i:                                     ; preds = %else24.i.i.i
  %132 = icmp ugt i64 %load_tmp.i.i, 999999
  br i1 %132, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i.i, label %else30.i.i.i

else30.i.i.i:                                     ; preds = %else27.i.i.i
  %133 = icmp ugt i64 %load_tmp.i.i, 99999
  br i1 %133, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i.i, label %else33.i.i.i

else33.i.i.i:                                     ; preds = %else30.i.i.i
  %134 = icmp ugt i64 %load_tmp.i.i, 9999
  br i1 %134, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i.i, label %else36.i.i.i

else36.i.i.i:                                     ; preds = %else33.i.i.i
  %135 = icmp ugt i64 %load_tmp.i.i, 999
  br i1 %135, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i.i, label %else39.i.i.i

else39.i.i.i:                                     ; preds = %else36.i.i.i
  %136 = icmp ugt i64 %load_tmp.i.i, 99
  br i1 %136, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i.i, label %else42.i.i.i

else42.i.i.i:                                     ; preds = %else39.i.i.i
  %137 = icmp ugt i64 %load_tmp.i.i, 9
  %138 = select i1 %137, i32 2, i32 1
  br label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i.i

func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i.i: ; preds = %else42.i.i.i, %else39.i.i.i, %else36.i.i.i, %else33.i.i.i, %else30.i.i.i, %else27.i.i.i, %else24.i.i.i, %else21.i.i.i, %else18.i.i.i, %else15.i.i.i, %else12.i.i.i, %else9.i.i.i, %else6.i.i.i, %else3.i.i.i, %else.i.i.i, %else.i
  %139 = phi i32 [ 17, %else.i ], [ 16, %else.i.i.i ], [ 15, %else3.i.i.i ], [ 14, %else6.i.i.i ], [ 13, %else9.i.i.i ], [ 12, %else12.i.i.i ], [ 11, %else15.i.i.i ], [ 10, %else18.i.i.i ], [ 9, %else21.i.i.i ], [ 8, %else24.i.i.i ], [ 7, %else27.i.i.i ], [ 6, %else30.i.i.i ], [ 5, %else33.i.i.i ], [ 4, %else36.i.i.i ], [ 3, %else39.i.i.i ], [ %138, %else42.i.i.i ]
  %.not.i.i = icmp ult i64 %load_tmp.i.i, 4294967296
  br i1 %.not.i.i, label %alloca.endif_crit_edge.i.i, label %then.i.i

alloca.endif_crit_edge.i.i:                       ; preds = %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i.i
  %.pre.i.i = trunc i64 %load_tmp.i.i to i32
  br label %endif.i.i

then.i.i:                                         ; preds = %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i.i
  %div_tmp.i.i.i = udiv i64 %load_tmp.i.i, 100000000
  %cast_tmp.i.i = trunc i64 %load_tmp.i.i to i32
  %cast_tmp6.i.i = trunc i64 %div_tmp.i.i.i to i32
  %mul_tmp.neg.i.i = mul i32 %cast_tmp6.i.i, -100000000
  %sub_tmp.i.i = add i32 %mul_tmp.neg.i.i, %cast_tmp.i.i
  %mod_tmp.i.i = urem i32 %sub_tmp.i.i, 10000
  %div_tmp.i.i = udiv i32 %sub_tmp.i.i, 10000
  %mod_tmp11.i.i = urem i32 %div_tmp.i.i, 10000
  %mod_tmp13.i.i = urem i32 %mod_tmp.i.i, 100
  %lshift_tmp.i.i = shl nuw nsw i32 %mod_tmp13.i.i, 1
  %div_tmp15.i.i = udiv i32 %mod_tmp.i.i, 100
  %lshift_tmp16.i.i = shl nuw nsw i32 %div_tmp15.i.i, 1
  %mod_tmp18.i.i = urem i32 %mod_tmp11.i.i, 100
  %lshift_tmp19.i.i = shl nuw nsw i32 %mod_tmp18.i.i, 1
  %div_tmp21.i.i = udiv i32 %mod_tmp11.i.i, 100
  %lshift_tmp22.i.i = shl nuw nsw i32 %div_tmp21.i.i, 1
  %140 = zext i32 %139 to i64
  %ptr_add_tmp.i.i = getelementptr i8, i8* %.0.i, i64 %140
  %ptr_sub_tmp26.i.i = getelementptr i8, i8* %ptr_add_tmp.i.i, i64 -1
  %141 = zext i32 %lshift_tmp.i.i to i64
  %ptr_add_tmp28.i.i = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %141
  %142 = bitcast i8* %ptr_add_tmp28.i.i to i16*
  %143 = bitcast i8* %ptr_sub_tmp26.i.i to i16*
  %144 = load i16, i16* %142, align 2, !noalias !40
  store i16 %144, i16* %143, align 1, !noalias !40
  %ptr_sub_tmp34.i.i = getelementptr i8, i8* %ptr_add_tmp.i.i, i64 -3
  %145 = zext i32 %lshift_tmp16.i.i to i64
  %ptr_add_tmp36.i.i = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %145
  %146 = bitcast i8* %ptr_add_tmp36.i.i to i16*
  %147 = bitcast i8* %ptr_sub_tmp34.i.i to i16*
  %148 = load i16, i16* %146, align 2, !noalias !40
  store i16 %148, i16* %147, align 1, !noalias !40
  %ptr_sub_tmp42.i.i = getelementptr i8, i8* %ptr_add_tmp.i.i, i64 -5
  %149 = zext i32 %lshift_tmp19.i.i to i64
  %ptr_add_tmp44.i.i = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %149
  %150 = bitcast i8* %ptr_add_tmp44.i.i to i16*
  %151 = bitcast i8* %ptr_sub_tmp42.i.i to i16*
  %152 = load i16, i16* %150, align 2, !noalias !40
  store i16 %152, i16* %151, align 1, !noalias !40
  %ptr_sub_tmp50.i.i = getelementptr i8, i8* %ptr_add_tmp.i.i, i64 -7
  %153 = zext i32 %lshift_tmp22.i.i to i64
  %ptr_add_tmp52.i.i = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %153
  %154 = bitcast i8* %ptr_add_tmp52.i.i to i16*
  %155 = bitcast i8* %ptr_sub_tmp50.i.i to i16*
  %156 = load i16, i16* %154, align 2, !noalias !40
  store i16 %156, i16* %155, align 1, !noalias !40
  br label %endif.i.i

endif.i.i:                                        ; preds = %then.i.i, %alloca.endif_crit_edge.i.i
  %cast_tmp55.pre-phi.i.i = phi i32 [ %.pre.i.i, %alloca.endif_crit_edge.i.i ], [ %cast_tmp6.i.i, %then.i.i ]
  %.0181.i.i = phi i32 [ 0, %alloca.endif_crit_edge.i.i ], [ 8, %then.i.i ]
  br label %while_condition_check.i.i

while_condition_check.i.i:                        ; preds = %while.i.i, %endif.i.i
  %.0182.i.i = phi i32 [ %cast_tmp55.pre-phi.i.i, %endif.i.i ], [ %div_tmp63.i.i, %while.i.i ]
  %.1.i.i = phi i32 [ %.0181.i.i, %endif.i.i ], [ %add_tmp87.i.i, %while.i.i ]
  %157 = icmp ugt i32 %.0182.i.i, 9999
  br i1 %157, label %while.i.i, label %endwhile.i.i

while.i.i:                                        ; preds = %while_condition_check.i.i
  %158 = urem i32 %.0182.i.i, 10000
  %div_tmp63.i.i = udiv i32 %.0182.i.i, 10000
  %mod_tmp65.i.i = urem i32 %158, 100
  %lshift_tmp66.i.i = shl nuw nsw i32 %mod_tmp65.i.i, 1
  %div_tmp68.i.i = udiv i32 %158, 100
  %lshift_tmp69.i.i = shl nuw nsw i32 %div_tmp68.i.i, 1
  %159 = zext i32 %139 to i64
  %ptr_add_tmp72.i.i = getelementptr i8, i8* %.0.i, i64 -1
  %160 = zext i32 %.1.i.i to i64
  %161 = sub nsw i64 0, %160
  %ptr_sub_tmp74.i.i = getelementptr i8, i8* %ptr_add_tmp72.i.i, i64 %159
  %ptr_sub_tmp75.i.i = getelementptr i8, i8* %ptr_sub_tmp74.i.i, i64 %161
  %162 = zext i32 %lshift_tmp66.i.i to i64
  %ptr_add_tmp77.i.i = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %162
  %163 = bitcast i8* %ptr_add_tmp77.i.i to i16*
  %164 = bitcast i8* %ptr_sub_tmp75.i.i to i16*
  %165 = load i16, i16* %163, align 2, !noalias !40
  store i16 %165, i16* %164, align 1, !noalias !40
  %ptr_add_tmp80.i.i = getelementptr i8, i8* %.0.i, i64 -3
  %ptr_sub_tmp82.i.i = getelementptr i8, i8* %ptr_add_tmp80.i.i, i64 %159
  %ptr_sub_tmp83.i.i = getelementptr i8, i8* %ptr_sub_tmp82.i.i, i64 %161
  %166 = zext i32 %lshift_tmp69.i.i to i64
  %ptr_add_tmp85.i.i = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %166
  %167 = bitcast i8* %ptr_add_tmp85.i.i to i16*
  %168 = bitcast i8* %ptr_sub_tmp83.i.i to i16*
  %169 = load i16, i16* %167, align 2, !noalias !40
  store i16 %169, i16* %168, align 1, !noalias !40
  %add_tmp87.i.i = add i32 %.1.i.i, 4
  br label %while_condition_check.i.i

endwhile.i.i:                                     ; preds = %while_condition_check.i.i
  %170 = icmp ugt i32 %.0182.i.i, 99
  br i1 %170, label %then89.i.i, label %endif105.i.i

then89.i.i:                                       ; preds = %endwhile.i.i
  %mod_tmp91.i.i = urem i32 %.0182.i.i, 100
  %lshift_tmp92.i.i = shl nuw nsw i32 %mod_tmp91.i.i, 1
  %div_tmp94.i.i = udiv i32 %.0182.i.i, 100
  %171 = zext i32 %139 to i64
  %ptr_add_tmp97.i.i = getelementptr i8, i8* %.0.i, i64 %171
  %172 = zext i32 %.1.i.i to i64
  %173 = sub nsw i64 0, %172
  %ptr_sub_tmp99.i.i = getelementptr i8, i8* %ptr_add_tmp97.i.i, i64 %173
  %ptr_sub_tmp100.i.i = getelementptr i8, i8* %ptr_sub_tmp99.i.i, i64 -1
  %174 = zext i32 %lshift_tmp92.i.i to i64
  %ptr_add_tmp102.i.i = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %174
  %175 = bitcast i8* %ptr_add_tmp102.i.i to i16*
  %176 = bitcast i8* %ptr_sub_tmp100.i.i to i16*
  %177 = load i16, i16* %175, align 2, !noalias !40
  store i16 %177, i16* %176, align 1, !noalias !40
  %add_tmp104.i.i = or i32 %.1.i.i, 2
  br label %endif105.i.i

endif105.i.i:                                     ; preds = %then89.i.i, %endwhile.i.i
  %.1183.i.i = phi i32 [ %div_tmp94.i.i, %then89.i.i ], [ %.0182.i.i, %endwhile.i.i ]
  %.2.i.i = phi i32 [ %add_tmp104.i.i, %then89.i.i ], [ %.1.i.i, %endwhile.i.i ]
  %178 = icmp ugt i32 %.1183.i.i, 9
  br i1 %178, label %then107.i.i, label %else.i11.i

then107.i.i:                                      ; preds = %endif105.i.i
  %lshift_tmp109.i.i = shl i32 %.1183.i.i, 1
  %add_tmp111.i.i = or i32 %lshift_tmp109.i.i, 1
  %179 = zext i32 %add_tmp111.i.i to i64
  %180 = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %179
  %181 = zext i32 %139 to i64
  %ptr_add_tmp114.i.i = getelementptr i8, i8* %.0.i, i64 %181
  %182 = zext i32 %.2.i.i to i64
  %183 = sub nsw i64 0, %182
  %ptr_sub_tmp116.i.i = getelementptr i8, i8* %ptr_add_tmp114.i.i, i64 %183
  %load_tmp117.i.i = load i8, i8* %180, align 1, !noalias !40
  store i8 %load_tmp117.i.i, i8* %ptr_sub_tmp116.i.i, align 1, !noalias !40
  %184 = zext i32 %lshift_tmp109.i.i to i64
  %185 = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %184
  %load_tmp120.i.i = load i8, i8* %185, align 2, !noalias !40
  br label %endif125.i.i

else.i11.i:                                       ; preds = %endif105.i.i
  %186 = trunc i32 %.1183.i.i to i8
  %cast_tmp123.i.i = add i8 %186, 48
  br label %endif125.i.i

endif125.i.i:                                     ; preds = %else.i11.i, %then107.i.i
  %storemerge = phi i8 [ %cast_tmp123.i.i, %else.i11.i ], [ %load_tmp120.i.i, %then107.i.i ]
  store i8 %storemerge, i8* %.0.i, align 1, !noalias !40
  %187 = icmp ugt i32 %139, 1
  br i1 %187, label %then127.i.i, label %else134.i.i

then127.i.i:                                      ; preds = %endif125.i.i
  %ptr_add_tmp129.i.i = getelementptr i8, i8* %.0.i, i64 1
  store i8 46, i8* %ptr_add_tmp129.i.i, align 1, !noalias !40
  %add_tmp131.i.i = add nuw nsw i32 %139, 1
  %188 = zext i32 %add_tmp131.i.i to i64
  %ptr_add_tmp133.i.i = getelementptr i8, i8* %.0.i, i64 %188
  br label %endif136.i.i

else134.i.i:                                      ; preds = %endif125.i.i
  %189 = getelementptr i8, i8* %.0.i, i64 1
  br label %endif136.i.i

endif136.i.i:                                     ; preds = %else134.i.i, %then127.i.i
  %storemerge.i.i = phi i8* [ %189, %else134.i.i ], [ %ptr_add_tmp133.i.i, %then127.i.i ]
  store i8 101, i8* %storemerge.i.i, align 1, !noalias !40
  %190 = getelementptr i8, i8* %storemerge.i.i, i64 1
  %191 = getelementptr inbounds %"struct.std::ryu::floating_decimal_64", %"struct.std::ryu::floating_decimal_64"* %3, i64 0, i32 1
  %load_tmp139.i.i = load i32, i32* %191, align 8, !alias.scope !37, !noalias !30
  %add_tmp141.i.i = add nsw i32 %139, -1
  %sub_tmp142.i.i = add i32 %add_tmp141.i.i, %load_tmp139.i.i
  %192 = icmp slt i32 %sub_tmp142.i.i, 0
  br i1 %192, label %then144.i.i, label %else148.i.i

then144.i.i:                                      ; preds = %endif136.i.i
  store i8 45, i8* %190, align 1, !noalias !40
  %unary_minus_tmp.i.i = sub i32 0, %sub_tmp142.i.i
  br label %endif151.i.i

else148.i.i:                                      ; preds = %endif136.i.i
  store i8 43, i8* %190, align 1, !noalias !40
  br label %endif151.i.i

endif151.i.i:                                     ; preds = %else148.i.i, %then144.i.i
  %.0180.i.i = phi i32 [ %unary_minus_tmp.i.i, %then144.i.i ], [ %sub_tmp142.i.i, %else148.i.i ]
  %.048 = getelementptr i8, i8* %storemerge.i.i, i64 2
  %load_tmp169177.i.i = bitcast i8* %.048 to i16*
  %193 = icmp sgt i32 %.0180.i.i, 99
  br i1 %193, label %then153.i.i, label %else168.i.i

then153.i.i:                                      ; preds = %endif151.i.i
  %mod_tmp155.i.i = srem i32 %.0180.i.i, 10
  %div_tmp158.i.i = sdiv i32 %.0180.i.i, 10
  %mul_tmp159.i.i = shl nsw i32 %div_tmp158.i.i, 1
  %194 = sext i32 %mul_tmp159.i.i to i64
  %ptr_add_tmp160.i.i = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %194
  %195 = bitcast i8* %ptr_add_tmp160.i.i to i16*
  %196 = load i16, i16* %195, align 2, !noalias !40
  store i16 %196, i16* %load_tmp169177.i.i, align 1, !noalias !40
  %197 = trunc i32 %mod_tmp155.i.i to i8
  %cast_tmp163.i.i = add i8 %197, 48
  %ptr_add_tmp165.i.i = getelementptr i8, i8* %storemerge.i.i, i64 4
  store i8 %cast_tmp163.i.i, i8* %ptr_add_tmp165.i.i, align 1, !noalias !40
  %ptr_add_tmp167.i.i = getelementptr i8, i8* %storemerge.i.i, i64 5
  br label %"func.std.ryu.to_chars_scientific..2.struct.std::ryu::floating_decimal_64.0P.builtin.uint8.0P.builtin.uint8.exit.i"

else168.i.i:                                      ; preds = %endif151.i.i
  %mul_tmp171.i.i = shl i32 %.0180.i.i, 1
  %198 = sext i32 %mul_tmp171.i.i to i64
  %ptr_add_tmp172.i.i = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %198
  %199 = bitcast i8* %ptr_add_tmp172.i.i to i16*
  %200 = load i16, i16* %199, align 2, !noalias !40
  store i16 %200, i16* %load_tmp169177.i.i, align 1, !noalias !40
  %ptr_add_tmp174.i.i = getelementptr i8, i8* %storemerge.i.i, i64 4
  br label %"func.std.ryu.to_chars_scientific..2.struct.std::ryu::floating_decimal_64.0P.builtin.uint8.0P.builtin.uint8.exit.i"

"func.std.ryu.to_chars_scientific..2.struct.std::ryu::floating_decimal_64.0P.builtin.uint8.0P.builtin.uint8.exit.i": ; preds = %else168.i.i, %then153.i.i
  %storemerge178.i.i = phi i8* [ %ptr_add_tmp174.i.i, %else168.i.i ], [ %ptr_add_tmp167.i.i, %then153.i.i ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %120), !noalias !30
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %22)
  br label %func.std.ryu.copy_short_special_str..4.0P.builtin.uint8.builtin.bool.builtin.bool.builtin.bool.0P.builtin.uint8.exit
}

define i64 @func.std.ryu.double_to_bits..1.builtin.float64.builtin.uint64(double %0) {
alloca:
  %load_tmp.cast = bitcast double %0 to i64
  ret i64 %load_tmp.cast
}

define i8* @func.std.ryu.copy_short_special_str..4.0P.builtin.uint8.builtin.bool.builtin.bool.builtin.bool.0P.builtin.uint8(i8* %0, i1 %1, i1 %2, i1 %3) {
alloca:
  br i1 %3, label %then, label %endif

then:                                             ; preds = %alloca
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 dereferenceable(3) %0, i8* nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i64 3, i1 false)
  %ptr_add_tmp = getelementptr i8, i8* %0, i64 3
  ret i8* %ptr_add_tmp

endif:                                            ; preds = %alloca
  br i1 %1, label %then4, label %endif7

then4:                                            ; preds = %endif
  store i8 45, i8* %0, align 1
  %4 = getelementptr i8, i8* %0, i64 1
  br label %endif7

endif7:                                           ; preds = %then4, %endif
  %.0 = phi i8* [ %4, %then4 ], [ %0, %endif ]
  br i1 %2, label %then9, label %else

then9:                                            ; preds = %endif7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 dereferenceable(3) %.0, i8* nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0), i64 3, i1 false)
  %ptr_add_tmp12 = getelementptr i8, i8* %.0, i64 3
  ret i8* %ptr_add_tmp12

else:                                             ; preds = %endif7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 dereferenceable(3) %.0, i8* nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), i64 3, i1 false)
  %ptr_add_tmp15 = getelementptr i8, i8* %.0, i64 3
  ret i8* %ptr_add_tmp15
}

define i64 @func.std.ryu.div10..1.builtin.uint64.builtin.uint64(i64 %0) {
alloca:
  %div_tmp = udiv i64 %0, 10
  ret i64 %div_tmp
}

define internal void @"func.std.ryu.d2d..2.builtin.uint64.builtin.uint32.struct.std::ryu::floating_decimal_64"(%"struct.std::ryu::floating_decimal_64"* noalias nocapture nonnull sret(%"struct.std::ryu::floating_decimal_64") %0, i64 %1, i32 %2) {
alloca:
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca %"struct.std::ryu::floating_decimal_64", align 8
  %6 = icmp eq i32 %2, 0
  %sub_tmp4 = add i32 %2, -1077
  %bit_or_tmp = or i64 %1, 4503599627370496
  %.0264 = select i1 %6, i32 -1076, i32 %sub_tmp4
  %unary_minus_tmp62 = sub i32 0, %.0264
  %storemerge = select i1 %6, i64 %1, i64 %bit_or_tmp
  %bit_and_tmp = and i64 %storemerge, 1
  %7 = icmp eq i64 %bit_and_tmp, 0
  %mul_tmp = shl i64 %storemerge, 2
  %.not = icmp ne i64 %1, 0
  %8 = icmp ult i32 %2, 2
  %spec.select = or i1 %.not, %8
  %cast_tmp = zext i1 %spec.select to i32
  store i64 0, i64* %3, align 8
  store i64 0, i64* %4, align 8
  %9 = icmp sgt i32 %.0264, -1
  br i1 %9, label %then12, label %else60

then12:                                           ; preds = %alloca
  %mul_tmp.i = mul i32 %.0264, 78913
  %rshift_tmp.i = lshr i32 %mul_tmp.i, 18
  %10 = icmp sgt i32 %.0264, 3
  %cast_tmp15.neg = sext i1 %10 to i32
  %sub_tmp16 = add nsw i32 %rshift_tmp.i, %cast_tmp15.neg
  %mul_tmp.i320 = mul i32 %sub_tmp16, 1217359
  %rshift_tmp.i321 = lshr i32 %mul_tmp.i320, 19
  %sub_tmp19 = sub i32 125, %.0264
  %add_tmp22 = add i32 %sub_tmp19, %sub_tmp16
  %add_tmp24 = add i32 %add_tmp22, %rshift_tmp.i321
  %11 = zext i32 %sub_tmp16 to i64
  %12 = getelementptr [342 x [2 x i64]], [342 x [2 x i64]]* @std.ryu.DOUBLE_POW5_INV_SPLIT, i64 0, i64 %11, i64 0
  %13 = call i64 @func.std.ryu.mulShiftAll64..6.builtin.uint64.0P.const.builtin.uint64.builtin.uint32.0P.builtin.uint64.0P.builtin.uint64.builtin.uint32.builtin.uint64(i64 %storemerge, i64* %12, i32 %add_tmp24, i64* nonnull %3, i64* nonnull %4, i32 %cast_tmp)
  %14 = icmp ult i32 %sub_tmp16, 22
  br i1 %14, label %then30, label %endif98

then30:                                           ; preds = %then12
  %cast_tmp32 = trunc i64 %mul_tmp to i32
  %div_tmp.i343 = udiv i64 %mul_tmp, 5
  %cast_tmp34 = trunc i64 %div_tmp.i343 to i32
  %mul_tmp35.neg = mul i32 %cast_tmp34, -5
  %sub_tmp36 = sub i32 0, %cast_tmp32
  %15 = icmp eq i32 %mul_tmp35.neg, %sub_tmp36
  br i1 %15, label %then38, label %else41

then38:                                           ; preds = %then30
  %mul_tmp.i.i335 = mul i64 %storemerge, 3689348814741910324
  br label %for_condition_check.i.i339

for_condition_check.i.i339:                       ; preds = %for.i.i341, %then38
  %.09.i.i336 = phi i32 [ 0, %then38 ], [ %16, %for.i.i341 ]
  %.0.i.i337 = phi i64 [ %mul_tmp.i.i335, %then38 ], [ %mul_tmp6.i.i340, %for.i.i341 ]
  %.not.i.i338 = icmp ugt i64 %.0.i.i337, 3689348814741910323
  br i1 %.not.i.i338, label %func.std.ryu.multipleOfPowerOf5..2.builtin.uint64.builtin.uint32.builtin.bool.exit342, label %for.i.i341

for.i.i341:                                       ; preds = %for_condition_check.i.i339
  %mul_tmp6.i.i340 = mul i64 %.0.i.i337, -3689348814741910323
  %16 = add i32 %.09.i.i336, 1
  br label %for_condition_check.i.i339

func.std.ryu.multipleOfPowerOf5..2.builtin.uint64.builtin.uint32.builtin.bool.exit342: ; preds = %for_condition_check.i.i339
  %17 = icmp uge i32 %.09.i.i336, %sub_tmp16
  br label %endif98

else41:                                           ; preds = %then30
  br i1 %7, label %then43, label %else50

then43:                                           ; preds = %else41
  %cast_tmp47 = zext i1 %spec.select to i64
  %18 = xor i64 %cast_tmp47, -1
  %sub_tmp48 = add i64 %mul_tmp, %18
  br label %for_condition_check.i.i331

for_condition_check.i.i331:                       ; preds = %for.i.i333, %then43
  %.09.i.i328 = phi i32 [ 0, %then43 ], [ %19, %for.i.i333 ]
  %.0.i.i329.in = phi i64 [ %sub_tmp48, %then43 ], [ %.0.i.i329, %for.i.i333 ]
  %.0.i.i329 = mul i64 %.0.i.i329.in, -3689348814741910323
  %.not.i.i330 = icmp ugt i64 %.0.i.i329, 3689348814741910323
  br i1 %.not.i.i330, label %func.std.ryu.multipleOfPowerOf5..2.builtin.uint64.builtin.uint32.builtin.bool.exit334, label %for.i.i333

for.i.i333:                                       ; preds = %for_condition_check.i.i331
  %19 = add i32 %.09.i.i328, 1
  br label %for_condition_check.i.i331

func.std.ryu.multipleOfPowerOf5..2.builtin.uint64.builtin.uint32.builtin.bool.exit334: ; preds = %for_condition_check.i.i331
  %20 = icmp uge i32 %.09.i.i328, %sub_tmp16
  br label %endif98

else50:                                           ; preds = %else41
  %add_tmp52 = or i64 %mul_tmp, 2
  br label %for_condition_check.i.i

for_condition_check.i.i:                          ; preds = %for.i.i, %else50
  %.09.i.i = phi i32 [ 0, %else50 ], [ %21, %for.i.i ]
  %.0.i.i.in = phi i64 [ %add_tmp52, %else50 ], [ %.0.i.i, %for.i.i ]
  %.0.i.i = mul i64 %.0.i.i.in, -3689348814741910323
  %.not.i.i = icmp ugt i64 %.0.i.i, 3689348814741910323
  br i1 %.not.i.i, label %func.std.ryu.multipleOfPowerOf5..2.builtin.uint64.builtin.uint32.builtin.bool.exit, label %for.i.i

for.i.i:                                          ; preds = %for_condition_check.i.i
  %21 = add i32 %.09.i.i, 1
  br label %for_condition_check.i.i

func.std.ryu.multipleOfPowerOf5..2.builtin.uint64.builtin.uint32.builtin.bool.exit: ; preds = %for_condition_check.i.i
  %22 = icmp uge i32 %.09.i.i, %sub_tmp16
  %cast_tmp54.neg = sext i1 %22 to i64
  %load_tmp55 = load i64, i64* %3, align 8
  %sub_tmp56 = add i64 %load_tmp55, %cast_tmp54.neg
  store i64 %sub_tmp56, i64* %3, align 8
  br label %endif98

else60:                                           ; preds = %alloca
  %mul_tmp.i325 = mul i32 %.0264, -732923
  %rshift_tmp.i326 = lshr i32 %mul_tmp.i325, 20
  %23 = icmp sgt i32 %unary_minus_tmp62, 1
  %cast_tmp65.neg = sext i1 %23 to i32
  %sub_tmp66 = add nsw i32 %rshift_tmp.i326, %cast_tmp65.neg
  %add_tmp69 = add i32 %sub_tmp66, %.0264
  %sub_tmp73 = sub i32 %unary_minus_tmp62, %sub_tmp66
  %mul_tmp.i322 = mul i32 %sub_tmp73, 1217359
  %rshift_tmp.i323 = lshr i32 %mul_tmp.i322, 19
  %sub_tmp75.neg = add nsw i32 %sub_tmp66, 124
  %sub_tmp78 = sub nsw i32 %sub_tmp75.neg, %rshift_tmp.i323
  %24 = sext i32 %sub_tmp73 to i64
  %25 = getelementptr [326 x [2 x i64]], [326 x [2 x i64]]* @std.ryu.DOUBLE_POW5_SPLIT, i64 0, i64 %24, i64 0
  %26 = call i64 @func.std.ryu.mulShiftAll64..6.builtin.uint64.0P.const.builtin.uint64.builtin.uint32.0P.builtin.uint64.0P.builtin.uint64.builtin.uint32.builtin.uint64(i64 %storemerge, i64* %25, i32 %sub_tmp78, i64* nonnull %3, i64* nonnull %4, i32 %cast_tmp)
  %27 = icmp ult i32 %sub_tmp66, 2
  br i1 %27, label %then84, label %else91

then84:                                           ; preds = %else60
  br i1 %7, label %endif98, label %else88

else88:                                           ; preds = %then84
  %load_tmp89 = load i64, i64* %3, align 8
  %28 = add i64 %load_tmp89, -1
  store i64 %28, i64* %3, align 8
  br label %endif98

else91:                                           ; preds = %else60
  %29 = icmp ult i32 %sub_tmp66, 63
  br i1 %29, label %then93, label %endif98

then93:                                           ; preds = %else91
  %30 = zext i32 %sub_tmp66 to i64
  %notmask.i = shl nsw i64 -1, %30
  %sub_tmp.i = xor i64 %notmask.i, -1
  %bit_and_tmp.i = and i64 %mul_tmp, %sub_tmp.i
  %31 = icmp eq i64 %bit_and_tmp.i, 0
  br label %endif98

endif98:                                          ; preds = %then84, %else88, %then93, %else91, %then12, %func.std.ryu.multipleOfPowerOf5..2.builtin.uint64.builtin.uint32.builtin.bool.exit334, %func.std.ryu.multipleOfPowerOf5..2.builtin.uint64.builtin.uint32.builtin.bool.exit, %func.std.ryu.multipleOfPowerOf5..2.builtin.uint64.builtin.uint32.builtin.bool.exit342
  %.4281 = phi i1 [ false, %then12 ], [ %17, %func.std.ryu.multipleOfPowerOf5..2.builtin.uint64.builtin.uint32.builtin.bool.exit342 ], [ false, %func.std.ryu.multipleOfPowerOf5..2.builtin.uint64.builtin.uint32.builtin.bool.exit ], [ false, %func.std.ryu.multipleOfPowerOf5..2.builtin.uint64.builtin.uint32.builtin.bool.exit334 ], [ true, %else88 ], [ %31, %then93 ], [ false, %else91 ], [ true, %then84 ]
  %.5276 = phi i1 [ false, %then12 ], [ false, %func.std.ryu.multipleOfPowerOf5..2.builtin.uint64.builtin.uint32.builtin.bool.exit342 ], [ false, %func.std.ryu.multipleOfPowerOf5..2.builtin.uint64.builtin.uint32.builtin.bool.exit ], [ %20, %func.std.ryu.multipleOfPowerOf5..2.builtin.uint64.builtin.uint32.builtin.bool.exit334 ], [ false, %else88 ], [ false, %then93 ], [ false, %else91 ], [ %spec.select, %then84 ]
  %.0270 = phi i32 [ %sub_tmp16, %then12 ], [ %sub_tmp16, %func.std.ryu.multipleOfPowerOf5..2.builtin.uint64.builtin.uint32.builtin.bool.exit342 ], [ %sub_tmp16, %func.std.ryu.multipleOfPowerOf5..2.builtin.uint64.builtin.uint32.builtin.bool.exit ], [ %sub_tmp16, %func.std.ryu.multipleOfPowerOf5..2.builtin.uint64.builtin.uint32.builtin.bool.exit334 ], [ %add_tmp69, %else88 ], [ %add_tmp69, %then93 ], [ %add_tmp69, %else91 ], [ %add_tmp69, %then84 ]
  %.0268 = phi i64 [ %13, %then12 ], [ %13, %func.std.ryu.multipleOfPowerOf5..2.builtin.uint64.builtin.uint32.builtin.bool.exit342 ], [ %13, %func.std.ryu.multipleOfPowerOf5..2.builtin.uint64.builtin.uint32.builtin.bool.exit ], [ %13, %func.std.ryu.multipleOfPowerOf5..2.builtin.uint64.builtin.uint32.builtin.bool.exit334 ], [ %26, %else88 ], [ %26, %then93 ], [ %26, %else91 ], [ %26, %then84 ]
  %spec.select296 = or i1 %.4281, %.5276
  br i1 %spec.select296, label %then104, label %else204

then104:                                          ; preds = %endif98
  %load_tmp105 = load i64, i64* %3, align 8
  %.0284.in.pre = load i64, i64* %4, align 8
  br label %for_condition_check

for_condition_check:                              ; preds = %for, %then104
  %load_tmp109 = phi i64 [ %.0284.in.pre, %then104 ], [ %.0284, %for ]
  %.0292 = phi i8 [ 0, %then104 ], [ %sub_tmp121, %for ]
  %.0286 = phi i32 [ 0, %then104 ], [ %35, %for ]
  %.0285.in = phi i64 [ %load_tmp105, %then104 ], [ %.0285, %for ]
  %.5282 = phi i1 [ %.4281, %then104 ], [ %bit_and_tmp128, %for ]
  %.6 = phi i1 [ %.5276, %then104 ], [ %bit_and_tmp124, %for ]
  %.1269 = phi i64 [ %.0268, %then104 ], [ %div_tmp.i317, %for ]
  %.0284 = udiv i64 %load_tmp109, 10
  %.0285 = udiv i64 %.0285.in, 10
  %32 = icmp ugt i64 %.0285, %.0284
  br i1 %32, label %for, label %endfor

for:                                              ; preds = %for_condition_check
  %cast_tmp110 = trunc i64 %load_tmp109 to i32
  %cast_tmp112 = trunc i64 %.0284 to i32
  %mul_tmp113.neg = mul i32 %cast_tmp112, -10
  %div_tmp.i317 = udiv i64 %.1269, 10
  %cast_tmp117 = trunc i64 %.1269 to i8
  %cast_tmp119 = trunc i64 %div_tmp.i317 to i8
  %mul_tmp120.neg = mul i8 %cast_tmp119, -10
  %sub_tmp121 = add i8 %mul_tmp120.neg, %cast_tmp117
  %sub_tmp114 = sub i32 0, %cast_tmp110
  %33 = icmp eq i32 %mul_tmp113.neg, %sub_tmp114
  %bit_and_tmp124 = and i1 %33, %.6
  %34 = icmp eq i8 %.0292, 0
  %bit_and_tmp128 = and i1 %34, %.5282
  store i64 %.0285, i64* %3, align 8
  store i64 %.0284, i64* %4, align 8
  %35 = add i32 %.0286, 1
  br label %for_condition_check

endfor:                                           ; preds = %for_condition_check
  br i1 %.6, label %then138, label %endif175

then138:                                          ; preds = %endfor
  %cast_tmp141 = trunc i64 %load_tmp109 to i32
  %cast_tmp143 = trunc i64 %.0284 to i32
  %mul_tmp144.neg = mul i32 %cast_tmp143, -10
  %sub_tmp145 = add i32 %mul_tmp144.neg, %cast_tmp141
  br label %for_condition_check146

for_condition_check146:                           ; preds = %for148, %then138
  %load_tmp149 = phi i64 [ %.0285.in, %then138 ], [ %div_tmp.i313, %for148 ]
  %load_tmp187303 = phi i64 [ %load_tmp109, %then138 ], [ %.0267, %for148 ]
  %.1293 = phi i8 [ %.0292, %then138 ], [ %sub_tmp156, %for148 ]
  %.1287 = phi i32 [ %.0286, %then138 ], [ %38, %for148 ]
  %.6283 = phi i1 [ %.5282, %then138 ], [ %bit_and_tmp160, %for148 ]
  %.2 = phi i64 [ %.1269, %then138 ], [ %div_tmp.i312, %for148 ]
  %.0267 = phi i64 [ %.0284, %then138 ], [ %div_tmp.i311, %for148 ]
  %.0266 = phi i32 [ %sub_tmp145, %then138 ], [ %sub_tmp172, %for148 ]
  %36 = icmp eq i32 %.0266, 0
  br i1 %36, label %for148, label %endif175

for148:                                           ; preds = %for_condition_check146
  %div_tmp.i313 = udiv i64 %load_tmp149, 10
  %div_tmp.i312 = udiv i64 %.2, 10
  %cast_tmp152 = trunc i64 %.2 to i8
  %cast_tmp154 = trunc i64 %div_tmp.i312 to i8
  %mul_tmp155.neg = mul i8 %cast_tmp154, -10
  %sub_tmp156 = add i8 %mul_tmp155.neg, %cast_tmp152
  %37 = icmp eq i8 %.1293, 0
  %bit_and_tmp160 = and i1 %37, %.6283
  store i64 %div_tmp.i313, i64* %3, align 8
  store i64 %.0267, i64* %4, align 8
  %div_tmp.i311 = udiv i64 %.0267, 10
  %cast_tmp168 = trunc i64 %.0267 to i32
  %cast_tmp170 = trunc i64 %div_tmp.i311 to i32
  %mul_tmp171.neg = mul i32 %cast_tmp170, -10
  %sub_tmp172 = add i32 %mul_tmp171.neg, %cast_tmp168
  %38 = add i32 %.1287, 1
  br label %for_condition_check146

endif175:                                         ; preds = %endfor, %for_condition_check146
  %load_tmp187 = phi i64 [ %load_tmp187303, %for_condition_check146 ], [ %load_tmp109, %endfor ]
  %.2294 = phi i8 [ %.1293, %for_condition_check146 ], [ %.0292, %endfor ]
  %.2288 = phi i32 [ %.1287, %for_condition_check146 ], [ %.0286, %endfor ]
  %.7 = phi i1 [ %.6283, %for_condition_check146 ], [ %.5282, %endfor ]
  %.3 = phi i64 [ %.2, %for_condition_check146 ], [ %.1269, %endfor ]
  %39 = icmp eq i8 %.2294, 5
  %spec.select297 = and i1 %39, %.7
  %mod_tmp = and i64 %.3, 1
  %40 = icmp eq i64 %mod_tmp, 0
  %bool_and_tmp182 = and i1 %spec.select297, %40
  %41 = icmp ne i64 %.3, %load_tmp187
  %spec.select299.demorgan = and i1 %7, %.6
  %42 = or i1 %spec.select299.demorgan, %41
  %43 = icmp ugt i8 %.2294, 4
  %44 = xor i1 %43, %bool_and_tmp182
  %not. = xor i1 %42, true
  %narrow345 = or i1 %44, %not.
  %bool_or_tmp201 = zext i1 %narrow345 to i64
  %add_tmp203 = add i64 %.3, %bool_or_tmp201
  br label %endif254

else204:                                          ; preds = %endif98
  %load_tmp205 = load i64, i64* %3, align 8
  %div_tmp.i310 = udiv i64 %load_tmp205, 100
  %load_tmp206 = load i64, i64* %4, align 8
  %div_tmp.i309 = udiv i64 %load_tmp206, 100
  %45 = icmp ugt i64 %div_tmp.i310, %div_tmp.i309
  br i1 %45, label %then209, label %endif223

then209:                                          ; preds = %else204
  %div_tmp.i308 = udiv i64 %.0268, 100
  %cast_tmp212 = trunc i64 %.0268 to i32
  %cast_tmp214 = trunc i64 %div_tmp.i308 to i32
  %mul_tmp215.neg = mul i32 %cast_tmp214, -100
  %sub_tmp216 = add i32 %mul_tmp215.neg, %cast_tmp212
  %46 = icmp ugt i32 %sub_tmp216, 49
  store i64 %div_tmp.i310, i64* %3, align 8
  store i64 %div_tmp.i309, i64* %4, align 8
  br label %endif223

endif223:                                         ; preds = %else204, %then209
  %.0.in347 = phi i64 [ %div_tmp.i309, %then209 ], [ %load_tmp206, %else204 ]
  %load_tmp224 = phi i64 [ %div_tmp.i310, %then209 ], [ %load_tmp205, %else204 ]
  %.3289 = phi i32 [ 2, %then209 ], [ 0, %else204 ]
  %.4 = phi i64 [ %div_tmp.i308, %then209 ], [ %.0268, %else204 ]
  %.0265 = phi i1 [ %46, %then209 ], [ false, %else204 ]
  br label %for_condition_check226

for_condition_check226:                           ; preds = %for229, %endif223
  %load_tmp247 = phi i64 [ %.0.in347, %endif223 ], [ %.0, %for229 ]
  %.4290 = phi i32 [ %.3289, %endif223 ], [ %49, %for229 ]
  %.5 = phi i64 [ %.4, %endif223 ], [ %div_tmp.i305, %for229 ]
  %.1 = phi i1 [ %.0265, %endif223 ], [ %48, %for229 ]
  %.0263.in = phi i64 [ %load_tmp224, %endif223 ], [ %.0263, %for229 ]
  %.0 = udiv i64 %load_tmp247, 10
  %.0263 = udiv i64 %.0263.in, 10
  %47 = icmp ugt i64 %.0263, %.0
  br i1 %47, label %for229, label %endfor244

for229:                                           ; preds = %for_condition_check226
  %div_tmp.i305 = udiv i64 %.5, 10
  %cast_tmp232 = trunc i64 %.5 to i32
  %cast_tmp234 = trunc i64 %div_tmp.i305 to i32
  %mul_tmp235.neg = mul i32 %cast_tmp234, -10
  %sub_tmp236 = add i32 %mul_tmp235.neg, %cast_tmp232
  %48 = icmp ugt i32 %sub_tmp236, 4
  store i64 %.0263, i64* %3, align 8
  store i64 %.0, i64* %4, align 8
  %49 = add i32 %.4290, 1
  br label %for_condition_check226

endfor244:                                        ; preds = %for_condition_check226
  %50 = icmp eq i64 %.5, %load_tmp247
  %narrow = or i1 %50, %.1
  %spec.select300 = zext i1 %narrow to i64
  %add_tmp253 = add i64 %.5, %spec.select300
  br label %endif254

endif254:                                         ; preds = %endfor244, %endif175
  %.5291 = phi i32 [ %.2288, %endif175 ], [ %.4290, %endfor244 ]
  %storemerge261 = phi i64 [ %add_tmp203, %endif175 ], [ %add_tmp253, %endfor244 ]
  %add_tmp257 = add i32 %.5291, %.0270
  store %"struct.std::ryu::floating_decimal_64" zeroinitializer, %"struct.std::ryu::floating_decimal_64"* %5, align 8
  %51 = getelementptr inbounds %"struct.std::ryu::floating_decimal_64", %"struct.std::ryu::floating_decimal_64"* %5, i64 0, i32 1
  store i32 %add_tmp257, i32* %51, align 8
  %52 = getelementptr inbounds %"struct.std::ryu::floating_decimal_64", %"struct.std::ryu::floating_decimal_64"* %5, i64 0, i32 0
  store i64 %storemerge261, i64* %52, align 8
  %load_tmp260 = load %"struct.std::ryu::floating_decimal_64", %"struct.std::ryu::floating_decimal_64"* %5, align 8
  store %"struct.std::ryu::floating_decimal_64" %load_tmp260, %"struct.std::ryu::floating_decimal_64"* %0, align 8
  ret void
}

define i8* @f2s_short(float %0, i8* %1) {
alloca:
  %2 = call i8* @func.std.ryu.f2s_shortest..2.builtin.float32.0P.builtin.uint8.0P.builtin.uint8(float %0, i8* %1)
  ret i8* %2
}

define i8* @func.std.ryu.f2s_shortest..2.builtin.float32.0P.builtin.uint8.0P.builtin.uint8(float %0, i8* %1) {
alloca:
  %load_tmp.cast.i = bitcast float %0 to i32
  %2 = icmp slt i32 %load_tmp.cast.i, 0
  %bit_and_tmp3 = and i32 %load_tmp.cast.i, 8388607
  %rshift_tmp5 = lshr i32 %load_tmp.cast.i, 23
  %bit_and_tmp6 = and i32 %rshift_tmp5, 255
  %trunc = trunc i32 %rshift_tmp5 to i8
  switch i8 %trunc, label %endif [
    i8 -1, label %then
    i8 0, label %bool_and_rhs
  ]

bool_and_rhs:                                     ; preds = %alloca
  %3 = icmp eq i32 %bit_and_tmp3, 0
  br i1 %3, label %then, label %endif

then:                                             ; preds = %alloca, %bool_and_rhs
  %.not = icmp eq i32 %bit_and_tmp6, 0
  %.not22 = icmp eq i32 %bit_and_tmp3, 0
  br i1 %.not22, label %endif.i19, label %then.i18

then.i18:                                         ; preds = %then
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 dereferenceable(3) %1, i8* nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i64 3, i1 false)
  %ptr_add_tmp.i = getelementptr i8, i8* %1, i64 3
  br label %func.std.ryu.copy_short_special_str..4.0P.builtin.uint8.builtin.bool.builtin.bool.builtin.bool.0P.builtin.uint8.exit

endif.i19:                                        ; preds = %then
  br i1 %2, label %then4.i, label %endif7.i

then4.i:                                          ; preds = %endif.i19
  store i8 45, i8* %1, align 1
  %4 = getelementptr i8, i8* %1, i64 1
  br label %endif7.i

endif7.i:                                         ; preds = %then4.i, %endif.i19
  %.0.i20 = phi i8* [ %4, %then4.i ], [ %1, %endif.i19 ]
  br i1 %.not, label %else.i21, label %then9.i

then9.i:                                          ; preds = %endif7.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 dereferenceable(3) %.0.i20, i8* nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0), i64 3, i1 false)
  %ptr_add_tmp12.i = getelementptr i8, i8* %.0.i20, i64 3
  br label %func.std.ryu.copy_short_special_str..4.0P.builtin.uint8.builtin.bool.builtin.bool.builtin.bool.0P.builtin.uint8.exit

else.i21:                                         ; preds = %endif7.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 dereferenceable(3) %.0.i20, i8* nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), i64 3, i1 false)
  %ptr_add_tmp15.i = getelementptr i8, i8* %.0.i20, i64 3
  br label %func.std.ryu.copy_short_special_str..4.0P.builtin.uint8.builtin.bool.builtin.bool.builtin.bool.0P.builtin.uint8.exit

func.std.ryu.copy_short_special_str..4.0P.builtin.uint8.builtin.bool.builtin.bool.builtin.bool.0P.builtin.uint8.exit: ; preds = %"func.std.ryu.to_chars_scientific..2.struct.std::ryu::floating_decimal_32.0P.builtin.uint8.0P.builtin.uint8.exit.i", %then97.i.i, %endif91.i.i, %else.i21, %then9.i, %then.i18
  %5 = phi i8* [ %ptr_add_tmp.i, %then.i18 ], [ %ptr_add_tmp12.i, %then9.i ], [ %ptr_add_tmp15.i, %else.i21 ], [ %ptr_add_tmp92.i.i, %"func.std.ryu.to_chars_scientific..2.struct.std::ryu::floating_decimal_32.0P.builtin.uint8.0P.builtin.uint8.exit.i" ], [ %66, %then97.i.i ], [ %ptr_add_tmp95.i.i, %endif91.i.i ]
  ret i8* %5

endif:                                            ; preds = %alloca, %bool_and_rhs
  %6 = call i64 @"func.std.ryu.f2d..2.builtin.uint32.builtin.uint32.struct.std::ryu::floating_decimal_32"(i32 %bit_and_tmp3, i32 %bit_and_tmp6)
  %7 = trunc i64 %6 to i32
  %8 = lshr i64 %6, 32
  %9 = trunc i64 %8 to i32
  br i1 %2, label %then.i, label %endif.i

then.i:                                           ; preds = %endif
  store i8 45, i8* %1, align 1
  %10 = getelementptr i8, i8* %1, i64 1
  br label %endif.i

endif.i:                                          ; preds = %then.i, %endif
  %.0.i = phi i8* [ %10, %then.i ], [ %1, %endif ]
  %11 = icmp ugt i32 %7, 99999999
  br i1 %11, label %func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i, label %else.i.i

else.i.i:                                         ; preds = %endif.i
  %12 = icmp ugt i32 %7, 9999999
  br i1 %12, label %func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i, label %else3.i.i

else3.i.i:                                        ; preds = %else.i.i
  %13 = icmp ugt i32 %7, 999999
  br i1 %13, label %func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i, label %else6.i.i

else6.i.i:                                        ; preds = %else3.i.i
  %14 = icmp ugt i32 %7, 99999
  br i1 %14, label %func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i, label %else9.i.i

else9.i.i:                                        ; preds = %else6.i.i
  %15 = icmp ugt i32 %7, 9999
  br i1 %15, label %func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i, label %else12.i.i

else12.i.i:                                       ; preds = %else9.i.i
  %16 = icmp ugt i32 %7, 999
  br i1 %16, label %func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i, label %else15.i.i

else15.i.i:                                       ; preds = %else12.i.i
  %17 = icmp ugt i32 %7, 99
  br i1 %17, label %func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i, label %else18.i.i

else18.i.i:                                       ; preds = %else15.i.i
  %18 = icmp ugt i32 %7, 9
  %19 = select i1 %18, i32 2, i32 1
  br label %func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i

func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i: ; preds = %else18.i.i, %else15.i.i, %else12.i.i, %else9.i.i, %else6.i.i, %else3.i.i, %else.i.i, %endif.i
  %20 = phi i32 [ 9, %endif.i ], [ 8, %else.i.i ], [ 7, %else3.i.i ], [ 6, %else6.i.i ], [ 5, %else9.i.i ], [ 4, %else12.i.i ], [ 3, %else15.i.i ], [ %19, %else18.i.i ]
  %sub_tmp.i = add i32 %9, -1
  %add_tmp.i = add i32 %9, 3
  %add_tmp.i.off = add i32 %add_tmp.i, %20
  %21 = icmp ult i32 %add_tmp.i.off, 11
  br i1 %21, label %then8.i, label %else.i

then8.i:                                          ; preds = %func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i
  br i1 %11, label %func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i20.i, label %else.i.i12.i

else.i.i12.i:                                     ; preds = %then8.i
  %22 = icmp ugt i32 %7, 9999999
  br i1 %22, label %func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i20.i, label %else3.i.i13.i

else3.i.i13.i:                                    ; preds = %else.i.i12.i
  %23 = icmp ugt i32 %7, 999999
  br i1 %23, label %func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i20.i, label %else6.i.i14.i

else6.i.i14.i:                                    ; preds = %else3.i.i13.i
  %24 = icmp ugt i32 %7, 99999
  br i1 %24, label %func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i20.i, label %else9.i.i15.i

else9.i.i15.i:                                    ; preds = %else6.i.i14.i
  %25 = icmp ugt i32 %7, 9999
  br i1 %25, label %func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i20.i, label %else12.i.i16.i

else12.i.i16.i:                                   ; preds = %else9.i.i15.i
  %26 = icmp ugt i32 %7, 999
  br i1 %26, label %func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i20.i, label %else15.i.i17.i

else15.i.i17.i:                                   ; preds = %else12.i.i16.i
  %27 = icmp ugt i32 %7, 99
  br i1 %27, label %func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i20.i, label %else18.i.i18.i

else18.i.i18.i:                                   ; preds = %else15.i.i17.i
  %28 = icmp ugt i32 %7, 9
  %29 = select i1 %28, i32 2, i32 1
  br label %func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i20.i

func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i20.i: ; preds = %else18.i.i18.i, %else15.i.i17.i, %else12.i.i16.i, %else9.i.i15.i, %else6.i.i14.i, %else3.i.i13.i, %else.i.i12.i, %then8.i
  %30 = phi i32 [ 9, %then8.i ], [ 8, %else.i.i12.i ], [ 7, %else3.i.i13.i ], [ 6, %else6.i.i14.i ], [ 5, %else9.i.i15.i ], [ 4, %else12.i.i16.i ], [ 3, %else15.i.i17.i ], [ %29, %else18.i.i18.i ]
  %add_tmp.i19.i = add i32 %30, %sub_tmp.i
  %31 = icmp slt i32 %add_tmp.i19.i, 0
  br i1 %31, label %then.i23.i, label %endif.i25.i

then.i23.i:                                       ; preds = %func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i20.i
  %add_tmp7.i.i = sub i32 1, %add_tmp.i19.i
  %cast_tmp.i21.i = sext i32 %add_tmp7.i.i to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %.0.i, i8* align 1 getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11, i64 0, i64 0), i64 %cast_tmp.i21.i, i1 false)
  %unary_minus_tmp9.i.i = sub i32 0, %add_tmp.i19.i
  %32 = sext i32 %unary_minus_tmp9.i.i to i64
  %ptr_add_tmp.i22.i = getelementptr i8, i8* %.0.i, i64 %32
  br label %endif.i25.i

endif.i25.i:                                      ; preds = %then.i23.i, %func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i20.i
  %.0.i24.i = phi i8* [ %ptr_add_tmp.i22.i, %then.i23.i ], [ %.0.i, %func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i20.i ]
  br label %while_condition_check.i27.i

while_condition_check.i27.i:                      ; preds = %while.i31.i, %endif.i25.i
  %.0105.i.i = phi i32 [ %7, %endif.i25.i ], [ %div_tmp16.i.i, %while.i31.i ]
  %storemerge.i26.i = phi i32 [ 0, %endif.i25.i ], [ %add_tmp37.i.i, %while.i31.i ]
  %33 = icmp ugt i32 %.0105.i.i, 9999
  br i1 %33, label %while.i31.i, label %endwhile.i32.i

while.i31.i:                                      ; preds = %while_condition_check.i27.i
  %34 = urem i32 %.0105.i.i, 10000
  %div_tmp16.i.i = udiv i32 %.0105.i.i, 10000
  %mod_tmp.i28.i = urem i32 %34, 100
  %lshift_tmp.i29.i = shl nuw nsw i32 %mod_tmp.i28.i, 1
  %div_tmp19.i.i = udiv i32 %34, 100
  %lshift_tmp20.i.i = shl nuw nsw i32 %div_tmp19.i.i, 1
  %35 = zext i32 %30 to i64
  %ptr_add_tmp23.i.i = getelementptr i8, i8* %.0.i24.i, i64 -1
  %36 = zext i32 %storemerge.i26.i to i64
  %37 = sub nsw i64 0, %36
  %ptr_sub_tmp.i30.i = getelementptr i8, i8* %ptr_add_tmp23.i.i, i64 %35
  %ptr_sub_tmp25.i.i = getelementptr i8, i8* %ptr_sub_tmp.i30.i, i64 %37
  %38 = zext i32 %lshift_tmp.i29.i to i64
  %ptr_add_tmp27.i.i = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %38
  %39 = bitcast i8* %ptr_add_tmp27.i.i to i16*
  %40 = bitcast i8* %ptr_sub_tmp25.i.i to i16*
  %41 = load i16, i16* %39, align 2
  store i16 %41, i16* %40, align 1
  %ptr_add_tmp30.i.i = getelementptr i8, i8* %.0.i24.i, i64 -3
  %ptr_sub_tmp32.i.i = getelementptr i8, i8* %ptr_add_tmp30.i.i, i64 %35
  %ptr_sub_tmp33.i.i = getelementptr i8, i8* %ptr_sub_tmp32.i.i, i64 %37
  %42 = zext i32 %lshift_tmp20.i.i to i64
  %ptr_add_tmp35.i.i = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %42
  %43 = bitcast i8* %ptr_add_tmp35.i.i to i16*
  %44 = bitcast i8* %ptr_sub_tmp33.i.i to i16*
  %45 = load i16, i16* %43, align 2
  store i16 %45, i16* %44, align 1
  %add_tmp37.i.i = add i32 %storemerge.i26.i, 4
  br label %while_condition_check.i27.i

endwhile.i32.i:                                   ; preds = %while_condition_check.i27.i
  %46 = icmp ugt i32 %.0105.i.i, 99
  br i1 %46, label %then39.i.i, label %endif55.i.i

then39.i.i:                                       ; preds = %endwhile.i32.i
  %mod_tmp41.i.i = urem i32 %.0105.i.i, 100
  %lshift_tmp42.i.i = shl nuw nsw i32 %mod_tmp41.i.i, 1
  %div_tmp44.i.i = udiv i32 %.0105.i.i, 100
  %47 = zext i32 %30 to i64
  %ptr_add_tmp47.i.i = getelementptr i8, i8* %.0.i24.i, i64 %47
  %48 = zext i32 %storemerge.i26.i to i64
  %49 = sub nsw i64 0, %48
  %ptr_sub_tmp49.i.i = getelementptr i8, i8* %ptr_add_tmp47.i.i, i64 %49
  %ptr_sub_tmp50.i.i = getelementptr i8, i8* %ptr_sub_tmp49.i.i, i64 -1
  %50 = zext i32 %lshift_tmp42.i.i to i64
  %ptr_add_tmp52.i.i = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %50
  %51 = bitcast i8* %ptr_add_tmp52.i.i to i16*
  %52 = bitcast i8* %ptr_sub_tmp50.i.i to i16*
  %53 = load i16, i16* %51, align 2
  store i16 %53, i16* %52, align 1
  br label %endif55.i.i

endif55.i.i:                                      ; preds = %then39.i.i, %endwhile.i32.i
  %.1106.i.i = phi i32 [ %div_tmp44.i.i, %then39.i.i ], [ %.0105.i.i, %endwhile.i32.i ]
  %54 = icmp ugt i32 %.1106.i.i, 9
  br i1 %54, label %then57.i.i, label %else.i34.i

then57.i.i:                                       ; preds = %endif55.i.i
  %lshift_tmp59.i.i = shl i32 %.1106.i.i, 1
  %ptr_add_tmp61.i.i = getelementptr i8, i8* %.0.i24.i, i64 1
  %55 = zext i32 %lshift_tmp59.i.i to i64
  %ptr_add_tmp63.i.i = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %55
  %56 = bitcast i8* %ptr_add_tmp63.i.i to i16*
  %57 = bitcast i8* %ptr_add_tmp61.i.i to i16*
  %58 = load i16, i16* %56, align 2
  store i16 %58, i16* %57, align 1
  br label %endif69.i.i

else.i34.i:                                       ; preds = %endif55.i.i
  %59 = trunc i32 %.1106.i.i to i8
  %cast_tmp66.i.i = add i8 %59, 48
  %ptr_add_tmp68.i33.i = getelementptr i8, i8* %.0.i24.i, i64 1
  store i8 %cast_tmp66.i.i, i8* %ptr_add_tmp68.i33.i, align 1
  br label %endif69.i.i

endif69.i.i:                                      ; preds = %else.i34.i, %then57.i.i
  %60 = icmp sgt i32 %9, -1
  br i1 %60, label %then71.i.i, label %endif78.i.i

then71.i.i:                                       ; preds = %endif69.i.i
  %61 = zext i32 %30 to i64
  %ptr_add_tmp74.i.i = getelementptr i8, i8* %.0.i24.i, i64 %61
  %ptr_add_tmp75.i.i = getelementptr i8, i8* %ptr_add_tmp74.i.i, i64 1
  %cast_tmp77.i.i = ashr i64 %6, 32
  call void @llvm.memset.p0i8.i64(i8* align 1 %ptr_add_tmp75.i.i, i8 48, i64 %cast_tmp77.i.i, i1 false)
  br label %endif78.i.i

endif78.i.i:                                      ; preds = %then71.i.i, %endif69.i.i
  %62 = icmp sgt i32 %add_tmp.i19.i, -1
  br i1 %62, label %then80.i.i, label %endif91.i.i

then80.i.i:                                       ; preds = %endif78.i.i
  %ptr_add_tmp83.i.i = getelementptr i8, i8* %.0.i24.i, i64 1
  %add_tmp85.i.i = add i32 %30, %9
  %cast_tmp86.i.i = sext i32 %add_tmp85.i.i to i64
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %.0.i24.i, i8* align 1 %ptr_add_tmp83.i.i, i64 %cast_tmp86.i.i, i1 false)
  %63 = sext i32 %add_tmp.i19.i to i64
  %ptr_add_tmp89.i.i = getelementptr i8, i8* %.0.i24.i, i64 %63
  %ptr_add_tmp90.i35.i = getelementptr i8, i8* %ptr_add_tmp89.i.i, i64 1
  store i8 46, i8* %ptr_add_tmp90.i35.i, align 1
  br label %endif91.i.i

endif91.i.i:                                      ; preds = %then80.i.i, %endif78.i.i
  %add_tmp93.i.i = add nuw nsw i32 %30, 1
  %64 = zext i32 %add_tmp93.i.i to i64
  %ptr_add_tmp95.i.i = getelementptr i8, i8* %.0.i24.i, i64 %64
  br i1 %60, label %then97.i.i, label %func.std.ryu.copy_short_special_str..4.0P.builtin.uint8.builtin.bool.builtin.bool.builtin.bool.0P.builtin.uint8.exit

then97.i.i:                                       ; preds = %endif91.i.i
  %65 = ashr i64 %6, 32
  %ptr_add_tmp100.i.i = getelementptr i8, i8* %ptr_add_tmp95.i.i, i64 %65
  store i8 48, i8* %ptr_add_tmp100.i.i, align 1
  %66 = getelementptr i8, i8* %ptr_add_tmp100.i.i, i64 1
  br label %func.std.ryu.copy_short_special_str..4.0P.builtin.uint8.builtin.bool.builtin.bool.builtin.bool.0P.builtin.uint8.exit

else.i:                                           ; preds = %func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i
  br i1 %11, label %func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i.i, label %else.i.i.i

else.i.i.i:                                       ; preds = %else.i
  %67 = icmp ugt i32 %7, 9999999
  br i1 %67, label %func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i.i, label %else3.i.i.i

else3.i.i.i:                                      ; preds = %else.i.i.i
  %68 = icmp ugt i32 %7, 999999
  br i1 %68, label %func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i.i, label %else6.i.i.i

else6.i.i.i:                                      ; preds = %else3.i.i.i
  %69 = icmp ugt i32 %7, 99999
  br i1 %69, label %func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i.i, label %else9.i.i.i

else9.i.i.i:                                      ; preds = %else6.i.i.i
  %70 = icmp ugt i32 %7, 9999
  br i1 %70, label %func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i.i, label %else12.i.i.i

else12.i.i.i:                                     ; preds = %else9.i.i.i
  %71 = icmp ugt i32 %7, 999
  br i1 %71, label %func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i.i, label %else15.i.i.i

else15.i.i.i:                                     ; preds = %else12.i.i.i
  %72 = icmp ugt i32 %7, 99
  br i1 %72, label %func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i.i, label %else18.i.i.i

else18.i.i.i:                                     ; preds = %else15.i.i.i
  %73 = icmp ugt i32 %7, 9
  %74 = select i1 %73, i32 2, i32 1
  br label %func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i.i

func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i.i: ; preds = %else18.i.i.i, %else15.i.i.i, %else12.i.i.i, %else9.i.i.i, %else6.i.i.i, %else3.i.i.i, %else.i.i.i, %else.i
  %75 = phi i32 [ 9, %else.i ], [ 8, %else.i.i.i ], [ 7, %else3.i.i.i ], [ 6, %else6.i.i.i ], [ 5, %else9.i.i.i ], [ 4, %else12.i.i.i ], [ 3, %else15.i.i.i ], [ %74, %else18.i.i.i ]
  br label %while_condition_check.i.i

while_condition_check.i.i:                        ; preds = %while.i.i, %func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i.i
  %.0.i.i = phi i32 [ %7, %func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i.i ], [ %div_tmp6.i.i, %while.i.i ]
  %storemerge.i.i = phi i32 [ 0, %func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i.i ], [ %add_tmp.i.i, %while.i.i ]
  %76 = icmp ugt i32 %.0.i.i, 9999
  br i1 %76, label %while.i.i, label %endwhile.i.i

while.i.i:                                        ; preds = %while_condition_check.i.i
  %77 = urem i32 %.0.i.i, 10000
  %div_tmp6.i.i = udiv i32 %.0.i.i, 10000
  %mod_tmp.i.i = urem i32 %77, 100
  %lshift_tmp.i.i = shl nuw nsw i32 %mod_tmp.i.i, 1
  %div_tmp9.i.i = udiv i32 %77, 100
  %lshift_tmp10.i.i = shl nuw nsw i32 %div_tmp9.i.i, 1
  %78 = zext i32 %75 to i64
  %ptr_add_tmp.i.i = getelementptr i8, i8* %.0.i, i64 -1
  %79 = zext i32 %storemerge.i.i to i64
  %80 = sub nsw i64 0, %79
  %ptr_sub_tmp.i.i = getelementptr i8, i8* %ptr_add_tmp.i.i, i64 %78
  %ptr_sub_tmp14.i.i = getelementptr i8, i8* %ptr_sub_tmp.i.i, i64 %80
  %81 = zext i32 %lshift_tmp.i.i to i64
  %ptr_add_tmp16.i.i = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %81
  %82 = bitcast i8* %ptr_add_tmp16.i.i to i16*
  %83 = bitcast i8* %ptr_sub_tmp14.i.i to i16*
  %84 = load i16, i16* %82, align 2
  store i16 %84, i16* %83, align 1
  %ptr_add_tmp19.i.i = getelementptr i8, i8* %.0.i, i64 -3
  %ptr_sub_tmp21.i.i = getelementptr i8, i8* %ptr_add_tmp19.i.i, i64 %78
  %ptr_sub_tmp22.i.i = getelementptr i8, i8* %ptr_sub_tmp21.i.i, i64 %80
  %85 = zext i32 %lshift_tmp10.i.i to i64
  %ptr_add_tmp24.i.i = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %85
  %86 = bitcast i8* %ptr_add_tmp24.i.i to i16*
  %87 = bitcast i8* %ptr_sub_tmp22.i.i to i16*
  %88 = load i16, i16* %86, align 2
  store i16 %88, i16* %87, align 1
  %add_tmp.i.i = add i32 %storemerge.i.i, 4
  br label %while_condition_check.i.i

endwhile.i.i:                                     ; preds = %while_condition_check.i.i
  %89 = icmp ugt i32 %.0.i.i, 99
  br i1 %89, label %then.i.i, label %endif.i.i

then.i.i:                                         ; preds = %endwhile.i.i
  %mod_tmp28.i.i = urem i32 %.0.i.i, 100
  %lshift_tmp29.i.i = shl nuw nsw i32 %mod_tmp28.i.i, 1
  %div_tmp31.i.i = udiv i32 %.0.i.i, 100
  %90 = zext i32 %75 to i64
  %ptr_add_tmp34.i.i = getelementptr i8, i8* %.0.i, i64 %90
  %91 = zext i32 %storemerge.i.i to i64
  %92 = sub nsw i64 0, %91
  %ptr_sub_tmp36.i.i = getelementptr i8, i8* %ptr_add_tmp34.i.i, i64 %92
  %ptr_sub_tmp37.i.i = getelementptr i8, i8* %ptr_sub_tmp36.i.i, i64 -1
  %93 = zext i32 %lshift_tmp29.i.i to i64
  %ptr_add_tmp39.i.i = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %93
  %94 = bitcast i8* %ptr_add_tmp39.i.i to i16*
  %95 = bitcast i8* %ptr_sub_tmp37.i.i to i16*
  %96 = load i16, i16* %94, align 2
  store i16 %96, i16* %95, align 1
  %add_tmp41.i.i = or i32 %storemerge.i.i, 2
  br label %endif.i.i

endif.i.i:                                        ; preds = %then.i.i, %endwhile.i.i
  %.097.i.i = phi i32 [ %add_tmp41.i.i, %then.i.i ], [ %storemerge.i.i, %endwhile.i.i ]
  %.1.i.i = phi i32 [ %div_tmp31.i.i, %then.i.i ], [ %.0.i.i, %endwhile.i.i ]
  %97 = icmp ugt i32 %.1.i.i, 9
  br i1 %97, label %then43.i.i, label %else.i11.i

then43.i.i:                                       ; preds = %endif.i.i
  %lshift_tmp45.i.i = shl i32 %.1.i.i, 1
  %add_tmp47.i.i = or i32 %lshift_tmp45.i.i, 1
  %98 = zext i32 %add_tmp47.i.i to i64
  %99 = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %98
  %100 = zext i32 %75 to i64
  %ptr_add_tmp50.i.i = getelementptr i8, i8* %.0.i, i64 %100
  %101 = zext i32 %.097.i.i to i64
  %102 = sub nsw i64 0, %101
  %ptr_sub_tmp52.i.i = getelementptr i8, i8* %ptr_add_tmp50.i.i, i64 %102
  %load_tmp53.i.i = load i8, i8* %99, align 1
  store i8 %load_tmp53.i.i, i8* %ptr_sub_tmp52.i.i, align 1
  %103 = zext i32 %lshift_tmp45.i.i to i64
  %104 = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %103
  %load_tmp56.i.i = load i8, i8* %104, align 2
  br label %endif60.i.i

else.i11.i:                                       ; preds = %endif.i.i
  %105 = trunc i32 %.1.i.i to i8
  %cast_tmp.i.i = add i8 %105, 48
  br label %endif60.i.i

endif60.i.i:                                      ; preds = %else.i11.i, %then43.i.i
  %storemerge = phi i8 [ %cast_tmp.i.i, %else.i11.i ], [ %load_tmp56.i.i, %then43.i.i ]
  store i8 %storemerge, i8* %.0.i, align 1
  %106 = icmp ugt i32 %75, 1
  br i1 %106, label %then62.i.i, label %else69.i.i

then62.i.i:                                       ; preds = %endif60.i.i
  %ptr_add_tmp64.i.i = getelementptr i8, i8* %.0.i, i64 1
  store i8 46, i8* %ptr_add_tmp64.i.i, align 1
  %add_tmp66.i.i = add nuw nsw i32 %75, 1
  %107 = zext i32 %add_tmp66.i.i to i64
  %ptr_add_tmp68.i.i = getelementptr i8, i8* %.0.i, i64 %107
  br label %endif71.i.i

else69.i.i:                                       ; preds = %endif60.i.i
  %108 = getelementptr i8, i8* %.0.i, i64 1
  br label %endif71.i.i

endif71.i.i:                                      ; preds = %else69.i.i, %then62.i.i
  %storemerge94.i.i = phi i8* [ %108, %else69.i.i ], [ %ptr_add_tmp68.i.i, %then62.i.i ]
  store i8 101, i8* %storemerge94.i.i, align 1
  %109 = getelementptr i8, i8* %storemerge94.i.i, i64 1
  %sub_tmp77.i.i = add i32 %75, %sub_tmp.i
  %110 = icmp slt i32 %sub_tmp77.i.i, 0
  br i1 %110, label %then79.i.i, label %else83.i.i

then79.i.i:                                       ; preds = %endif71.i.i
  store i8 45, i8* %109, align 1
  %unary_minus_tmp.i.i = sub i32 0, %sub_tmp77.i.i
  br label %"func.std.ryu.to_chars_scientific..2.struct.std::ryu::floating_decimal_32.0P.builtin.uint8.0P.builtin.uint8.exit.i"

else83.i.i:                                       ; preds = %endif71.i.i
  store i8 43, i8* %109, align 1
  br label %"func.std.ryu.to_chars_scientific..2.struct.std::ryu::floating_decimal_32.0P.builtin.uint8.0P.builtin.uint8.exit.i"

"func.std.ryu.to_chars_scientific..2.struct.std::ryu::floating_decimal_32.0P.builtin.uint8.0P.builtin.uint8.exit.i": ; preds = %else83.i.i, %then79.i.i
  %.096.i.i = phi i32 [ %unary_minus_tmp.i.i, %then79.i.i ], [ %sub_tmp77.i.i, %else83.i.i ]
  %load_tmp91.i.i = getelementptr i8, i8* %storemerge94.i.i, i64 2
  %load_tmp8795.i.i = bitcast i8* %load_tmp91.i.i to i16*
  %mul_tmp89.i.i = shl i32 %.096.i.i, 1
  %111 = sext i32 %mul_tmp89.i.i to i64
  %ptr_add_tmp90.i.i = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %111
  %112 = bitcast i8* %ptr_add_tmp90.i.i to i16*
  %113 = load i16, i16* %112, align 2
  store i16 %113, i16* %load_tmp8795.i.i, align 1
  %ptr_add_tmp92.i.i = getelementptr i8, i8* %storemerge94.i.i, i64 4
  br label %func.std.ryu.copy_short_special_str..4.0P.builtin.uint8.builtin.bool.builtin.bool.builtin.bool.0P.builtin.uint8.exit
}

define i32 @func.std.ryu.float_to_bits..1.builtin.float32.builtin.uint32(float %0) {
alloca:
  %load_tmp.cast = bitcast float %0 to i32
  ret i32 %load_tmp.cast
}

define internal i64 @"func.std.ryu.f2d..2.builtin.uint32.builtin.uint32.struct.std::ryu::floating_decimal_32"(i32 %0, i32 %1) {
alloca:
  %2 = alloca i64, align 8
  %3 = icmp eq i32 %1, 0
  %sub_tmp4 = add i32 %1, -152
  %bit_or_tmp = or i32 %0, 8388608
  %.0276 = select i1 %3, i32 -151, i32 %sub_tmp4
  %storemerge = select i1 %3, i32 %0, i32 %bit_or_tmp
  %bit_and_tmp = and i32 %storemerge, 1
  %4 = icmp eq i32 %bit_and_tmp, 0
  %mul_tmp = shl i32 %storemerge, 2
  %add_tmp = or i32 %mul_tmp, 2
  %.not = icmp ne i32 %0, 0
  %5 = icmp ult i32 %1, 2
  %spec.select = or i1 %.not, %5
  %cast_tmp = zext i1 %spec.select to i32
  %6 = xor i32 %cast_tmp, -1
  %sub_tmp17 = add i32 %mul_tmp, %6
  %7 = icmp sgt i32 %.0276, -1
  br i1 %7, label %then19, label %else82

then19:                                           ; preds = %alloca
  %mul_tmp.i = mul i32 %.0276, 78913
  %rshift_tmp.i = lshr i32 %mul_tmp.i, 18
  %mul_tmp.i427 = mul i32 %rshift_tmp.i, 1217359
  %rshift_tmp.i428 = lshr i32 %mul_tmp.i427, 19
  %8 = zext i32 %rshift_tmp.i to i64
  %9 = getelementptr [55 x i64], [55 x i64]* @std.ryu.FLOAT_POW5_INV_SPLIT, i64 0, i64 %8
  %load_tmp2.i416 = load i64, i64* %9, align 8
  %rshift_tmp.i.i417 = lshr i64 %load_tmp2.i416, 32
  %cast_tmp4.i.i418 = zext i32 %mul_tmp to i64
  %cast_tmp6.i.i419 = and i64 %load_tmp2.i416, 4294967295
  %mul_tmp.i.i420 = mul nuw i64 %cast_tmp6.i.i419, %cast_tmp4.i.i418
  %mul_tmp11.i.i421 = mul nuw i64 %rshift_tmp.i.i417, %cast_tmp4.i.i418
  %rshift_tmp13.i.i422 = lshr i64 %mul_tmp.i.i420, 32
  %add_tmp.i.i423 = add i64 %rshift_tmp13.i.i422, %mul_tmp11.i.i421
  %sub_tmp24 = sub i32 27, %.0276
  %add_tmp29 = add i32 %sub_tmp24, %rshift_tmp.i
  %sub_tmp.i.i424 = add i32 %add_tmp29, %rshift_tmp.i428
  %10 = zext i32 %sub_tmp.i.i424 to i64
  %rshift_tmp17.i.i425 = lshr i64 %add_tmp.i.i423, %10
  %cast_tmp4.i.i407 = zext i32 %add_tmp to i64
  %mul_tmp.i.i409 = mul nuw i64 %cast_tmp6.i.i419, %cast_tmp4.i.i407
  %mul_tmp11.i.i410 = mul nuw i64 %rshift_tmp.i.i417, %cast_tmp4.i.i407
  %rshift_tmp13.i.i411 = lshr i64 %mul_tmp.i.i409, 32
  %add_tmp.i.i412 = add i64 %rshift_tmp13.i.i411, %mul_tmp11.i.i410
  %rshift_tmp17.i.i414 = lshr i64 %add_tmp.i.i412, %10
  %cast_tmp19.i.i415 = trunc i64 %rshift_tmp17.i.i414 to i32
  %cast_tmp4.i.i396 = zext i32 %sub_tmp17 to i64
  %mul_tmp.i.i398 = mul nuw i64 %cast_tmp6.i.i419, %cast_tmp4.i.i396
  %mul_tmp11.i.i399 = mul nuw i64 %rshift_tmp.i.i417, %cast_tmp4.i.i396
  %rshift_tmp13.i.i400 = lshr i64 %mul_tmp.i.i398, 32
  %add_tmp.i.i401 = add i64 %rshift_tmp13.i.i400, %mul_tmp11.i.i399
  %rshift_tmp17.i.i403 = lshr i64 %add_tmp.i.i401, %10
  %cast_tmp19.i.i404 = trunc i64 %rshift_tmp17.i.i403 to i32
  %.not275 = icmp eq i32 %rshift_tmp.i, 0
  br i1 %.not275, label %endif60, label %bool_and_rhs

bool_and_rhs:                                     ; preds = %then19
  %sub_tmp41 = add i32 %cast_tmp19.i.i415, -1
  %div_tmp = udiv i32 %sub_tmp41, 10
  %div_tmp43 = udiv i32 %cast_tmp19.i.i404, 10
  %.not434 = icmp ugt i32 %div_tmp, %div_tmp43
  br i1 %.not434, label %endif60, label %then44

then44:                                           ; preds = %bool_and_rhs
  %sub_tmp46 = add nsw i32 %rshift_tmp.i, -1
  %mul_tmp.i391 = mul i32 %sub_tmp46, 1217359
  %rshift_tmp.i392 = lshr i32 %mul_tmp.i391, 19
  %11 = zext i32 %sub_tmp46 to i64
  %12 = getelementptr [55 x i64], [55 x i64]* @std.ryu.FLOAT_POW5_INV_SPLIT, i64 0, i64 %11
  %load_tmp2.i380 = load i64, i64* %12, align 8
  %rshift_tmp.i.i381 = lshr i64 %load_tmp2.i380, 32
  %cast_tmp6.i.i383 = and i64 %load_tmp2.i380, 4294967295
  %mul_tmp.i.i384 = mul nuw i64 %cast_tmp6.i.i383, %cast_tmp4.i.i418
  %mul_tmp11.i.i385 = mul nuw i64 %rshift_tmp.i.i381, %cast_tmp4.i.i418
  %rshift_tmp13.i.i386 = lshr i64 %mul_tmp.i.i384, 32
  %add_tmp.i.i387 = add i64 %rshift_tmp13.i.i386, %mul_tmp11.i.i385
  %sub_tmp56 = sub i32 26, %.0276
  %add_tmp58 = add i32 %sub_tmp56, %rshift_tmp.i
  %sub_tmp.i.i388 = add i32 %add_tmp58, %rshift_tmp.i392
  %13 = zext i32 %sub_tmp.i.i388 to i64
  %rshift_tmp17.i.i389 = lshr i64 %add_tmp.i.i387, %13
  %cast_tmp19.i.i390 = trunc i64 %rshift_tmp17.i.i389 to i32
  %mod_tmp = urem i32 %cast_tmp19.i.i390, 10
  %cast_tmp59 = trunc i32 %mod_tmp to i8
  br label %endif60

endif60:                                          ; preds = %then19, %then44, %bool_and_rhs
  %.0277 = phi i8 [ %cast_tmp59, %then44 ], [ 0, %bool_and_rhs ], [ 0, %then19 ]
  %14 = icmp ult i32 %mul_tmp.i, 2621440
  br i1 %14, label %then62, label %endif145

then62:                                           ; preds = %endif60
  %mod_tmp64 = urem i32 %mul_tmp, 5
  %15 = icmp eq i32 %mod_tmp64, 0
  br i1 %15, label %for_condition_check.i.i375, label %else68

for_condition_check.i.i375:                       ; preds = %then62, %for.i.i378
  %.011.i.i372.in = phi i32 [ %.010.i.i373, %for.i.i378 ], [ %mul_tmp, %then62 ]
  %.0.i.i374 = phi i32 [ %17, %for.i.i378 ], [ 0, %then62 ]
  %.011.i.i372 = urem i32 %.011.i.i372.in, 5
  %16 = icmp eq i32 %.011.i.i372, 0
  br i1 %16, label %for.i.i378, label %func.std.ryu.multipleOfPowerOf5_32..2.builtin.uint32.builtin.uint32.builtin.bool.exit379

for.i.i378:                                       ; preds = %for_condition_check.i.i375
  %.010.i.i373 = udiv i32 %.011.i.i372.in, 5
  %17 = add i32 %.0.i.i374, 1
  br label %for_condition_check.i.i375

func.std.ryu.multipleOfPowerOf5_32..2.builtin.uint32.builtin.uint32.builtin.bool.exit379: ; preds = %for_condition_check.i.i375
  %18 = icmp uge i32 %.0.i.i374, %rshift_tmp.i
  br label %endif145

else68:                                           ; preds = %then62
  br i1 %4, label %for_condition_check.i.i365, label %for_condition_check.i.i

for_condition_check.i.i365:                       ; preds = %else68, %for.i.i368
  %.011.i.i362.in = phi i32 [ %.010.i.i363, %for.i.i368 ], [ %sub_tmp17, %else68 ]
  %.0.i.i364 = phi i32 [ %20, %for.i.i368 ], [ 0, %else68 ]
  %.011.i.i362 = urem i32 %.011.i.i362.in, 5
  %19 = icmp eq i32 %.011.i.i362, 0
  br i1 %19, label %for.i.i368, label %func.std.ryu.multipleOfPowerOf5_32..2.builtin.uint32.builtin.uint32.builtin.bool.exit369

for.i.i368:                                       ; preds = %for_condition_check.i.i365
  %.010.i.i363 = udiv i32 %.011.i.i362.in, 5
  %20 = add i32 %.0.i.i364, 1
  br label %for_condition_check.i.i365

func.std.ryu.multipleOfPowerOf5_32..2.builtin.uint32.builtin.uint32.builtin.bool.exit369: ; preds = %for_condition_check.i.i365
  %21 = icmp uge i32 %.0.i.i364, %rshift_tmp.i
  br label %endif145

for_condition_check.i.i:                          ; preds = %else68, %for.i.i
  %.011.i.i.in = phi i32 [ %.010.i.i, %for.i.i ], [ %add_tmp, %else68 ]
  %.0.i.i = phi i32 [ %23, %for.i.i ], [ 0, %else68 ]
  %.011.i.i = urem i32 %.011.i.i.in, 5
  %22 = icmp eq i32 %.011.i.i, 0
  br i1 %22, label %for.i.i, label %func.std.ryu.multipleOfPowerOf5_32..2.builtin.uint32.builtin.uint32.builtin.bool.exit

for.i.i:                                          ; preds = %for_condition_check.i.i
  %.010.i.i = udiv i32 %.011.i.i.in, 5
  %23 = add i32 %.0.i.i, 1
  br label %for_condition_check.i.i

func.std.ryu.multipleOfPowerOf5_32..2.builtin.uint32.builtin.uint32.builtin.bool.exit: ; preds = %for_condition_check.i.i
  %24 = icmp uge i32 %.0.i.i, %rshift_tmp.i
  %cast_tmp76.neg = sext i1 %24 to i32
  %sub_tmp78 = add i32 %cast_tmp76.neg, %cast_tmp19.i.i415
  br label %endif145

else82:                                           ; preds = %alloca
  %mul_tmp.i358 = mul i32 %.0276, -732923
  %rshift_tmp.i359 = lshr i32 %mul_tmp.i358, 20
  %add_tmp87 = add i32 %rshift_tmp.i359, %.0276
  %sub_tmp91 = sub i32 0, %add_tmp87
  %mul_tmp.i355 = mul i32 %add_tmp87, -1217359
  %rshift_tmp.i356 = lshr i32 %mul_tmp.i355, 19
  %25 = zext i32 %sub_tmp91 to i64
  %26 = getelementptr [47 x i64], [47 x i64]* @std.ryu.FLOAT_POW5_SPLIT, i64 0, i64 %25
  %load_tmp2.i344 = load i64, i64* %26, align 8
  %rshift_tmp.i.i345 = lshr i64 %load_tmp2.i344, 32
  %cast_tmp4.i.i346 = zext i32 %mul_tmp to i64
  %cast_tmp6.i.i347 = and i64 %load_tmp2.i344, 4294967295
  %mul_tmp.i.i348 = mul nuw i64 %cast_tmp6.i.i347, %cast_tmp4.i.i346
  %mul_tmp11.i.i349 = mul nuw i64 %rshift_tmp.i.i345, %cast_tmp4.i.i346
  %rshift_tmp13.i.i350 = lshr i64 %mul_tmp.i.i348, 32
  %add_tmp.i.i351 = add i64 %rshift_tmp13.i.i350, %mul_tmp11.i.i349
  %sub_tmp96 = add nuw nsw i32 %rshift_tmp.i359, 28
  %sub_tmp.i.i352 = sub nsw i32 %sub_tmp96, %rshift_tmp.i356
  %27 = zext i32 %sub_tmp.i.i352 to i64
  %rshift_tmp17.i.i353 = lshr i64 %add_tmp.i.i351, %27
  %cast_tmp4.i.i335 = zext i32 %add_tmp to i64
  %mul_tmp.i.i337 = mul nuw i64 %cast_tmp6.i.i347, %cast_tmp4.i.i335
  %mul_tmp11.i.i338 = mul nuw i64 %rshift_tmp.i.i345, %cast_tmp4.i.i335
  %rshift_tmp13.i.i339 = lshr i64 %mul_tmp.i.i337, 32
  %add_tmp.i.i340 = add i64 %rshift_tmp13.i.i339, %mul_tmp11.i.i338
  %rshift_tmp17.i.i342 = lshr i64 %add_tmp.i.i340, %27
  %cast_tmp19.i.i343 = trunc i64 %rshift_tmp17.i.i342 to i32
  %cast_tmp4.i.i324 = zext i32 %sub_tmp17 to i64
  %mul_tmp.i.i326 = mul nuw i64 %cast_tmp6.i.i347, %cast_tmp4.i.i324
  %mul_tmp11.i.i327 = mul nuw i64 %rshift_tmp.i.i345, %cast_tmp4.i.i324
  %rshift_tmp13.i.i328 = lshr i64 %mul_tmp.i.i326, 32
  %add_tmp.i.i329 = add i64 %rshift_tmp13.i.i328, %mul_tmp11.i.i327
  %rshift_tmp17.i.i331 = lshr i64 %add_tmp.i.i329, %27
  %cast_tmp19.i.i332 = trunc i64 %rshift_tmp17.i.i331 to i32
  %.not266 = icmp eq i32 %rshift_tmp.i359, 0
  br i1 %.not266, label %endif128, label %bool_and_rhs107

bool_and_rhs107:                                  ; preds = %else82
  %sub_tmp109 = add i32 %cast_tmp19.i.i343, -1
  %div_tmp110 = udiv i32 %sub_tmp109, 10
  %div_tmp112 = udiv i32 %cast_tmp19.i.i332, 10
  %.not430 = icmp ugt i32 %div_tmp110, %div_tmp112
  br i1 %.not430, label %endif128, label %then115

then115:                                          ; preds = %bool_and_rhs107
  %add_tmp119 = sub i32 1, %add_tmp87
  %mul_tmp.i320 = mul i32 %add_tmp119, 1217359
  %rshift_tmp.i321 = lshr i32 %mul_tmp.i320, 19
  %28 = zext i32 %add_tmp119 to i64
  %29 = getelementptr [47 x i64], [47 x i64]* @std.ryu.FLOAT_POW5_SPLIT, i64 0, i64 %28
  %load_tmp2.i = load i64, i64* %29, align 8
  %rshift_tmp.i.i = lshr i64 %load_tmp2.i, 32
  %cast_tmp6.i.i = and i64 %load_tmp2.i, 4294967295
  %mul_tmp.i.i = mul nuw i64 %cast_tmp6.i.i, %cast_tmp4.i.i346
  %mul_tmp11.i.i = mul nuw i64 %rshift_tmp.i.i, %cast_tmp4.i.i346
  %rshift_tmp13.i.i = lshr i64 %mul_tmp.i.i, 32
  %add_tmp.i.i = add i64 %rshift_tmp13.i.i, %mul_tmp11.i.i
  %sub_tmp121 = add nuw nsw i32 %rshift_tmp.i359, 27
  %sub_tmp.i.i = sub nsw i32 %sub_tmp121, %rshift_tmp.i321
  %30 = zext i32 %sub_tmp.i.i to i64
  %rshift_tmp17.i.i = lshr i64 %add_tmp.i.i, %30
  %cast_tmp19.i.i = trunc i64 %rshift_tmp17.i.i to i32
  %mod_tmp126 = urem i32 %cast_tmp19.i.i, 10
  %cast_tmp127 = trunc i32 %mod_tmp126 to i8
  br label %endif128

endif128:                                         ; preds = %else82, %then115, %bool_and_rhs107
  %.1278 = phi i8 [ %cast_tmp127, %then115 ], [ 0, %bool_and_rhs107 ], [ 0, %else82 ]
  %31 = icmp ult i32 %mul_tmp.i358, 2097152
  br i1 %31, label %then130, label %else137

then130:                                          ; preds = %endif128
  %not.433 = xor i1 %4, true
  %32 = sext i1 %not.433 to i32
  %.3311 = add i32 %cast_tmp19.i.i343, %32
  %.3293 = and i1 %spec.select, %4
  br label %endif145

else137:                                          ; preds = %endif128
  %33 = icmp ult i32 %mul_tmp.i358, 32505856
  br i1 %33, label %then139, label %endif145

then139:                                          ; preds = %else137
  %sub_tmp142 = add nsw i32 %rshift_tmp.i359, -1
  %notmask.i = shl nsw i32 -1, %sub_tmp142
  %sub_tmp.i = xor i32 %notmask.i, -1
  %bit_and_tmp.i = and i32 %mul_tmp, %sub_tmp.i
  %34 = icmp eq i32 %bit_and_tmp.i, 0
  br label %endif145

endif145:                                         ; preds = %then130, %then139, %else137, %endif60, %func.std.ryu.multipleOfPowerOf5_32..2.builtin.uint32.builtin.uint32.builtin.bool.exit369, %func.std.ryu.multipleOfPowerOf5_32..2.builtin.uint32.builtin.uint32.builtin.bool.exit, %func.std.ryu.multipleOfPowerOf5_32..2.builtin.uint32.builtin.uint32.builtin.bool.exit379
  %.5313 = phi i32 [ %cast_tmp19.i.i415, %endif60 ], [ %cast_tmp19.i.i415, %func.std.ryu.multipleOfPowerOf5_32..2.builtin.uint32.builtin.uint32.builtin.bool.exit379 ], [ %cast_tmp19.i.i415, %func.std.ryu.multipleOfPowerOf5_32..2.builtin.uint32.builtin.uint32.builtin.bool.exit369 ], [ %sub_tmp78, %func.std.ryu.multipleOfPowerOf5_32..2.builtin.uint32.builtin.uint32.builtin.bool.exit ], [ %.3311, %then130 ], [ %cast_tmp19.i.i343, %then139 ], [ %cast_tmp19.i.i343, %else137 ]
  %.0303.in = phi i64 [ %rshift_tmp17.i.i425, %endif60 ], [ %rshift_tmp17.i.i425, %func.std.ryu.multipleOfPowerOf5_32..2.builtin.uint32.builtin.uint32.builtin.bool.exit379 ], [ %rshift_tmp17.i.i425, %func.std.ryu.multipleOfPowerOf5_32..2.builtin.uint32.builtin.uint32.builtin.bool.exit369 ], [ %rshift_tmp17.i.i425, %func.std.ryu.multipleOfPowerOf5_32..2.builtin.uint32.builtin.uint32.builtin.bool.exit ], [ %rshift_tmp17.i.i353, %then130 ], [ %rshift_tmp17.i.i353, %then139 ], [ %rshift_tmp17.i.i353, %else137 ]
  %.0298 = phi i32 [ %cast_tmp19.i.i404, %endif60 ], [ %cast_tmp19.i.i404, %func.std.ryu.multipleOfPowerOf5_32..2.builtin.uint32.builtin.uint32.builtin.bool.exit379 ], [ %cast_tmp19.i.i404, %func.std.ryu.multipleOfPowerOf5_32..2.builtin.uint32.builtin.uint32.builtin.bool.exit369 ], [ %cast_tmp19.i.i404, %func.std.ryu.multipleOfPowerOf5_32..2.builtin.uint32.builtin.uint32.builtin.bool.exit ], [ %cast_tmp19.i.i332, %then130 ], [ %cast_tmp19.i.i332, %then139 ], [ %cast_tmp19.i.i332, %else137 ]
  %.0297 = phi i32 [ %rshift_tmp.i, %endif60 ], [ %rshift_tmp.i, %func.std.ryu.multipleOfPowerOf5_32..2.builtin.uint32.builtin.uint32.builtin.bool.exit379 ], [ %rshift_tmp.i, %func.std.ryu.multipleOfPowerOf5_32..2.builtin.uint32.builtin.uint32.builtin.bool.exit369 ], [ %rshift_tmp.i, %func.std.ryu.multipleOfPowerOf5_32..2.builtin.uint32.builtin.uint32.builtin.bool.exit ], [ %add_tmp87, %then130 ], [ %add_tmp87, %then139 ], [ %add_tmp87, %else137 ]
  %.5295 = phi i1 [ false, %endif60 ], [ false, %func.std.ryu.multipleOfPowerOf5_32..2.builtin.uint32.builtin.uint32.builtin.bool.exit379 ], [ %21, %func.std.ryu.multipleOfPowerOf5_32..2.builtin.uint32.builtin.uint32.builtin.bool.exit369 ], [ false, %func.std.ryu.multipleOfPowerOf5_32..2.builtin.uint32.builtin.uint32.builtin.bool.exit ], [ %.3293, %then130 ], [ false, %then139 ], [ false, %else137 ]
  %.4286 = phi i1 [ false, %endif60 ], [ %18, %func.std.ryu.multipleOfPowerOf5_32..2.builtin.uint32.builtin.uint32.builtin.bool.exit379 ], [ false, %func.std.ryu.multipleOfPowerOf5_32..2.builtin.uint32.builtin.uint32.builtin.bool.exit369 ], [ false, %func.std.ryu.multipleOfPowerOf5_32..2.builtin.uint32.builtin.uint32.builtin.bool.exit ], [ true, %then130 ], [ %34, %then139 ], [ false, %else137 ]
  %.2279 = phi i8 [ %.0277, %endif60 ], [ %.0277, %func.std.ryu.multipleOfPowerOf5_32..2.builtin.uint32.builtin.uint32.builtin.bool.exit379 ], [ %.0277, %func.std.ryu.multipleOfPowerOf5_32..2.builtin.uint32.builtin.uint32.builtin.bool.exit369 ], [ %.0277, %func.std.ryu.multipleOfPowerOf5_32..2.builtin.uint32.builtin.uint32.builtin.bool.exit ], [ %.1278, %then130 ], [ %.1278, %then139 ], [ %.1278, %else137 ]
  %.0303 = trunc i64 %.0303.in to i32
  %spec.select316 = or i1 %.5295, %.4286
  br i1 %spec.select316, label %while_condition_check, label %while_condition_check232

while_condition_check:                            ; preds = %endif145, %while
  %.6314 = phi i32 [ %div_tmp153, %while ], [ %.5313, %endif145 ]
  %.1304 = phi i32 [ %div_tmp171, %while ], [ %.0303, %endif145 ]
  %.1299 = phi i32 [ %div_tmp155, %while ], [ %.0298, %endif145 ]
  %.6296 = phi i1 [ %bit_and_tmp162, %while ], [ %.5295, %endif145 ]
  %.5287 = phi i1 [ %bit_and_tmp166, %while ], [ %.4286, %endif145 ]
  %.3280 = phi i8 [ %cast_tmp169, %while ], [ %.2279, %endif145 ]
  %.0 = phi i32 [ %39, %while ], [ 0, %endif145 ]
  %div_tmp153 = udiv i32 %.6314, 10
  %div_tmp155 = udiv i32 %.1299, 10
  %35 = icmp ugt i32 %div_tmp153, %div_tmp155
  br i1 %35, label %while, label %endwhile

while:                                            ; preds = %while_condition_check
  %36 = urem i32 %.1299, 10
  %37 = icmp eq i32 %36, 0
  %bit_and_tmp162 = and i1 %.6296, %37
  %38 = icmp eq i8 %.3280, 0
  %bit_and_tmp166 = and i1 %.5287, %38
  %mod_tmp168 = urem i32 %.1304, 10
  %cast_tmp169 = trunc i32 %mod_tmp168 to i8
  %div_tmp171 = udiv i32 %.1304, 10
  %39 = add i32 %.0, 1
  br label %while_condition_check

endwhile:                                         ; preds = %while_condition_check
  br i1 %.6296, label %while_condition_check179, label %endif198

while_condition_check179:                         ; preds = %endwhile, %while182
  %.2305 = phi i32 [ %div_tmp191, %while182 ], [ %.1304, %endwhile ]
  %.2300 = phi i32 [ %div_tmp195, %while182 ], [ %.1299, %endwhile ]
  %.6288 = phi i1 [ %bit_and_tmp186, %while182 ], [ %.5287, %endwhile ]
  %.4281 = phi i8 [ %cast_tmp189, %while182 ], [ %.3280, %endwhile ]
  %.1 = phi i32 [ %42, %while182 ], [ %.0, %endwhile ]
  %mod_tmp181 = urem i32 %.2300, 10
  %40 = icmp eq i32 %mod_tmp181, 0
  br i1 %40, label %while182, label %endif198

while182:                                         ; preds = %while_condition_check179
  %41 = icmp eq i8 %.4281, 0
  %bit_and_tmp186 = and i1 %.6288, %41
  %mod_tmp188 = urem i32 %.2305, 10
  %cast_tmp189 = trunc i32 %mod_tmp188 to i8
  %div_tmp191 = udiv i32 %.2305, 10
  %div_tmp195 = udiv i32 %.2300, 10
  %42 = add i32 %.1, 1
  br label %while_condition_check179

endif198:                                         ; preds = %while_condition_check179, %endwhile
  %.3306 = phi i32 [ %.1304, %endwhile ], [ %.2305, %while_condition_check179 ]
  %.3301 = phi i32 [ %.1299, %endwhile ], [ %.2300, %while_condition_check179 ]
  %.7289 = phi i1 [ %.5287, %endwhile ], [ %.6288, %while_condition_check179 ]
  %.5 = phi i8 [ %.3280, %endwhile ], [ %.4281, %while_condition_check179 ]
  %.2 = phi i32 [ %.0, %endwhile ], [ %.1, %while_condition_check179 ]
  %43 = icmp eq i8 %.5, 5
  %spec.select317 = and i1 %.7289, %43
  %mod_tmp207 = and i32 %.3306, 1
  %44 = icmp eq i32 %mod_tmp207, 0
  %bool_and_tmp209 = and i1 %44, %spec.select317
  %45 = icmp ne i32 %.3306, %.3301
  %spec.select319.demorgan = and i1 %4, %.6296
  %46 = or i1 %spec.select319.demorgan, %45
  %47 = icmp ugt i8 %.5, 4
  %48 = xor i1 %47, %bool_and_tmp209
  %not. = xor i1 %46, true
  %narrow432 = or i1 %48, %not.
  %bool_or_tmp228 = zext i1 %narrow432 to i32
  %add_tmp230 = add i32 %.3306, %bool_or_tmp228
  br label %endif259

while_condition_check232:                         ; preds = %endif145, %while237
  %.8 = phi i32 [ %div_tmp234, %while237 ], [ %.5313, %endif145 ]
  %.4307 = phi i32 [ %div_tmp242, %while237 ], [ %.0303, %endif145 ]
  %.4302 = phi i32 [ %div_tmp236, %while237 ], [ %.0298, %endif145 ]
  %.7 = phi i8 [ %cast_tmp240, %while237 ], [ %.2279, %endif145 ]
  %.3 = phi i32 [ %50, %while237 ], [ 0, %endif145 ]
  %div_tmp234 = udiv i32 %.8, 10
  %div_tmp236 = udiv i32 %.4302, 10
  %49 = icmp ugt i32 %div_tmp234, %div_tmp236
  br i1 %49, label %while237, label %endwhile248

while237:                                         ; preds = %while_condition_check232
  %mod_tmp239 = urem i32 %.4307, 10
  %cast_tmp240 = trunc i32 %mod_tmp239 to i8
  %div_tmp242 = udiv i32 %.4307, 10
  %50 = add i32 %.3, 1
  br label %while_condition_check232

endwhile248:                                      ; preds = %while_condition_check232
  %51 = icmp eq i32 %.4307, %.4302
  %52 = icmp ugt i8 %.7, 4
  %narrow = or i1 %51, %52
  %bool_or_tmp256 = zext i1 %narrow to i32
  %add_tmp258 = add i32 %.4307, %bool_or_tmp256
  br label %endif259

endif259:                                         ; preds = %endwhile248, %endif198
  %.4 = phi i32 [ %.2, %endif198 ], [ %.3, %endwhile248 ]
  %storemerge267 = phi i32 [ %add_tmp230, %endif198 ], [ %add_tmp258, %endwhile248 ]
  %tmpcast = bitcast i64* %2 to %"struct.std::ryu::floating_decimal_32"*
  %add_tmp262 = add i32 %.4, %.0297
  %tmpcast.repack = bitcast i64* %2 to i32*
  store i32 %storemerge267, i32* %tmpcast.repack, align 8
  %tmpcast.repack272 = getelementptr inbounds %"struct.std::ryu::floating_decimal_32", %"struct.std::ryu::floating_decimal_32"* %tmpcast, i64 0, i32 1
  store i32 %add_tmp262, i32* %tmpcast.repack272, align 4
  %53 = load i64, i64* %2, align 8
  ret i64 %53
}

define i32 @s2d_str(i8* %0, i8* %1, double* %2) {
alloca:
  %3 = alloca %builtin.str, align 8
  %4 = alloca %builtin.str, align 8
  %.repack = getelementptr inbounds %builtin.str, %builtin.str* %4, i64 0, i32 0
  store i8* %0, i8** %.repack, align 8
  %.repack3 = getelementptr inbounds %builtin.str, %builtin.str* %4, i64 0, i32 1
  store i8* %1, i8** %.repack3, align 8
  call void @llvm.experimental.noalias.scope.decl(metadata !41)
  %5 = bitcast %builtin.str* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5)
  %6 = bitcast %builtin.str* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %5, i8* nonnull align 8 dereferenceable(16) %6, i64 16, i1 false)
  %load_tmp.elt.i = getelementptr inbounds %builtin.str, %builtin.str* %3, i64 0, i32 0
  %load_tmp.unpack.i = load i8*, i8** %load_tmp.elt.i, align 8, !alias.scope !41
  %load_tmp1.elt6.i = getelementptr inbounds %builtin.str, %builtin.str* %3, i64 0, i32 1
  %load_tmp1.unpack7.i = load i8*, i8** %load_tmp1.elt6.i, align 8, !alias.scope !41
  %7 = ptrtoint i8* %load_tmp1.unpack7.i to i64
  %8 = ptrtoint i8* %load_tmp.unpack.i to i64
  %9 = sub i64 %7, %8
  %cast_tmp.i = trunc i64 %9 to i32
  %10 = call i32 @func.std.ryu.s2d_n..3.0P.const.builtin.uint8.builtin.int32.0P.builtin.float64.builtin.uint32(i8* %load_tmp.unpack.i, i32 %cast_tmp.i, double* %2), !noalias !41
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5)
  ret i32 %10
}

define i32 @func.std.ryu.s2d_str..2.builtin.str.0P.builtin.float64.builtin.uint32(%builtin.str* noalias nocapture nonnull byval(%builtin.str) %0, double* %1) {
alloca:
  %load_tmp.elt = getelementptr inbounds %builtin.str, %builtin.str* %0, i64 0, i32 0
  %load_tmp.unpack = load i8*, i8** %load_tmp.elt, align 8
  %load_tmp1.elt6 = getelementptr inbounds %builtin.str, %builtin.str* %0, i64 0, i32 1
  %load_tmp1.unpack7 = load i8*, i8** %load_tmp1.elt6, align 8
  %2 = ptrtoint i8* %load_tmp1.unpack7 to i64
  %3 = ptrtoint i8* %load_tmp.unpack to i64
  %4 = sub i64 %2, %3
  %cast_tmp = trunc i64 %4 to i32
  %5 = call i32 @func.std.ryu.s2d_n..3.0P.const.builtin.uint8.builtin.int32.0P.builtin.float64.builtin.uint32(i8* %load_tmp.unpack, i32 %cast_tmp, double* %1)
  ret i32 %5
}

define i32 @func.std.ryu.s2d_n..3.0P.const.builtin.uint8.builtin.int32.0P.builtin.float64.builtin.uint32(i8* %0, i32 %1, double* %2) {
alloca:
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %then, label %endif

then:                                             ; preds = %endif123, %for95, %else, %then27, %alloca
  %merge = phi i32 [ 1, %alloca ], [ 3, %then27 ], [ 2, %else ], [ 3, %for95 ], [ 3, %endif123 ]
  ret i32 %merge

endif:                                            ; preds = %alloca
  %load_tmp5 = load i8, i8* %0, align 1
  %4 = icmp eq i8 %load_tmp5, 45
  %spec.select = zext i1 %4 to i32
  br label %for_condition_check

for_condition_check:                              ; preds = %endif43, %endif
  %.1332 = phi i32 [ %spec.select, %endif ], [ %11, %endif43 ]
  %.0322 = phi i64 [ 0, %endif ], [ %.1323, %endif43 ]
  %.0319 = phi i32 [ %1, %endif ], [ %.1320, %endif43 ]
  %.0315 = phi i32 [ 0, %endif ], [ %.2, %endif43 ]
  %5 = icmp slt i32 %.1332, %1
  br i1 %5, label %bool_and_rhs, label %endif123

bool_and_rhs:                                     ; preds = %for_condition_check
  %6 = sext i32 %.1332 to i64
  %ptr_add_tmp13 = getelementptr i8, i8* %0, i64 %6
  %load_tmp14 = load i8, i8* %ptr_add_tmp13, align 1
  %cast_tmp = zext i8 %load_tmp14 to i64
  %load_tmp14.off = add i8 %load_tmp14, -48
  %7 = icmp ult i8 %load_tmp14.off, 10
  %8 = icmp eq i8 %load_tmp14, 46
  %bool_or_tmp = or i1 %8, %7
  br i1 %bool_or_tmp, label %for, label %bool_and_rhs47

for:                                              ; preds = %bool_and_rhs
  br i1 %8, label %then27, label %else

then27:                                           ; preds = %for
  %.not313 = icmp eq i32 %.0319, %1
  br i1 %.not313, label %endif43, label %then

else:                                             ; preds = %for
  %9 = icmp sgt i32 %.0315, 16
  br i1 %9, label %then, label %endif35

endif35:                                          ; preds = %else
  %mul_tmp = mul i64 %.0322, 10
  %sub_tmp = add i64 %mul_tmp, -48
  %add_tmp = add i64 %sub_tmp, %cast_tmp
  %.not312 = icmp ne i64 %add_tmp, 0
  %10 = zext i1 %.not312 to i32
  %spec.select339 = add i32 %.0315, %10
  br label %endif43

endif43:                                          ; preds = %then27, %endif35
  %.1323 = phi i64 [ %add_tmp, %endif35 ], [ %.0322, %then27 ]
  %.1320 = phi i32 [ %.0319, %endif35 ], [ %.1332, %then27 ]
  %.2 = phi i32 [ %spec.select339, %endif35 ], [ %.0315, %then27 ]
  %11 = add i32 %.1332, 1
  br label %for_condition_check

bool_and_rhs47:                                   ; preds = %bool_and_rhs
  switch i8 %load_tmp14, label %endif123 [
    i8 101, label %then63
    i8 69, label %then63
  ]

then63:                                           ; preds = %bool_and_rhs47, %bool_and_rhs47
  %12 = add i32 %.1332, 1
  %13 = icmp slt i32 %12, %1
  br i1 %13, label %bool_and_rhs68, label %endif91

bool_and_rhs68:                                   ; preds = %then63
  %14 = sext i32 %12 to i64
  %ptr_add_tmp71 = getelementptr i8, i8* %0, i64 %14
  %load_tmp72 = load i8, i8* %ptr_add_tmp71, align 1
  switch i8 %load_tmp72, label %endif91 [
    i8 45, label %then84
    i8 43, label %then84
  ]

then84:                                           ; preds = %bool_and_rhs68, %bool_and_rhs68
  %15 = icmp eq i8 %load_tmp72, 45
  %16 = add i32 %.1332, 2
  br label %endif91

endif91:                                          ; preds = %bool_and_rhs68, %then63, %then84
  %.2333 = phi i32 [ %16, %then84 ], [ %12, %then63 ], [ %12, %bool_and_rhs68 ]
  %.0329 = phi i1 [ %15, %then84 ], [ false, %then63 ], [ false, %bool_and_rhs68 ]
  br label %for_condition_check92

for_condition_check92:                            ; preds = %endif120, %endif91
  %.3334 = phi i32 [ %.2333, %endif91 ], [ %22, %endif120 ]
  %.0324 = phi i32 [ 0, %endif91 ], [ %.1325, %endif120 ]
  %.0316 = phi i32 [ 0, %endif91 ], [ %.2318, %endif120 ]
  %17 = icmp slt i32 %.3334, %1
  br i1 %17, label %for95, label %endif123

for95:                                            ; preds = %for_condition_check92
  %18 = sext i32 %.3334 to i64
  %ptr_add_tmp98 = getelementptr i8, i8* %0, i64 %18
  %load_tmp99 = load i8, i8* %ptr_add_tmp98, align 1
  %cast_tmp100 = zext i8 %load_tmp99 to i32
  %load_tmp99.off = add i8 %load_tmp99, -48
  %19 = icmp ugt i8 %load_tmp99.off, 9
  br i1 %19, label %then, label %endif107

endif107:                                         ; preds = %for95
  %20 = icmp sgt i32 %.0316, 3
  br i1 %20, label %endif120, label %else110

else110:                                          ; preds = %endif107
  %mul_tmp112 = mul i32 %.0324, 10
  %sub_tmp114 = add i32 %mul_tmp112, -48
  %add_tmp115 = add i32 %sub_tmp114, %cast_tmp100
  %.not311 = icmp ne i32 %add_tmp115, 0
  %21 = zext i1 %.not311 to i32
  %spec.select341 = add i32 %.0316, %21
  br label %endif120

endif120:                                         ; preds = %endif107, %else110
  %.1325 = phi i32 [ %add_tmp115, %else110 ], [ %.0324, %endif107 ]
  %.2318 = phi i32 [ %spec.select341, %else110 ], [ %.0316, %endif107 ]
  %22 = add i32 %.3334, 1
  br label %for_condition_check92

endif123:                                         ; preds = %for_condition_check, %bool_and_rhs47, %for_condition_check92
  %.4335 = phi i32 [ %.3334, %for_condition_check92 ], [ %.1332, %bool_and_rhs47 ], [ %.1332, %for_condition_check ]
  %.1330 = phi i1 [ %.0329, %for_condition_check92 ], [ false, %bool_and_rhs47 ], [ false, %for_condition_check ]
  %.2326 = phi i32 [ %.0324, %for_condition_check92 ], [ 0, %bool_and_rhs47 ], [ 0, %for_condition_check ]
  %.0321 = phi i32 [ %.1332, %for_condition_check92 ], [ %1, %bool_and_rhs47 ], [ %1, %for_condition_check ]
  %.3 = phi i32 [ %.0316, %for_condition_check92 ], [ 0, %bool_and_rhs47 ], [ 0, %for_condition_check ]
  %23 = icmp slt i32 %.4335, %1
  br i1 %23, label %then, label %endif127

endif127:                                         ; preds = %endif123
  %unary_minus_tmp = sub i32 0, %.2326
  %spec.select342 = select i1 %.1330, i32 %unary_minus_tmp, i32 %.2326
  %24 = icmp slt i32 %.0319, %.0321
  %.neg361 = add i32 %.0319, 1
  %sub_tmp138.neg = sub i32 %.neg361, %.0321
  %sub_tmp140 = select i1 %24, i32 %sub_tmp138.neg, i32 0
  %.4 = add i32 %sub_tmp140, %spec.select342
  %unary_minus_tmp215 = sub i32 0, %.4
  %25 = icmp sgt i32 %.3, 3
  %spec.select343 = and i1 %.1330, %25
  %add_tmp150 = add i32 %.4, %.0315
  %26 = icmp slt i32 %add_tmp150, -323
  %bool_or_tmp152 = or i1 %spec.select343, %26
  %27 = icmp eq i64 %.0322, 0
  %spec.select344 = or i1 %27, %bool_or_tmp152
  br i1 %spec.select344, label %then157, label %else162

then157:                                          ; preds = %endif127
  %load_tmp.cast.i = select i1 %4, double -0.000000e+00, double 0.000000e+00
  store double %load_tmp.cast.i, double* %2, align 8
  ret i32 0

else162:                                          ; preds = %endif127
  %28 = icmp sgt i32 %add_tmp150, 309
  %bool_or_tmp169 = or i1 %25, %28
  br i1 %bool_or_tmp169, label %then170, label %endif177

then170:                                          ; preds = %else162
  %load_tmp.cast.i348 = select i1 %4, double 0xFFF0000000000000, double 0x7FF0000000000000
  store double %load_tmp.cast.i348, double* %2, align 8
  ret i32 0

endif177:                                         ; preds = %else162
  %29 = icmp sgt i32 %.4, -1
  br i1 %29, label %then179, label %else210

then179:                                          ; preds = %endif177
  %30 = call i64 @llvm.ctlz.i64(i64 %.0322, i1 false), !range !44
  %cast_tmp.i356 = trunc i64 %30 to i32
  %mul_tmp.i = mul i32 %.4, 1217359
  %rshift_tmp.i = lshr i32 %mul_tmp.i, 19
  %add_tmp182 = sub nsw i32 10, %cast_tmp.i356
  %add_tmp184 = add i32 %add_tmp182, %.4
  %sub_tmp185 = add i32 %add_tmp184, %rshift_tmp.i
  %sub_tmp188 = sub i32 %sub_tmp185, %.4
  %sub_tmp190 = sub nsw i32 124, %rshift_tmp.i
  %add_tmp191 = add i32 %sub_tmp188, %sub_tmp190
  %31 = sext i32 %.4 to i64
  %32 = getelementptr [326 x [2 x i64]], [326 x [2 x i64]]* @std.ryu.DOUBLE_POW5_SPLIT, i64 0, i64 %31, i64 0
  %ptr_add_tmp.i = getelementptr [326 x [2 x i64]], [326 x [2 x i64]]* @std.ryu.DOUBLE_POW5_SPLIT, i64 0, i64 %31, i64 1
  %load_tmp2.i363 = load i64, i64* %ptr_add_tmp.i, align 8
  %rshift_tmp.i.i = lshr i64 %.0322, 32
  %rshift_tmp6.i.i = lshr i64 %load_tmp2.i363, 32
  %cast_tmp9.i.i = and i64 %.0322, 4294967295
  %cast_tmp11.i.i = and i64 %load_tmp2.i363, 4294967295
  %mul_tmp.i.i = mul nuw i64 %cast_tmp11.i.i, %cast_tmp9.i.i
  %mul_tmp16.i.i = mul nuw i64 %rshift_tmp6.i.i, %cast_tmp9.i.i
  %mul_tmp21.i.i = mul nuw i64 %cast_tmp11.i.i, %rshift_tmp.i.i
  %mul_tmp26.i.i = mul nuw i64 %rshift_tmp6.i.i, %rshift_tmp.i.i
  %rshift_tmp30.i.i = lshr i64 %mul_tmp.i.i, 32
  %add_tmp.i.i = add i64 %rshift_tmp30.i.i, %mul_tmp21.i.i
  %rshift_tmp38.i.i = lshr i64 %add_tmp.i.i, 32
  %cast_tmp42.i.i = and i64 %add_tmp.i.i, 4294967295
  %add_tmp43.i.i = add i64 %cast_tmp42.i.i, %mul_tmp16.i.i
  %rshift_tmp47.i.i = lshr i64 %add_tmp43.i.i, 32
  %add_tmp52.i.i = add i64 %rshift_tmp38.i.i, %mul_tmp26.i.i
  %add_tmp55.i.i = add i64 %add_tmp52.i.i, %rshift_tmp47.i.i
  %cast_tmp57.i.i = shl i64 %add_tmp43.i.i, 32
  %cast_tmp59.i.i = and i64 %mul_tmp.i.i, 4294967295
  %bit_or_tmp.i.i = or i64 %cast_tmp57.i.i, %cast_tmp59.i.i
  %load_tmp5.i = load i64, i64* %32, align 16
  %rshift_tmp6.i22.i = lshr i64 %load_tmp5.i, 32
  %cast_tmp11.i25.i = and i64 %load_tmp5.i, 4294967295
  %mul_tmp.i26.i = mul nuw i64 %cast_tmp11.i25.i, %cast_tmp9.i.i
  %mul_tmp16.i28.i = mul nuw i64 %rshift_tmp6.i22.i, %cast_tmp9.i.i
  %mul_tmp21.i31.i = mul nuw i64 %cast_tmp11.i25.i, %rshift_tmp.i.i
  %mul_tmp26.i32.i = mul nuw i64 %rshift_tmp6.i22.i, %rshift_tmp.i.i
  %rshift_tmp30.i34.i = lshr i64 %mul_tmp.i26.i, 32
  %add_tmp.i35.i = add i64 %rshift_tmp30.i34.i, %mul_tmp21.i31.i
  %rshift_tmp38.i36.i = lshr i64 %add_tmp.i35.i, 32
  %cast_tmp42.i38.i = and i64 %add_tmp.i35.i, 4294967295
  %add_tmp43.i39.i = add i64 %cast_tmp42.i38.i, %mul_tmp16.i28.i
  %rshift_tmp47.i41.i = lshr i64 %add_tmp43.i39.i, 32
  %add_tmp52.i43.i = add i64 %rshift_tmp38.i36.i, %mul_tmp26.i32.i
  %add_tmp55.i44.i = add i64 %add_tmp52.i43.i, %rshift_tmp47.i41.i
  %add_tmp.i364 = add i64 %add_tmp55.i44.i, %bit_or_tmp.i.i
  %33 = icmp ult i64 %add_tmp.i364, %add_tmp55.i44.i
  %34 = zext i1 %33 to i64
  %load_tmp12.i = add i64 %add_tmp55.i.i, %34
  %sub_tmp.i365 = add i32 %add_tmp191, -64
  %sub_tmp.i.i = sub i32 128, %add_tmp191
  %35 = zext i32 %sub_tmp.i.i to i64
  %lshift_tmp.i15.i = shl i64 %load_tmp12.i, %35
  %36 = zext i32 %sub_tmp.i365 to i64
  %rshift_tmp.i16.i = lshr i64 %add_tmp.i364, %36
  %bit_or_tmp.i17.i = or i64 %lshift_tmp.i15.i, %rshift_tmp.i16.i
  %37 = icmp slt i32 %sub_tmp185, %.4
  br i1 %37, label %endif233, label %bool_or_rhs197

bool_or_rhs197:                                   ; preds = %then179
  %38 = icmp slt i32 %sub_tmp188, 64
  br i1 %38, label %bool_and_rhs201, label %endif233

bool_and_rhs201:                                  ; preds = %bool_or_rhs197
  %39 = zext i32 %sub_tmp188 to i64
  %notmask.i = shl nsw i64 -1, %39
  %sub_tmp.i355 = xor i64 %notmask.i, -1
  %bit_and_tmp.i = and i64 %.0322, %sub_tmp.i355
  %40 = icmp eq i64 %bit_and_tmp.i, 0
  br label %endif233

else210:                                          ; preds = %endif177
  %41 = call i64 @llvm.ctlz.i64(i64 %.0322, i1 false), !range !44
  %cast_tmp.i353 = trunc i64 %41 to i32
  %mul_tmp.i.i350 = mul i32 %.4, -1217359
  %rshift_tmp.i.i351 = lshr i32 %mul_tmp.i.i350, 19
  %42 = add i32 %.4, 9
  %43 = add nuw nsw i32 %rshift_tmp.i.i351, %cast_tmp.i353
  %sub_tmp217 = sub i32 %42, %43
  %add_tmp.i = sub i32 125, %.4
  %add_tmp223 = add i32 %add_tmp.i, %rshift_tmp.i.i351
  %add_tmp225 = add i32 %add_tmp223, %sub_tmp217
  %44 = sext i32 %unary_minus_tmp215 to i64
  %45 = getelementptr [342 x [2 x i64]], [342 x [2 x i64]]* @std.ryu.DOUBLE_POW5_INV_SPLIT, i64 0, i64 %44, i64 0
  %ptr_add_tmp.i366 = getelementptr [342 x [2 x i64]], [342 x [2 x i64]]* @std.ryu.DOUBLE_POW5_INV_SPLIT, i64 0, i64 %44, i64 1
  %load_tmp2.i367 = load i64, i64* %ptr_add_tmp.i366, align 8
  %rshift_tmp.i.i368 = lshr i64 %.0322, 32
  %rshift_tmp6.i.i369 = lshr i64 %load_tmp2.i367, 32
  %cast_tmp9.i.i370 = and i64 %.0322, 4294967295
  %cast_tmp11.i.i371 = and i64 %load_tmp2.i367, 4294967295
  %mul_tmp.i.i372 = mul nuw i64 %cast_tmp11.i.i371, %cast_tmp9.i.i370
  %mul_tmp16.i.i373 = mul nuw i64 %rshift_tmp6.i.i369, %cast_tmp9.i.i370
  %mul_tmp21.i.i374 = mul nuw i64 %cast_tmp11.i.i371, %rshift_tmp.i.i368
  %mul_tmp26.i.i375 = mul nuw i64 %rshift_tmp6.i.i369, %rshift_tmp.i.i368
  %rshift_tmp30.i.i376 = lshr i64 %mul_tmp.i.i372, 32
  %add_tmp.i.i377 = add i64 %rshift_tmp30.i.i376, %mul_tmp21.i.i374
  %rshift_tmp38.i.i378 = lshr i64 %add_tmp.i.i377, 32
  %cast_tmp42.i.i379 = and i64 %add_tmp.i.i377, 4294967295
  %add_tmp43.i.i380 = add i64 %cast_tmp42.i.i379, %mul_tmp16.i.i373
  %rshift_tmp47.i.i381 = lshr i64 %add_tmp43.i.i380, 32
  %add_tmp52.i.i382 = add i64 %rshift_tmp38.i.i378, %mul_tmp26.i.i375
  %add_tmp55.i.i383 = add i64 %add_tmp52.i.i382, %rshift_tmp47.i.i381
  %cast_tmp57.i.i384 = shl i64 %add_tmp43.i.i380, 32
  %cast_tmp59.i.i385 = and i64 %mul_tmp.i.i372, 4294967295
  %bit_or_tmp.i.i386 = or i64 %cast_tmp57.i.i384, %cast_tmp59.i.i385
  %load_tmp5.i387 = load i64, i64* %45, align 16
  %rshift_tmp6.i22.i388 = lshr i64 %load_tmp5.i387, 32
  %cast_tmp11.i25.i389 = and i64 %load_tmp5.i387, 4294967295
  %mul_tmp.i26.i390 = mul nuw i64 %cast_tmp11.i25.i389, %cast_tmp9.i.i370
  %mul_tmp16.i28.i391 = mul nuw i64 %rshift_tmp6.i22.i388, %cast_tmp9.i.i370
  %mul_tmp21.i31.i392 = mul nuw i64 %cast_tmp11.i25.i389, %rshift_tmp.i.i368
  %mul_tmp26.i32.i393 = mul nuw i64 %rshift_tmp6.i22.i388, %rshift_tmp.i.i368
  %rshift_tmp30.i34.i394 = lshr i64 %mul_tmp.i26.i390, 32
  %add_tmp.i35.i395 = add i64 %rshift_tmp30.i34.i394, %mul_tmp21.i31.i392
  %rshift_tmp38.i36.i396 = lshr i64 %add_tmp.i35.i395, 32
  %cast_tmp42.i38.i397 = and i64 %add_tmp.i35.i395, 4294967295
  %add_tmp43.i39.i398 = add i64 %cast_tmp42.i38.i397, %mul_tmp16.i28.i391
  %rshift_tmp47.i41.i399 = lshr i64 %add_tmp43.i39.i398, 32
  %add_tmp52.i43.i400 = add i64 %rshift_tmp38.i36.i396, %mul_tmp26.i32.i393
  %add_tmp55.i44.i401 = add i64 %add_tmp52.i43.i400, %rshift_tmp47.i41.i399
  %add_tmp.i402 = add i64 %add_tmp55.i44.i401, %bit_or_tmp.i.i386
  %46 = icmp ult i64 %add_tmp.i402, %add_tmp55.i44.i401
  %47 = zext i1 %46 to i64
  %load_tmp12.i403 = add i64 %add_tmp55.i.i383, %47
  %sub_tmp.i404 = add i32 %add_tmp225, -64
  %sub_tmp.i.i405 = sub i32 128, %add_tmp225
  %48 = zext i32 %sub_tmp.i.i405 to i64
  %lshift_tmp.i15.i406 = shl i64 %load_tmp12.i403, %48
  %49 = zext i32 %sub_tmp.i404 to i64
  %rshift_tmp.i16.i407 = lshr i64 %add_tmp.i402, %49
  %bit_or_tmp.i17.i408 = or i64 %lshift_tmp.i15.i406, %rshift_tmp.i16.i407
  br label %for_condition_check.i.i

for_condition_check.i.i:                          ; preds = %for.i.i, %else210
  %.09.i.i = phi i32 [ 0, %else210 ], [ %50, %for.i.i ]
  %.0.i.i.in = phi i64 [ %.0322, %else210 ], [ %.0.i.i, %for.i.i ]
  %.0.i.i = mul i64 %.0.i.i.in, -3689348814741910323
  %.not.i.i = icmp ugt i64 %.0.i.i, 3689348814741910323
  br i1 %.not.i.i, label %func.std.ryu.multipleOfPowerOf5..2.builtin.uint64.builtin.uint32.builtin.bool.exit, label %for.i.i

for.i.i:                                          ; preds = %for_condition_check.i.i
  %50 = add i32 %.09.i.i, 1
  br label %for_condition_check.i.i

func.std.ryu.multipleOfPowerOf5..2.builtin.uint64.builtin.uint32.builtin.bool.exit: ; preds = %for_condition_check.i.i
  %51 = icmp uge i32 %.09.i.i, %unary_minus_tmp215
  br label %endif233

endif233:                                         ; preds = %then179, %bool_and_rhs201, %bool_or_rhs197, %func.std.ryu.multipleOfPowerOf5..2.builtin.uint64.builtin.uint32.builtin.bool.exit
  %.0336 = phi i32 [ %sub_tmp217, %func.std.ryu.multipleOfPowerOf5..2.builtin.uint64.builtin.uint32.builtin.bool.exit ], [ %sub_tmp185, %bool_or_rhs197 ], [ %sub_tmp185, %bool_and_rhs201 ], [ %sub_tmp185, %then179 ]
  %.0314 = phi i64 [ %bit_or_tmp.i17.i408, %func.std.ryu.multipleOfPowerOf5..2.builtin.uint64.builtin.uint32.builtin.bool.exit ], [ %bit_or_tmp.i17.i, %bool_or_rhs197 ], [ %bit_or_tmp.i17.i, %bool_and_rhs201 ], [ %bit_or_tmp.i17.i, %then179 ]
  %storemerge = phi i1 [ %51, %func.std.ryu.multipleOfPowerOf5..2.builtin.uint64.builtin.uint32.builtin.bool.exit ], [ false, %bool_or_rhs197 ], [ %40, %bool_and_rhs201 ], [ true, %then179 ]
  %add_tmp235 = add i32 %.0336, 1023
  %52 = call i64 @llvm.ctlz.i64(i64 %.0314, i1 false), !range !44
  %cast_tmp.i = trunc i64 %52 to i32
  %sub_tmp.i = sub nsw i32 63, %cast_tmp.i
  %add_tmp237 = add i32 %add_tmp235, %sub_tmp.i
  %53 = icmp sgt i32 %add_tmp237, 0
  %load_tmp2.i = select i1 %53, i32 %add_tmp237, i32 0
  %54 = icmp ugt i32 %load_tmp2.i, 2046
  br i1 %54, label %then239, label %endif246

then239:                                          ; preds = %endif233
  %load_tmp.cast.i347 = select i1 %4, double 0xFFF0000000000000, double 0x7FF0000000000000
  store double %load_tmp.cast.i347, double* %2, align 8
  ret i32 0

endif246:                                         ; preds = %endif233
  %55 = icmp slt i32 %add_tmp237, 1
  %sub_tmp256 = sub i32 -1075, %.0336
  %sub_tmp258 = add i32 %sub_tmp256, %load_tmp2.i
  %sub_tmp252 = sub i32 -1074, %.0336
  %storemerge310 = select i1 %55, i32 %sub_tmp252, i32 %sub_tmp258
  %sub_tmp262 = add i32 %storemerge310, -1
  %56 = zext i32 %sub_tmp262 to i64
  %notmask = shl nsw i64 -1, %56
  %sub_tmp264 = xor i64 %notmask, -1
  %bit_and_tmp = and i64 %.0314, %sub_tmp264
  %57 = icmp eq i64 %bit_and_tmp, 0
  %bit_and_tmp266 = and i1 %storemerge, %57
  %58 = shl i64 1, %56
  %59 = and i64 %58, %.0314
  %.not = icmp eq i64 %59, 0
  %bit_and_tmp266.not = xor i1 %bit_and_tmp266, true
  %brmerge = or i1 %.not, %bit_and_tmp266.not
  br i1 %brmerge, label %endif246.bool_and_end281_crit_edge, label %bool_or_rhs274

endif246.bool_and_end281_crit_edge:               ; preds = %endif246
  %not..not = xor i1 %.not, true
  %.pre = zext i32 %storemerge310 to i64
  br label %bool_and_end281

bool_or_rhs274:                                   ; preds = %endif246
  %60 = zext i32 %storemerge310 to i64
  %61 = shl i64 1, %60
  %62 = and i64 %61, %.0314
  %63 = icmp ne i64 %62, 0
  br label %bool_and_end281

bool_and_end281:                                  ; preds = %endif246.bool_and_end281_crit_edge, %bool_or_rhs274
  %.pre-phi = phi i64 [ %.pre, %endif246.bool_and_end281_crit_edge ], [ %60, %bool_or_rhs274 ]
  %bool_and_tmp282 = phi i1 [ %not..not, %endif246.bool_and_end281_crit_edge ], [ %63, %bool_or_rhs274 ]
  %rshift_tmp285 = lshr i64 %.0314, %.pre-phi
  %cast_tmp287 = zext i1 %bool_and_tmp282 to i64
  %add_tmp288 = add i64 %rshift_tmp285, %cast_tmp287
  %bit_and_tmp290 = and i64 %add_tmp288, 4503599627370495
  %64 = icmp eq i64 %bit_and_tmp290, 0
  %spec.select345 = and i1 %bool_and_tmp282, %64
  %65 = zext i1 %spec.select345 to i32
  %.0 = add nuw i32 %load_tmp2.i, %65
  %lshift_tmp301 = select i1 %4, i64 2048, i64 0
  %cast_tmp303 = zext i32 %.0 to i64
  %bit_or_tmp304 = or i64 %lshift_tmp301, %cast_tmp303
  %lshift_tmp305 = shl i64 %bit_or_tmp304, 52
  %bit_or_tmp307 = or i64 %lshift_tmp305, %bit_and_tmp290
  %66 = bitcast double* %2 to i64*
  store i64 %bit_or_tmp307, i64* %66, align 8
  ret i32 0
}

define i32 @s2f_str(i8* %0, i8* %1, float* %2) {
alloca:
  %3 = alloca %builtin.str, align 8
  %4 = alloca %builtin.str, align 8
  %.repack = getelementptr inbounds %builtin.str, %builtin.str* %4, i64 0, i32 0
  store i8* %0, i8** %.repack, align 8
  %.repack3 = getelementptr inbounds %builtin.str, %builtin.str* %4, i64 0, i32 1
  store i8* %1, i8** %.repack3, align 8
  call void @llvm.experimental.noalias.scope.decl(metadata !45)
  %5 = bitcast %builtin.str* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5)
  %6 = bitcast %builtin.str* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %5, i8* nonnull align 8 dereferenceable(16) %6, i64 16, i1 false)
  %load_tmp.elt.i = getelementptr inbounds %builtin.str, %builtin.str* %3, i64 0, i32 0
  %load_tmp.unpack.i = load i8*, i8** %load_tmp.elt.i, align 8, !alias.scope !45
  %load_tmp1.elt6.i = getelementptr inbounds %builtin.str, %builtin.str* %3, i64 0, i32 1
  %load_tmp1.unpack7.i = load i8*, i8** %load_tmp1.elt6.i, align 8, !alias.scope !45
  %7 = ptrtoint i8* %load_tmp1.unpack7.i to i64
  %8 = ptrtoint i8* %load_tmp.unpack.i to i64
  %9 = sub i64 %7, %8
  %cast_tmp.i = trunc i64 %9 to i32
  %10 = call i32 @func.std.ryu.s2f_n..3.0P.const.builtin.uint8.builtin.int32.0P.builtin.float32.builtin.uint32(i8* %load_tmp.unpack.i, i32 %cast_tmp.i, float* %2), !noalias !45
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5)
  ret i32 %10
}

define i32 @func.std.ryu.s2f_str..2.builtin.str.0P.builtin.float32.builtin.uint32(%builtin.str* noalias nocapture nonnull byval(%builtin.str) %0, float* %1) {
alloca:
  %load_tmp.elt = getelementptr inbounds %builtin.str, %builtin.str* %0, i64 0, i32 0
  %load_tmp.unpack = load i8*, i8** %load_tmp.elt, align 8
  %load_tmp1.elt6 = getelementptr inbounds %builtin.str, %builtin.str* %0, i64 0, i32 1
  %load_tmp1.unpack7 = load i8*, i8** %load_tmp1.elt6, align 8
  %2 = ptrtoint i8* %load_tmp1.unpack7 to i64
  %3 = ptrtoint i8* %load_tmp.unpack to i64
  %4 = sub i64 %2, %3
  %cast_tmp = trunc i64 %4 to i32
  %5 = call i32 @func.std.ryu.s2f_n..3.0P.const.builtin.uint8.builtin.int32.0P.builtin.float32.builtin.uint32(i8* %load_tmp.unpack, i32 %cast_tmp, float* %1)
  ret i32 %5
}

define i32 @func.std.ryu.s2f_n..3.0P.const.builtin.uint8.builtin.int32.0P.builtin.float32.builtin.uint32(i8* %0, i32 %1, float* %2) {
alloca:
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %then, label %endif

then:                                             ; preds = %endif123, %for95, %else, %then28, %alloca
  %merge = phi i32 [ 1, %alloca ], [ 3, %then28 ], [ 2, %else ], [ 3, %for95 ], [ 3, %endif123 ]
  ret i32 %merge

endif:                                            ; preds = %alloca
  %load_tmp5 = load i8, i8* %0, align 1
  %4 = icmp eq i8 %load_tmp5, 45
  %spec.select = zext i1 %4 to i32
  br label %for_condition_check

for_condition_check:                              ; preds = %endif43, %endif
  %.1349 = phi i32 [ %spec.select, %endif ], [ %11, %endif43 ]
  %.0339 = phi i32 [ 0, %endif ], [ %.1340, %endif43 ]
  %.0336 = phi i32 [ %1, %endif ], [ %.1337, %endif43 ]
  %.0332 = phi i32 [ 0, %endif ], [ %.2, %endif43 ]
  %5 = icmp slt i32 %.1349, %1
  br i1 %5, label %bool_and_rhs, label %endif123

bool_and_rhs:                                     ; preds = %for_condition_check
  %6 = sext i32 %.1349 to i64
  %ptr_add_tmp13 = getelementptr i8, i8* %0, i64 %6
  %load_tmp14 = load i8, i8* %ptr_add_tmp13, align 1
  %cast_tmp15 = zext i8 %load_tmp14 to i32
  %load_tmp14.off = add i8 %load_tmp14, -48
  %7 = icmp ult i8 %load_tmp14.off, 10
  %8 = icmp eq i8 %load_tmp14, 46
  %bool_or_tmp = or i1 %8, %7
  br i1 %bool_or_tmp, label %for, label %bool_and_rhs47

for:                                              ; preds = %bool_and_rhs
  br i1 %8, label %then28, label %else

then28:                                           ; preds = %for
  %.not330 = icmp eq i32 %.0336, %1
  br i1 %.not330, label %endif43, label %then

else:                                             ; preds = %for
  %9 = icmp sgt i32 %.0332, 8
  br i1 %9, label %then, label %endif36

endif36:                                          ; preds = %else
  %mul_tmp = mul i32 %.0339, 10
  %sub_tmp = add i32 %mul_tmp, -48
  %add_tmp = add i32 %sub_tmp, %cast_tmp15
  %.not329 = icmp ne i32 %add_tmp, 0
  %10 = zext i1 %.not329 to i32
  %spec.select356 = add i32 %.0332, %10
  br label %endif43

endif43:                                          ; preds = %then28, %endif36
  %.1340 = phi i32 [ %add_tmp, %endif36 ], [ %.0339, %then28 ]
  %.1337 = phi i32 [ %.0336, %endif36 ], [ %.1349, %then28 ]
  %.2 = phi i32 [ %spec.select356, %endif36 ], [ %.0332, %then28 ]
  %11 = add i32 %.1349, 1
  br label %for_condition_check

bool_and_rhs47:                                   ; preds = %bool_and_rhs
  switch i8 %load_tmp14, label %endif123 [
    i8 101, label %then63
    i8 69, label %then63
  ]

then63:                                           ; preds = %bool_and_rhs47, %bool_and_rhs47
  %12 = add i32 %.1349, 1
  %13 = icmp slt i32 %12, %1
  br i1 %13, label %bool_and_rhs68, label %endif91

bool_and_rhs68:                                   ; preds = %then63
  %14 = sext i32 %12 to i64
  %ptr_add_tmp71 = getelementptr i8, i8* %0, i64 %14
  %load_tmp72 = load i8, i8* %ptr_add_tmp71, align 1
  switch i8 %load_tmp72, label %endif91 [
    i8 45, label %then84
    i8 43, label %then84
  ]

then84:                                           ; preds = %bool_and_rhs68, %bool_and_rhs68
  %15 = icmp eq i8 %load_tmp72, 45
  %16 = add i32 %.1349, 2
  br label %endif91

endif91:                                          ; preds = %bool_and_rhs68, %then63, %then84
  %.2350 = phi i32 [ %16, %then84 ], [ %12, %then63 ], [ %12, %bool_and_rhs68 ]
  %.0346 = phi i1 [ %15, %then84 ], [ false, %then63 ], [ false, %bool_and_rhs68 ]
  br label %for_condition_check92

for_condition_check92:                            ; preds = %endif120, %endif91
  %.3351 = phi i32 [ %.2350, %endif91 ], [ %22, %endif120 ]
  %.0341 = phi i32 [ 0, %endif91 ], [ %.1342, %endif120 ]
  %.0333 = phi i32 [ 0, %endif91 ], [ %.2335, %endif120 ]
  %17 = icmp slt i32 %.3351, %1
  br i1 %17, label %for95, label %endif123

for95:                                            ; preds = %for_condition_check92
  %18 = sext i32 %.3351 to i64
  %ptr_add_tmp98 = getelementptr i8, i8* %0, i64 %18
  %load_tmp99 = load i8, i8* %ptr_add_tmp98, align 1
  %cast_tmp100 = zext i8 %load_tmp99 to i32
  %load_tmp99.off = add i8 %load_tmp99, -48
  %19 = icmp ugt i8 %load_tmp99.off, 9
  br i1 %19, label %then, label %endif107

endif107:                                         ; preds = %for95
  %20 = icmp sgt i32 %.0333, 3
  br i1 %20, label %endif120, label %else110

else110:                                          ; preds = %endif107
  %mul_tmp112 = mul i32 %.0341, 10
  %sub_tmp114 = add i32 %mul_tmp112, -48
  %add_tmp115 = add i32 %sub_tmp114, %cast_tmp100
  %.not328 = icmp ne i32 %add_tmp115, 0
  %21 = zext i1 %.not328 to i32
  %spec.select358 = add i32 %.0333, %21
  br label %endif120

endif120:                                         ; preds = %endif107, %else110
  %.1342 = phi i32 [ %add_tmp115, %else110 ], [ %.0341, %endif107 ]
  %.2335 = phi i32 [ %spec.select358, %else110 ], [ %.0333, %endif107 ]
  %22 = add i32 %.3351, 1
  br label %for_condition_check92

endif123:                                         ; preds = %for_condition_check, %bool_and_rhs47, %for_condition_check92
  %.4352 = phi i32 [ %.3351, %for_condition_check92 ], [ %.1349, %bool_and_rhs47 ], [ %.1349, %for_condition_check ]
  %.1347 = phi i1 [ %.0346, %for_condition_check92 ], [ false, %bool_and_rhs47 ], [ false, %for_condition_check ]
  %.2343 = phi i32 [ %.0341, %for_condition_check92 ], [ 0, %bool_and_rhs47 ], [ 0, %for_condition_check ]
  %.0338 = phi i32 [ %.1349, %for_condition_check92 ], [ %1, %bool_and_rhs47 ], [ %1, %for_condition_check ]
  %.3 = phi i32 [ %.0333, %for_condition_check92 ], [ 0, %bool_and_rhs47 ], [ 0, %for_condition_check ]
  %23 = icmp slt i32 %.4352, %1
  br i1 %23, label %then, label %endif127

endif127:                                         ; preds = %endif123
  %unary_minus_tmp = sub i32 0, %.2343
  %spec.select359 = select i1 %.1347, i32 %unary_minus_tmp, i32 %.2343
  %24 = icmp slt i32 %.0336, %.0338
  %.neg394 = add i32 %.0336, 1
  %sub_tmp138.neg = sub i32 %.neg394, %.0338
  %sub_tmp140 = select i1 %24, i32 %sub_tmp138.neg, i32 0
  %.4 = add i32 %sub_tmp140, %spec.select359
  %25 = icmp sgt i32 %.3, 3
  %spec.select360 = and i1 %.1347, %25
  %add_tmp150 = add i32 %.4, %.0332
  %26 = icmp slt i32 %add_tmp150, -45
  %bool_or_tmp152 = or i1 %spec.select360, %26
  %27 = icmp eq i32 %.0339, 0
  %spec.select361 = or i1 %27, %bool_or_tmp152
  br i1 %spec.select361, label %then157, label %else162

then157:                                          ; preds = %endif127
  %load_tmp.cast.i = select i1 %4, float -0.000000e+00, float 0.000000e+00
  store float %load_tmp.cast.i, float* %2, align 4
  ret i32 0

else162:                                          ; preds = %endif127
  %28 = icmp sgt i32 %add_tmp150, 39
  %bool_or_tmp169 = or i1 %25, %28
  br i1 %bool_or_tmp169, label %then170, label %endif177

then170:                                          ; preds = %else162
  %load_tmp.cast.i391 = select i1 %4, float 0xFFF0000000000000, float 0x7FF0000000000000
  store float %load_tmp.cast.i391, float* %2, align 4
  ret i32 0

endif177:                                         ; preds = %else162
  %29 = icmp sgt i32 %.4, -1
  br i1 %29, label %then179, label %else210

then179:                                          ; preds = %endif177
  %30 = call i32 @llvm.ctlz.i32(i32 %.0339, i1 false), !range !48
  %mul_tmp.i = mul i32 %.4, 1217359
  %rshift_tmp.i = lshr i32 %mul_tmp.i, 19
  %add_tmp182 = sub nsw i32 7, %30
  %add_tmp184 = add i32 %add_tmp182, %.4
  %sub_tmp185 = add i32 %add_tmp184, %rshift_tmp.i
  %sub_tmp188 = sub i32 %sub_tmp185, %.4
  %31 = zext i32 %.4 to i64
  %32 = getelementptr [47 x i64], [47 x i64]* @std.ryu.FLOAT_POW5_SPLIT, i64 0, i64 %31
  %load_tmp2.i376 = load i64, i64* %32, align 8
  %rshift_tmp.i.i377 = lshr i64 %load_tmp2.i376, 32
  %cast_tmp4.i.i378 = zext i32 %.0339 to i64
  %cast_tmp6.i.i379 = and i64 %load_tmp2.i376, 4294967295
  %mul_tmp.i.i380 = mul nuw i64 %cast_tmp6.i.i379, %cast_tmp4.i.i378
  %mul_tmp11.i.i381 = mul nuw i64 %rshift_tmp.i.i377, %cast_tmp4.i.i378
  %rshift_tmp13.i.i382 = lshr i64 %mul_tmp.i.i380, 32
  %add_tmp.i.i383 = add i64 %rshift_tmp13.i.i382, %mul_tmp11.i.i381
  %add_tmp191 = sub nsw i32 28, %rshift_tmp.i
  %sub_tmp.i.i384 = add i32 %add_tmp191, %sub_tmp188
  %33 = zext i32 %sub_tmp.i.i384 to i64
  %rshift_tmp17.i.i385 = lshr i64 %add_tmp.i.i383, %33
  %34 = icmp slt i32 %sub_tmp185, %.4
  br i1 %34, label %endif251, label %bool_or_rhs197

bool_or_rhs197:                                   ; preds = %then179
  %35 = icmp slt i32 %sub_tmp188, 32
  br i1 %35, label %bool_and_rhs201, label %endif251

bool_and_rhs201:                                  ; preds = %bool_or_rhs197
  %notmask.i373 = shl nsw i32 -1, %sub_tmp188
  %sub_tmp.i374 = xor i32 %notmask.i373, -1
  %bit_and_tmp.i375 = and i32 %.0339, %sub_tmp.i374
  %36 = icmp eq i32 %bit_and_tmp.i375, 0
  br label %endif251

else210:                                          ; preds = %endif177
  %37 = call i32 @llvm.ctlz.i32(i32 %.0339, i1 false), !range !48
  %unary_minus_tmp215 = sub i32 0, %.4
  %mul_tmp.i.i369 = mul i32 %.4, -1217359
  %rshift_tmp.i.i370 = lshr i32 %mul_tmp.i.i369, 19
  %38 = add i32 %.4, 6
  %39 = add nuw nsw i32 %37, %rshift_tmp.i.i370
  %sub_tmp217 = sub i32 %38, %39
  %sub_tmp220 = sub i32 %sub_tmp217, %.4
  %40 = zext i32 %unary_minus_tmp215 to i64
  %41 = getelementptr [55 x i64], [55 x i64]* @std.ryu.FLOAT_POW5_INV_SPLIT, i64 0, i64 %40
  %load_tmp2.i366 = load i64, i64* %41, align 8
  %rshift_tmp.i.i = lshr i64 %load_tmp2.i366, 32
  %cast_tmp4.i.i = zext i32 %.0339 to i64
  %cast_tmp6.i.i = and i64 %load_tmp2.i366, 4294967295
  %mul_tmp.i.i = mul nuw i64 %cast_tmp6.i.i, %cast_tmp4.i.i
  %mul_tmp11.i.i = mul nuw i64 %rshift_tmp.i.i, %cast_tmp4.i.i
  %rshift_tmp13.i.i = lshr i64 %mul_tmp.i.i, 32
  %add_tmp.i.i = add i64 %rshift_tmp13.i.i, %mul_tmp11.i.i
  %add_tmp225 = add nuw nsw i32 %rshift_tmp.i.i370, 27
  %sub_tmp.i.i = add i32 %add_tmp225, %sub_tmp220
  %42 = zext i32 %sub_tmp.i.i to i64
  %rshift_tmp17.i.i = lshr i64 %add_tmp.i.i, %42
  %43 = icmp slt i32 %sub_tmp217, %.4
  br i1 %43, label %bool_and_rhs245, label %bool_or_rhs232

bool_or_rhs232:                                   ; preds = %else210
  %44 = icmp slt i32 %sub_tmp220, 32
  br i1 %44, label %bool_and_rhs236, label %endif251

bool_and_rhs236:                                  ; preds = %bool_or_rhs232
  %notmask.i = shl nsw i32 -1, %sub_tmp220
  %sub_tmp.i365 = xor i32 %notmask.i, -1
  %bit_and_tmp.i = and i32 %.0339, %sub_tmp.i365
  %45 = icmp eq i32 %bit_and_tmp.i, 0
  br i1 %45, label %bool_and_rhs245, label %endif251

bool_and_rhs245:                                  ; preds = %else210, %bool_and_rhs236
  br label %for_condition_check.i.i

for_condition_check.i.i:                          ; preds = %for.i.i, %bool_and_rhs245
  %.011.i.i.in = phi i32 [ %.0339, %bool_and_rhs245 ], [ %.010.i.i, %for.i.i ]
  %.0.i.i = phi i32 [ 0, %bool_and_rhs245 ], [ %47, %for.i.i ]
  %.011.i.i = urem i32 %.011.i.i.in, 5
  %46 = icmp eq i32 %.011.i.i, 0
  br i1 %46, label %for.i.i, label %func.std.ryu.multipleOfPowerOf5_32..2.builtin.uint32.builtin.uint32.builtin.bool.exit

for.i.i:                                          ; preds = %for_condition_check.i.i
  %.010.i.i = udiv i32 %.011.i.i.in, 5
  %47 = add i32 %.0.i.i, 1
  br label %for_condition_check.i.i

func.std.ryu.multipleOfPowerOf5_32..2.builtin.uint32.builtin.uint32.builtin.bool.exit: ; preds = %for_condition_check.i.i
  %48 = icmp uge i32 %.0.i.i, %unary_minus_tmp215
  br label %endif251

endif251:                                         ; preds = %bool_and_rhs236, %func.std.ryu.multipleOfPowerOf5_32..2.builtin.uint32.builtin.uint32.builtin.bool.exit, %bool_or_rhs232, %then179, %bool_and_rhs201, %bool_or_rhs197
  %.0353 = phi i32 [ %sub_tmp185, %bool_or_rhs197 ], [ %sub_tmp185, %bool_and_rhs201 ], [ %sub_tmp185, %then179 ], [ %sub_tmp217, %bool_or_rhs232 ], [ %sub_tmp217, %func.std.ryu.multipleOfPowerOf5_32..2.builtin.uint32.builtin.uint32.builtin.bool.exit ], [ %sub_tmp217, %bool_and_rhs236 ]
  %.0331.in = phi i64 [ %rshift_tmp17.i.i385, %bool_or_rhs197 ], [ %rshift_tmp17.i.i385, %bool_and_rhs201 ], [ %rshift_tmp17.i.i385, %then179 ], [ %rshift_tmp17.i.i, %bool_or_rhs232 ], [ %rshift_tmp17.i.i, %func.std.ryu.multipleOfPowerOf5_32..2.builtin.uint32.builtin.uint32.builtin.bool.exit ], [ %rshift_tmp17.i.i, %bool_and_rhs236 ]
  %storemerge = phi i1 [ false, %bool_or_rhs197 ], [ %36, %bool_and_rhs201 ], [ true, %then179 ], [ false, %bool_or_rhs232 ], [ %48, %func.std.ryu.multipleOfPowerOf5_32..2.builtin.uint32.builtin.uint32.builtin.bool.exit ], [ false, %bool_and_rhs236 ]
  %.0331 = trunc i64 %.0331.in to i32
  %add_tmp253 = add i32 %.0353, 127
  %49 = call i32 @llvm.ctlz.i32(i32 %.0331, i1 false), !range !48
  %sub_tmp.i = sub nsw i32 31, %49
  %add_tmp255 = add i32 %add_tmp253, %sub_tmp.i
  %50 = icmp sgt i32 %add_tmp255, 0
  %load_tmp2.i = select i1 %50, i32 %add_tmp255, i32 0
  %51 = icmp ugt i32 %load_tmp2.i, 254
  br i1 %51, label %then257, label %endif264

then257:                                          ; preds = %endif251
  %load_tmp.cast.i364 = select i1 %4, float 0xFFF0000000000000, float 0x7FF0000000000000
  store float %load_tmp.cast.i364, float* %2, align 4
  ret i32 0

endif264:                                         ; preds = %endif251
  %52 = icmp slt i32 %add_tmp255, 1
  %sub_tmp274 = sub i32 -150, %.0353
  %sub_tmp276 = add i32 %sub_tmp274, %load_tmp2.i
  %sub_tmp270 = sub i32 -149, %.0353
  %storemerge327 = select i1 %52, i32 %sub_tmp270, i32 %sub_tmp276
  %sub_tmp280 = add i32 %storemerge327, -1
  %notmask = shl nsw i32 -1, %sub_tmp280
  %sub_tmp282 = xor i32 %notmask, -1
  %bit_and_tmp = and i32 %sub_tmp282, %.0331
  %53 = icmp eq i32 %bit_and_tmp, 0
  %bit_and_tmp284 = and i1 %storemerge, %53
  %54 = shl i32 1, %sub_tmp280
  %55 = and i32 %54, %.0331
  %.not = icmp eq i32 %55, 0
  %bit_and_tmp284.not = xor i1 %bit_and_tmp284, true
  %brmerge = or i1 %.not, %bit_and_tmp284.not
  %not..not = xor i1 %.not, true
  br i1 %brmerge, label %bool_and_end299, label %bool_or_rhs292

bool_or_rhs292:                                   ; preds = %endif264
  %56 = shl i32 1, %storemerge327
  %57 = and i32 %56, %.0331
  %58 = icmp ne i32 %57, 0
  br label %bool_and_end299

bool_and_end299:                                  ; preds = %endif264, %bool_or_rhs292
  %bool_and_tmp300 = phi i1 [ %not..not, %endif264 ], [ %58, %bool_or_rhs292 ]
  %rshift_tmp303 = lshr i32 %.0331, %storemerge327
  %cast_tmp305 = zext i1 %bool_and_tmp300 to i32
  %add_tmp306 = add i32 %rshift_tmp303, %cast_tmp305
  %bit_and_tmp308 = and i32 %add_tmp306, 8388607
  %59 = icmp eq i32 %bit_and_tmp308, 0
  %spec.select362 = and i1 %bool_and_tmp300, %59
  %60 = zext i1 %spec.select362 to i32
  %.0 = add nuw i32 %load_tmp2.i, %60
  %lshift_tmp319 = select i1 %4, i32 256, i32 0
  %bit_or_tmp321 = or i32 %.0, %lshift_tmp319
  %lshift_tmp322 = shl i32 %bit_or_tmp321, 23
  %bit_or_tmp324 = or i32 %lshift_tmp322, %bit_and_tmp308
  %61 = bitcast float* %2 to i32*
  store i32 %bit_or_tmp324, i32* %61, align 4
  ret i32 0
}

define i32 @func.std.ryu.log10Pow2..1.builtin.uint32.builtin.uint32(i32 %0) {
alloca:
  %mul_tmp = mul i32 %0, 78913
  %rshift_tmp = lshr i32 %mul_tmp, 18
  ret i32 %rshift_tmp
}

define i32 @func.std.ryu.pow5bits..1.builtin.uint32.builtin.uint32(i32 %0) {
alloca:
  %mul_tmp = mul i32 %0, 1217359
  %rshift_tmp = lshr i32 %mul_tmp, 19
  %add_tmp = add nuw nsw i32 %rshift_tmp, 1
  ret i32 %add_tmp
}

define i64 @func.std.ryu.mulShiftAll64..6.builtin.uint64.0P.const.builtin.uint64.builtin.uint32.0P.builtin.uint64.0P.builtin.uint64.builtin.uint32.builtin.uint64(i64 %0, i64* %1, i32 %2, i64* %3, i64* %4, i32 %5) {
alloca:
  %lshift_tmp = shl i64 %0, 1
  %load_tmp3 = load i64, i64* %1, align 8
  %6 = lshr i64 %0, 31
  %rshift_tmp6.i = lshr i64 %load_tmp3, 32
  %cast_tmp9.i = and i64 %lshift_tmp, 4294967294
  %cast_tmp11.i = and i64 %load_tmp3, 4294967295
  %mul_tmp.i = mul nuw i64 %cast_tmp11.i, %cast_tmp9.i
  %mul_tmp16.i = mul nuw i64 %rshift_tmp6.i, %cast_tmp9.i
  %cast_tmp18.i = and i64 %6, 4294967295
  %mul_tmp21.i = mul nuw i64 %cast_tmp11.i, %cast_tmp18.i
  %mul_tmp26.i = mul nuw i64 %rshift_tmp6.i, %cast_tmp18.i
  %rshift_tmp30.i = lshr i64 %mul_tmp.i, 32
  %add_tmp.i = add i64 %rshift_tmp30.i, %mul_tmp21.i
  %rshift_tmp38.i = lshr i64 %add_tmp.i, 32
  %cast_tmp42.i = and i64 %add_tmp.i, 4294967295
  %add_tmp43.i = add i64 %cast_tmp42.i, %mul_tmp16.i
  %rshift_tmp47.i = lshr i64 %add_tmp43.i, 32
  %add_tmp52.i = add i64 %rshift_tmp38.i, %mul_tmp26.i
  %add_tmp55.i = add i64 %add_tmp52.i, %rshift_tmp47.i
  %cast_tmp57.i = shl i64 %add_tmp43.i, 32
  %cast_tmp59.i = and i64 %mul_tmp.i, 4294967294
  %bit_or_tmp.i = or i64 %cast_tmp57.i, %cast_tmp59.i
  %ptr_add_tmp = getelementptr i64, i64* %1, i64 1
  %load_tmp7 = load i64, i64* %ptr_add_tmp, align 8
  %rshift_tmp6.i126 = lshr i64 %load_tmp7, 32
  %cast_tmp11.i129 = and i64 %load_tmp7, 4294967295
  %mul_tmp.i130 = mul nuw i64 %cast_tmp11.i129, %cast_tmp9.i
  %mul_tmp16.i132 = mul nuw i64 %rshift_tmp6.i126, %cast_tmp9.i
  %mul_tmp21.i135 = mul nuw i64 %cast_tmp11.i129, %cast_tmp18.i
  %mul_tmp26.i136 = mul nuw i64 %rshift_tmp6.i126, %cast_tmp18.i
  %rshift_tmp30.i138 = lshr i64 %mul_tmp.i130, 32
  %add_tmp.i139 = add i64 %rshift_tmp30.i138, %mul_tmp21.i135
  %rshift_tmp38.i140 = lshr i64 %add_tmp.i139, 32
  %cast_tmp42.i142 = and i64 %add_tmp.i139, 4294967295
  %add_tmp43.i143 = add i64 %cast_tmp42.i142, %mul_tmp16.i132
  %rshift_tmp47.i145 = lshr i64 %add_tmp43.i143, 32
  %add_tmp52.i147 = add i64 %rshift_tmp38.i140, %mul_tmp26.i136
  %add_tmp55.i148 = add i64 %add_tmp52.i147, %rshift_tmp47.i145
  %cast_tmp57.i149 = shl i64 %add_tmp43.i143, 32
  %cast_tmp59.i151 = and i64 %mul_tmp.i130, 4294967294
  %bit_or_tmp.i152 = or i64 %cast_tmp57.i149, %cast_tmp59.i151
  %add_tmp = add i64 %bit_or_tmp.i152, %add_tmp55.i
  %7 = icmp ult i64 %add_tmp, %add_tmp55.i
  %add_tmp11 = zext i1 %7 to i64
  %.0 = add i64 %add_tmp55.i148, %add_tmp11
  %add_tmp20 = add i64 %add_tmp, %load_tmp7
  %8 = xor i64 %bit_or_tmp.i, -1
  %9 = icmp ugt i64 %load_tmp3, %8
  %cast_tmp = zext i1 %9 to i64
  %add_tmp23 = add i64 %add_tmp20, %cast_tmp
  %10 = icmp ult i64 %add_tmp23, %add_tmp
  %cast_tmp27 = zext i1 %10 to i64
  %add_tmp28 = add i64 %.0, %cast_tmp27
  %sub_tmp32 = add i32 %2, -65
  %sub_tmp.i118 = sub i32 129, %2
  %11 = zext i32 %sub_tmp.i118 to i64
  %lshift_tmp.i119 = shl i64 %add_tmp28, %11
  %12 = zext i32 %sub_tmp32 to i64
  %rshift_tmp.i120 = lshr i64 %add_tmp23, %12
  %bit_or_tmp.i121 = or i64 %lshift_tmp.i119, %rshift_tmp.i120
  store i64 %bit_or_tmp.i121, i64* %3, align 8
  %13 = icmp eq i32 %5, 1
  br i1 %13, label %then35, label %else

then35:                                           ; preds = %alloca
  %load_tmp38 = load i64, i64* %1, align 8
  %load_tmp43 = load i64, i64* %ptr_add_tmp, align 8
  %sub_tmp44 = sub i64 %add_tmp, %load_tmp43
  %14 = icmp ugt i64 %load_tmp38, %bit_or_tmp.i
  %cast_tmp47.neg = sext i1 %14 to i64
  %sub_tmp48 = add i64 %sub_tmp44, %cast_tmp47.neg
  %15 = icmp ugt i64 %sub_tmp48, %add_tmp
  %cast_tmp52.neg = sext i1 %15 to i64
  %sub_tmp53 = add i64 %.0, %cast_tmp52.neg
  %lshift_tmp.i115 = shl i64 %sub_tmp53, %11
  %rshift_tmp.i116 = lshr i64 %sub_tmp48, %12
  %bit_or_tmp.i117 = or i64 %lshift_tmp.i115, %rshift_tmp.i116
  br label %endif100

else:                                             ; preds = %alloca
  %add_tmp62 = shl i64 %bit_or_tmp.i, 1
  %add_tmp65 = shl i64 %add_tmp, 1
  %16 = icmp ult i64 %add_tmp62, %bit_or_tmp.i
  %cast_tmp68 = zext i1 %16 to i64
  %add_tmp69 = or i64 %add_tmp65, %cast_tmp68
  %add_tmp72 = shl i64 %.0, 1
  %17 = icmp ult i64 %add_tmp69, %add_tmp
  %cast_tmp75 = zext i1 %17 to i64
  %add_tmp76 = or i64 %add_tmp72, %cast_tmp75
  %load_tmp79 = load i64, i64* %1, align 8
  %load_tmp84 = load i64, i64* %ptr_add_tmp, align 8
  %sub_tmp85 = sub i64 %add_tmp69, %load_tmp84
  %18 = icmp ugt i64 %load_tmp79, %add_tmp62
  %cast_tmp88.neg = sext i1 %18 to i64
  %sub_tmp89 = add i64 %sub_tmp85, %cast_tmp88.neg
  %19 = icmp ugt i64 %sub_tmp89, %add_tmp69
  %cast_tmp93.neg = sext i1 %19 to i64
  %sub_tmp94 = add i64 %add_tmp76, %cast_tmp93.neg
  %sub_tmp98 = add i32 %2, -64
  %sub_tmp.i110 = sub i32 128, %2
  %20 = zext i32 %sub_tmp.i110 to i64
  %lshift_tmp.i111 = shl i64 %sub_tmp94, %20
  %21 = zext i32 %sub_tmp98 to i64
  %rshift_tmp.i112 = lshr i64 %sub_tmp89, %21
  %bit_or_tmp.i113 = or i64 %lshift_tmp.i111, %rshift_tmp.i112
  br label %endif100

endif100:                                         ; preds = %else, %then35
  %storemerge = phi i64 [ %bit_or_tmp.i113, %else ], [ %bit_or_tmp.i117, %then35 ]
  store i64 %storemerge, i64* %4, align 8
  %lshift_tmp.i107 = shl i64 %.0, %11
  %rshift_tmp.i108 = lshr i64 %add_tmp, %12
  %bit_or_tmp.i109 = or i64 %lshift_tmp.i107, %rshift_tmp.i108
  ret i64 %bit_or_tmp.i109
}

define i64 @func.std.ryu.umul128..3.builtin.uint64.builtin.uint64.0P.builtin.uint64.builtin.uint64(i64 %0, i64 %1, i64* %2) {
alloca:
  %rshift_tmp = lshr i64 %0, 32
  %rshift_tmp6 = lshr i64 %1, 32
  %cast_tmp9 = and i64 %0, 4294967295
  %cast_tmp11 = and i64 %1, 4294967295
  %mul_tmp = mul nuw i64 %cast_tmp11, %cast_tmp9
  %mul_tmp16 = mul nuw i64 %rshift_tmp6, %cast_tmp9
  %mul_tmp21 = mul nuw i64 %cast_tmp11, %rshift_tmp
  %mul_tmp26 = mul nuw i64 %rshift_tmp6, %rshift_tmp
  %rshift_tmp30 = lshr i64 %mul_tmp, 32
  %add_tmp = add i64 %rshift_tmp30, %mul_tmp21
  %rshift_tmp38 = lshr i64 %add_tmp, 32
  %cast_tmp42 = and i64 %add_tmp, 4294967295
  %add_tmp43 = add i64 %cast_tmp42, %mul_tmp16
  %rshift_tmp47 = lshr i64 %add_tmp43, 32
  %add_tmp52 = add i64 %rshift_tmp38, %mul_tmp26
  %add_tmp55 = add i64 %add_tmp52, %rshift_tmp47
  %cast_tmp57 = shl i64 %add_tmp43, 32
  %cast_tmp59 = and i64 %mul_tmp, 4294967295
  %bit_or_tmp = or i64 %cast_tmp57, %cast_tmp59
  store i64 %add_tmp55, i64* %2, align 8
  ret i64 %bit_or_tmp
}

define i64 @func.std.ryu.shiftright128..3.builtin.uint64.builtin.uint64.builtin.uint32.builtin.uint64(i64 %0, i64 %1, i32 %2) {
alloca:
  %sub_tmp = sub i32 64, %2
  %3 = zext i32 %sub_tmp to i64
  %lshift_tmp = shl i64 %1, %3
  %4 = zext i32 %2 to i64
  %rshift_tmp = lshr i64 %0, %4
  %bit_or_tmp = or i64 %lshift_tmp, %rshift_tmp
  ret i64 %bit_or_tmp
}

define i64 @func.std.ryu.div5..1.builtin.uint64.builtin.uint64(i64 %0) {
alloca:
  %div_tmp = udiv i64 %0, 5
  ret i64 %div_tmp
}

define i1 @func.std.ryu.multipleOfPowerOf5..2.builtin.uint64.builtin.uint32.builtin.bool(i64 %0, i32 %1) {
alloca:
  br label %for_condition_check.i

for_condition_check.i:                            ; preds = %for.i, %alloca
  %.09.i = phi i32 [ 0, %alloca ], [ %2, %for.i ]
  %.0.i.in = phi i64 [ %0, %alloca ], [ %.0.i, %for.i ]
  %.0.i = mul i64 %.0.i.in, -3689348814741910323
  %.not.i = icmp ugt i64 %.0.i, 3689348814741910323
  br i1 %.not.i, label %func.std.ryu.pow5Factor..1.builtin.uint64.builtin.uint32.exit, label %for.i

for.i:                                            ; preds = %for_condition_check.i
  %2 = add i32 %.09.i, 1
  br label %for_condition_check.i

func.std.ryu.pow5Factor..1.builtin.uint64.builtin.uint32.exit: ; preds = %for_condition_check.i
  %3 = icmp uge i32 %.09.i, %1
  ret i1 %3
}

define i32 @func.std.ryu.pow5Factor..1.builtin.uint64.builtin.uint32(i64 %0) {
alloca:
  br label %for_condition_check

for_condition_check:                              ; preds = %for, %alloca
  %.09 = phi i32 [ 0, %alloca ], [ %1, %for ]
  %.0.in = phi i64 [ %0, %alloca ], [ %.0, %for ]
  %.0 = mul i64 %.0.in, -3689348814741910323
  %.not = icmp ugt i64 %.0, 3689348814741910323
  br i1 %.not, label %endfor, label %for

for:                                              ; preds = %for_condition_check
  %1 = add i32 %.09, 1
  br label %for_condition_check

endfor:                                           ; preds = %for_condition_check
  ret i32 %.09
}

define i32 @func.std.ryu.log10Pow5..1.builtin.uint32.builtin.uint32(i32 %0) {
alloca:
  %mul_tmp = mul i32 %0, 732923
  %rshift_tmp = lshr i32 %mul_tmp, 20
  ret i32 %rshift_tmp
}

define i1 @func.std.ryu.multipleOfPowerOf2..2.builtin.uint64.builtin.uint32.builtin.bool(i64 %0, i32 %1) {
alloca:
  %2 = zext i32 %1 to i64
  %notmask = shl nsw i64 -1, %2
  %sub_tmp = xor i64 %notmask, -1
  %bit_and_tmp = and i64 %sub_tmp, %0
  %3 = icmp eq i64 %bit_and_tmp, 0
  ret i1 %3
}

define i64 @func.std.ryu.div100..1.builtin.uint64.builtin.uint64(i64 %0) {
alloca:
  %div_tmp = udiv i64 %0, 100
  ret i64 %div_tmp
}

define i64 @func.std.ryu.div1e8..1.builtin.uint64.builtin.uint64(i64 %0) {
alloca:
  %div_tmp = udiv i64 %0, 100000000
  ret i64 %div_tmp
}

define i32 @func.std.ryu.d2s_buffered_n..2.builtin.float64.0P.builtin.uint8.builtin.int32(double %0, i8* %1) {
alloca:
  %2 = alloca %"struct.std::ryu::floating_decimal_64", align 8
  %3 = alloca %"struct.std::ryu::floating_decimal_64", align 8
  %4 = alloca %"struct.std::ryu::floating_decimal_64", align 8
  %load_tmp.cast.i = bitcast double %0 to i64
  %5 = icmp slt i64 %load_tmp.cast.i, 0
  %bit_and_tmp3 = and i64 %load_tmp.cast.i, 4503599627370495
  %rshift_tmp5 = lshr i64 %load_tmp.cast.i, 52
  %6 = trunc i64 %rshift_tmp5 to i32
  %cast_tmp = and i32 %6, 2047
  switch i32 %cast_tmp, label %endif [
    i32 2047, label %then
    i32 0, label %bool_and_rhs
  ]

bool_and_rhs:                                     ; preds = %alloca
  %7 = icmp eq i64 %bit_and_tmp3, 0
  br i1 %7, label %then, label %endif

then:                                             ; preds = %alloca, %bool_and_rhs
  %.not = icmp eq i32 %cast_tmp, 0
  %.not49 = icmp eq i64 %bit_and_tmp3, 0
  br i1 %.not49, label %endif.i42, label %then.i41

then.i41:                                         ; preds = %then
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 dereferenceable(3) %1, i8* nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 3, i1 false)
  br label %func.std.ryu.copy_special_str..4.0P.builtin.uint8.builtin.bool.builtin.bool.builtin.bool.builtin.int32.exit

endif.i42:                                        ; preds = %then
  br i1 %5, label %then3.i, label %endif5.i

then3.i:                                          ; preds = %endif.i42
  store i8 45, i8* %1, align 1
  br label %endif5.i

endif5.i:                                         ; preds = %then3.i, %endif.i42
  br i1 %.not, label %endif17.i, label %then7.i43

then7.i43:                                        ; preds = %endif5.i
  %ptr_add_tmp.i = getelementptr i8, i8* %1, i64 1
  %8 = select i1 %5, i8* %ptr_add_tmp.i, i8* %1
  %9 = bitcast i8* %8 to i64*
  store i64 8751735898823355977, i64* %9, align 1
  %spec.select.i = select i1 %5, i32 9, i32 8
  br label %func.std.ryu.copy_special_str..4.0P.builtin.uint8.builtin.bool.builtin.bool.builtin.bool.builtin.int32.exit

endif17.i:                                        ; preds = %endif5.i
  %ptr_add_tmp21.i = getelementptr i8, i8* %1, i64 1
  %10 = select i1 %5, i8* %ptr_add_tmp21.i, i8* %1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 dereferenceable(3) %10, i8* nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i64 3, i1 false)
  %11 = select i1 %5, i32 4, i32 3
  br label %func.std.ryu.copy_special_str..4.0P.builtin.uint8.builtin.bool.builtin.bool.builtin.bool.builtin.int32.exit

func.std.ryu.copy_special_str..4.0P.builtin.uint8.builtin.bool.builtin.bool.builtin.bool.builtin.int32.exit: ; preds = %endif17.i, %then7.i43, %then.i41
  %12 = phi i32 [ 3, %then.i41 ], [ %spec.select.i, %then7.i43 ], [ %11, %endif17.i ]
  ret i32 %12

endif:                                            ; preds = %alloca, %bool_and_rhs
  store %"struct.std::ryu::floating_decimal_64" zeroinitializer, %"struct.std::ryu::floating_decimal_64"* %3, align 8
  %bit_or_tmp.i = or i64 %bit_and_tmp3, 4503599627370496
  %cast_tmp.off = add nsw i32 %cast_tmp, -1023
  %13 = icmp ugt i32 %cast_tmp.off, 52
  br i1 %13, label %else, label %endif6.i

endif6.i:                                         ; preds = %endif
  %unary_minus_tmp.i47 = sub nsw i32 1075, %cast_tmp
  %14 = zext i32 %unary_minus_tmp.i47 to i64
  %notmask.i = shl nsw i64 -1, %14
  %sub_tmp8.i = xor i64 %notmask.i, -1
  %bit_and_tmp.i = and i64 %bit_or_tmp.i, %sub_tmp8.i
  %.not.i48 = icmp eq i64 %bit_and_tmp.i, 0
  br i1 %.not.i48, label %endif13.i, label %else

endif13.i:                                        ; preds = %endif6.i
  %rshift_tmp.i = lshr i64 %bit_or_tmp.i, %14
  %15 = getelementptr inbounds %"struct.std::ryu::floating_decimal_64", %"struct.std::ryu::floating_decimal_64"* %3, i64 0, i32 0
  store i64 %rshift_tmp.i, i64* %15, align 8
  %16 = getelementptr inbounds %"struct.std::ryu::floating_decimal_64", %"struct.std::ryu::floating_decimal_64"* %3, i64 0, i32 1
  store i32 0, i32* %16, align 8
  %div_tmp.i45 = udiv i64 %rshift_tmp.i, 10
  %cast_tmp20 = trunc i64 %rshift_tmp.i to i32
  %cast_tmp22 = trunc i64 %div_tmp.i45 to i32
  %mul_tmp.neg = mul i32 %cast_tmp22, -10
  %sub_tmp = add i32 %mul_tmp.neg, %cast_tmp20
  br label %for_condition_check

for_condition_check:                              ; preds = %for, %endif13.i
  %load_tmp32 = phi i32 [ 0, %endif13.i ], [ %18, %for ]
  %.040 = phi i64 [ %div_tmp.i45, %endif13.i ], [ %div_tmp.i44, %for ]
  %.0 = phi i32 [ %sub_tmp, %endif13.i ], [ %sub_tmp31, %for ]
  %17 = icmp eq i32 %.0, 0
  br i1 %17, label %for, label %endif37

for:                                              ; preds = %for_condition_check
  store i64 %.040, i64* %15, align 8
  %div_tmp.i44 = udiv i64 %.040, 10
  %cast_tmp27 = trunc i64 %.040 to i32
  %cast_tmp29 = trunc i64 %div_tmp.i44 to i32
  %mul_tmp30.neg = mul i32 %cast_tmp29, -10
  %sub_tmp31 = add i32 %mul_tmp30.neg, %cast_tmp27
  %18 = add i32 %load_tmp32, 1
  store i32 %18, i32* %16, align 8
  br label %for_condition_check

else:                                             ; preds = %endif6.i, %endif
  call void @"func.std.ryu.d2d..2.builtin.uint64.builtin.uint32.struct.std::ryu::floating_decimal_64"(%"struct.std::ryu::floating_decimal_64"* sret(%"struct.std::ryu::floating_decimal_64") %4, i64 %bit_and_tmp3, i32 %cast_tmp)
  %19 = getelementptr inbounds %"struct.std::ryu::floating_decimal_64", %"struct.std::ryu::floating_decimal_64"* %3, i64 0, i32 0
  %20 = getelementptr inbounds %"struct.std::ryu::floating_decimal_64", %"struct.std::ryu::floating_decimal_64"* %4, i64 0, i32 0
  %load_tmp35 = load i64, i64* %20, align 8
  store i64 %load_tmp35, i64* %19, align 8
  %21 = getelementptr inbounds %"struct.std::ryu::floating_decimal_64", %"struct.std::ryu::floating_decimal_64"* %3, i64 0, i32 1
  %22 = getelementptr inbounds %"struct.std::ryu::floating_decimal_64", %"struct.std::ryu::floating_decimal_64"* %4, i64 0, i32 1
  %load_tmp36 = load i32, i32* %22, align 8
  store i32 %load_tmp36, i32* %21, align 8
  br label %endif37

endif37:                                          ; preds = %for_condition_check, %else
  call void @llvm.experimental.noalias.scope.decl(metadata !49)
  %23 = bitcast %"struct.std::ryu::floating_decimal_64"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %23)
  %24 = bitcast %"struct.std::ryu::floating_decimal_64"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %23, i8* nonnull align 8 dereferenceable(16) %24, i64 16, i1 false)
  br i1 %5, label %then.i, label %endif.i

then.i:                                           ; preds = %endif37
  store i8 45, i8* %1, align 1, !noalias !49
  br label %endif.i

endif.i:                                          ; preds = %then.i, %endif37
  %.0226.i = phi i32 [ 1, %then.i ], [ 0, %endif37 ]
  %25 = getelementptr inbounds %"struct.std::ryu::floating_decimal_64", %"struct.std::ryu::floating_decimal_64"* %2, i64 0, i32 0
  %load_tmp4.i = load i64, i64* %25, align 8, !alias.scope !49
  %26 = icmp ugt i64 %load_tmp4.i, 9999999999999999
  br i1 %26, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i, label %else.i.i

else.i.i:                                         ; preds = %endif.i
  %27 = icmp ugt i64 %load_tmp4.i, 999999999999999
  br i1 %27, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i, label %else3.i.i

else3.i.i:                                        ; preds = %else.i.i
  %28 = icmp ugt i64 %load_tmp4.i, 99999999999999
  br i1 %28, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i, label %else6.i.i

else6.i.i:                                        ; preds = %else3.i.i
  %29 = icmp ugt i64 %load_tmp4.i, 9999999999999
  br i1 %29, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i, label %else9.i.i

else9.i.i:                                        ; preds = %else6.i.i
  %30 = icmp ugt i64 %load_tmp4.i, 999999999999
  br i1 %30, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i, label %else12.i.i

else12.i.i:                                       ; preds = %else9.i.i
  %31 = icmp ugt i64 %load_tmp4.i, 99999999999
  br i1 %31, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i, label %else15.i.i

else15.i.i:                                       ; preds = %else12.i.i
  %32 = icmp ugt i64 %load_tmp4.i, 9999999999
  br i1 %32, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i, label %else18.i.i

else18.i.i:                                       ; preds = %else15.i.i
  %33 = icmp ugt i64 %load_tmp4.i, 999999999
  br i1 %33, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i, label %else21.i.i

else21.i.i:                                       ; preds = %else18.i.i
  %34 = icmp ugt i64 %load_tmp4.i, 99999999
  br i1 %34, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i, label %else24.i.i

else24.i.i:                                       ; preds = %else21.i.i
  %35 = icmp ugt i64 %load_tmp4.i, 9999999
  br i1 %35, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i, label %else27.i.i

else27.i.i:                                       ; preds = %else24.i.i
  %36 = icmp ugt i64 %load_tmp4.i, 999999
  br i1 %36, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i, label %else30.i.i

else30.i.i:                                       ; preds = %else27.i.i
  %37 = icmp ugt i64 %load_tmp4.i, 99999
  br i1 %37, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i, label %else33.i.i

else33.i.i:                                       ; preds = %else30.i.i
  %38 = icmp ugt i64 %load_tmp4.i, 9999
  br i1 %38, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i, label %else36.i.i

else36.i.i:                                       ; preds = %else33.i.i
  %39 = icmp ugt i64 %load_tmp4.i, 999
  br i1 %39, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i, label %else39.i.i

else39.i.i:                                       ; preds = %else36.i.i
  %40 = icmp ugt i64 %load_tmp4.i, 99
  br i1 %40, label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i, label %else42.i.i

else42.i.i:                                       ; preds = %else39.i.i
  %41 = icmp ugt i64 %load_tmp4.i, 9
  %42 = select i1 %41, i32 2, i32 1
  br label %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i

func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i: ; preds = %else42.i.i, %else39.i.i, %else36.i.i, %else33.i.i, %else30.i.i, %else27.i.i, %else24.i.i, %else21.i.i, %else18.i.i, %else15.i.i, %else12.i.i, %else9.i.i, %else6.i.i, %else3.i.i, %else.i.i, %endif.i
  %43 = phi i32 [ 17, %endif.i ], [ 16, %else.i.i ], [ 15, %else3.i.i ], [ 14, %else6.i.i ], [ 13, %else9.i.i ], [ 12, %else12.i.i ], [ 11, %else15.i.i ], [ 10, %else18.i.i ], [ 9, %else21.i.i ], [ 8, %else24.i.i ], [ 7, %else27.i.i ], [ 6, %else30.i.i ], [ 5, %else33.i.i ], [ 4, %else36.i.i ], [ 3, %else39.i.i ], [ %42, %else42.i.i ]
  %.not.i = icmp ult i64 %load_tmp4.i, 4294967296
  br i1 %.not.i, label %endif.endif68_crit_edge.i, label %then7.i

endif.endif68_crit_edge.i:                        ; preds = %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i
  %.pre.i = trunc i64 %load_tmp4.i to i32
  br label %endif68.i

then7.i:                                          ; preds = %func.std.ryu.decimalLength17..1.builtin.uint64.builtin.uint32.exit.i
  %div_tmp.i.i = udiv i64 %load_tmp4.i, 100000000
  %cast_tmp.i = trunc i64 %load_tmp4.i to i32
  %cast_tmp11.i = trunc i64 %div_tmp.i.i to i32
  %mul_tmp.neg.i = mul i32 %cast_tmp11.i, -100000000
  %sub_tmp.i = add i32 %mul_tmp.neg.i, %cast_tmp.i
  %mod_tmp.i = urem i32 %sub_tmp.i, 10000
  %div_tmp.i = udiv i32 %sub_tmp.i, 10000
  %mod_tmp16.i = urem i32 %div_tmp.i, 10000
  %mod_tmp18.i = urem i32 %mod_tmp.i, 100
  %lshift_tmp.i = shl nuw nsw i32 %mod_tmp18.i, 1
  %div_tmp20.i = udiv i32 %mod_tmp.i, 100
  %lshift_tmp21.i = shl nuw nsw i32 %div_tmp20.i, 1
  %mod_tmp23.i = urem i32 %mod_tmp16.i, 100
  %lshift_tmp24.i = shl nuw nsw i32 %mod_tmp23.i, 1
  %div_tmp26.i = udiv i32 %mod_tmp16.i, 100
  %lshift_tmp27.i = shl nuw nsw i32 %div_tmp26.i, 1
  %44 = zext i32 %.0226.i to i64
  %ptr_add_tmp30.i = getelementptr i8, i8* %1, i64 %44
  %45 = zext i32 %43 to i64
  %ptr_add_tmp32.i = getelementptr i8, i8* %ptr_add_tmp30.i, i64 %45
  %ptr_sub_tmp34.i = getelementptr i8, i8* %ptr_add_tmp32.i, i64 -1
  %46 = zext i32 %lshift_tmp.i to i64
  %ptr_add_tmp36.i = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %46
  %47 = bitcast i8* %ptr_add_tmp36.i to i16*
  %48 = bitcast i8* %ptr_sub_tmp34.i to i16*
  %49 = load i16, i16* %47, align 2, !noalias !49
  store i16 %49, i16* %48, align 1, !noalias !49
  %ptr_sub_tmp44.i = getelementptr i8, i8* %ptr_add_tmp32.i, i64 -3
  %50 = zext i32 %lshift_tmp21.i to i64
  %ptr_add_tmp46.i = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %50
  %51 = bitcast i8* %ptr_add_tmp46.i to i16*
  %52 = bitcast i8* %ptr_sub_tmp44.i to i16*
  %53 = load i16, i16* %51, align 2, !noalias !49
  store i16 %53, i16* %52, align 1, !noalias !49
  %ptr_sub_tmp54.i = getelementptr i8, i8* %ptr_add_tmp32.i, i64 -5
  %54 = zext i32 %lshift_tmp24.i to i64
  %ptr_add_tmp56.i = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %54
  %55 = bitcast i8* %ptr_add_tmp56.i to i16*
  %56 = bitcast i8* %ptr_sub_tmp54.i to i16*
  %57 = load i16, i16* %55, align 2, !noalias !49
  store i16 %57, i16* %56, align 1, !noalias !49
  %ptr_sub_tmp64.i = getelementptr i8, i8* %ptr_add_tmp32.i, i64 -7
  %58 = zext i32 %lshift_tmp27.i to i64
  %ptr_add_tmp66.i = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %58
  %59 = bitcast i8* %ptr_add_tmp66.i to i16*
  %60 = bitcast i8* %ptr_sub_tmp64.i to i16*
  %61 = load i16, i16* %59, align 2, !noalias !49
  store i16 %61, i16* %60, align 1, !noalias !49
  br label %endif68.i

endif68.i:                                        ; preds = %then7.i, %endif.endif68_crit_edge.i
  %cast_tmp70.pre-phi.i = phi i32 [ %.pre.i, %endif.endif68_crit_edge.i ], [ %cast_tmp11.i, %then7.i ]
  %.0230.i = phi i32 [ 0, %endif.endif68_crit_edge.i ], [ 8, %then7.i ]
  br label %while_condition_check.i

while_condition_check.i:                          ; preds = %while.i, %endif68.i
  %.1231.i = phi i32 [ %.0230.i, %endif68.i ], [ %add_tmp106.i, %while.i ]
  %.0228.i = phi i32 [ %cast_tmp70.pre-phi.i, %endif68.i ], [ %div_tmp78.i, %while.i ]
  %62 = icmp ugt i32 %.0228.i, 9999
  br i1 %62, label %while.i, label %endwhile.i

while.i:                                          ; preds = %while_condition_check.i
  %63 = urem i32 %.0228.i, 10000
  %div_tmp78.i = udiv i32 %.0228.i, 10000
  %mod_tmp80.i = urem i32 %63, 100
  %lshift_tmp81.i = shl nuw nsw i32 %mod_tmp80.i, 1
  %div_tmp83.i = udiv i32 %63, 100
  %lshift_tmp84.i = shl nuw nsw i32 %div_tmp83.i, 1
  %64 = zext i32 %.0226.i to i64
  %ptr_add_tmp87.i = getelementptr i8, i8* %1, i64 -1
  %65 = zext i32 %43 to i64
  %ptr_add_tmp89.i = getelementptr i8, i8* %ptr_add_tmp87.i, i64 %64
  %66 = zext i32 %.1231.i to i64
  %67 = sub nsw i64 0, %66
  %ptr_sub_tmp91.i = getelementptr i8, i8* %ptr_add_tmp89.i, i64 %65
  %ptr_sub_tmp92.i = getelementptr i8, i8* %ptr_sub_tmp91.i, i64 %67
  %68 = zext i32 %lshift_tmp81.i to i64
  %ptr_add_tmp94.i = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %68
  %69 = bitcast i8* %ptr_add_tmp94.i to i16*
  %70 = bitcast i8* %ptr_sub_tmp92.i to i16*
  %71 = load i16, i16* %69, align 2, !noalias !49
  store i16 %71, i16* %70, align 1, !noalias !49
  %ptr_add_tmp97.i = getelementptr i8, i8* %1, i64 -3
  %ptr_add_tmp99.i = getelementptr i8, i8* %ptr_add_tmp97.i, i64 %64
  %ptr_sub_tmp101.i = getelementptr i8, i8* %ptr_add_tmp99.i, i64 %65
  %ptr_sub_tmp102.i = getelementptr i8, i8* %ptr_sub_tmp101.i, i64 %67
  %72 = zext i32 %lshift_tmp84.i to i64
  %ptr_add_tmp104.i = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %72
  %73 = bitcast i8* %ptr_add_tmp104.i to i16*
  %74 = bitcast i8* %ptr_sub_tmp102.i to i16*
  %75 = load i16, i16* %73, align 2, !noalias !49
  store i16 %75, i16* %74, align 1, !noalias !49
  %add_tmp106.i = add i32 %.1231.i, 4
  br label %while_condition_check.i

endwhile.i:                                       ; preds = %while_condition_check.i
  %76 = icmp ugt i32 %.0228.i, 99
  br i1 %76, label %then108.i, label %endif126.i

then108.i:                                        ; preds = %endwhile.i
  %mod_tmp110.i = urem i32 %.0228.i, 100
  %lshift_tmp111.i = shl nuw nsw i32 %mod_tmp110.i, 1
  %div_tmp113.i = udiv i32 %.0228.i, 100
  %77 = zext i32 %.0226.i to i64
  %ptr_add_tmp116.i = getelementptr i8, i8* %1, i64 %77
  %78 = zext i32 %43 to i64
  %ptr_add_tmp118.i = getelementptr i8, i8* %ptr_add_tmp116.i, i64 %78
  %79 = zext i32 %.1231.i to i64
  %80 = sub nsw i64 0, %79
  %ptr_sub_tmp120.i = getelementptr i8, i8* %ptr_add_tmp118.i, i64 %80
  %ptr_sub_tmp121.i = getelementptr i8, i8* %ptr_sub_tmp120.i, i64 -1
  %81 = zext i32 %lshift_tmp111.i to i64
  %ptr_add_tmp123.i = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %81
  %82 = bitcast i8* %ptr_add_tmp123.i to i16*
  %83 = bitcast i8* %ptr_sub_tmp121.i to i16*
  %84 = load i16, i16* %82, align 2, !noalias !49
  store i16 %84, i16* %83, align 1, !noalias !49
  %add_tmp125.i = or i32 %.1231.i, 2
  br label %endif126.i

endif126.i:                                       ; preds = %then108.i, %endwhile.i
  %.2.i = phi i32 [ %add_tmp125.i, %then108.i ], [ %.1231.i, %endwhile.i ]
  %.1229.i = phi i32 [ %div_tmp113.i, %then108.i ], [ %.0228.i, %endwhile.i ]
  %85 = icmp ugt i32 %.1229.i, 9
  br i1 %85, label %then128.i, label %else.i

then128.i:                                        ; preds = %endif126.i
  %lshift_tmp130.i = shl i32 %.1229.i, 1
  %add_tmp132.i = or i32 %lshift_tmp130.i, 1
  %86 = zext i32 %add_tmp132.i to i64
  %87 = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %86
  %88 = zext i32 %.0226.i to i64
  %ptr_add_tmp135.i = getelementptr i8, i8* %1, i64 %88
  %89 = zext i32 %43 to i64
  %ptr_add_tmp137.i = getelementptr i8, i8* %ptr_add_tmp135.i, i64 %89
  %90 = zext i32 %.2.i to i64
  %91 = sub nsw i64 0, %90
  %ptr_sub_tmp139.i = getelementptr i8, i8* %ptr_add_tmp137.i, i64 %91
  %load_tmp140.i = load i8, i8* %87, align 1, !noalias !49
  store i8 %load_tmp140.i, i8* %ptr_sub_tmp139.i, align 1, !noalias !49
  %92 = zext i32 %lshift_tmp130.i to i64
  %93 = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %92
  %load_tmp145.i = load i8, i8* %93, align 2, !noalias !49
  store i8 %load_tmp145.i, i8* %ptr_add_tmp135.i, align 1, !noalias !49
  br label %endif152.i

else.i:                                           ; preds = %endif126.i
  %94 = trunc i32 %.1229.i to i8
  %cast_tmp148.i = add i8 %94, 48
  %95 = zext i32 %.0226.i to i64
  %ptr_add_tmp151.i = getelementptr i8, i8* %1, i64 %95
  store i8 %cast_tmp148.i, i8* %ptr_add_tmp151.i, align 1, !noalias !49
  br label %endif152.i

endif152.i:                                       ; preds = %else.i, %then128.i
  %96 = icmp ugt i32 %43, 1
  br i1 %96, label %then154.i, label %else163.i

then154.i:                                        ; preds = %endif152.i
  %97 = zext i32 %.0226.i to i64
  %ptr_add_tmp157.i = getelementptr i8, i8* %1, i64 %97
  %ptr_add_tmp158.i = getelementptr i8, i8* %ptr_add_tmp157.i, i64 1
  store i8 46, i8* %ptr_add_tmp158.i, align 1, !noalias !49
  %add_tmp160.i = add nuw nsw i32 %.0226.i, 1
  %add_tmp162.i = add nuw nsw i32 %add_tmp160.i, %43
  br label %endif165.i

else163.i:                                        ; preds = %endif152.i
  %98 = add nuw nsw i32 %.0226.i, 1
  br label %endif165.i

endif165.i:                                       ; preds = %else163.i, %then154.i
  %storemerge.i = phi i32 [ %98, %else163.i ], [ %add_tmp162.i, %then154.i ]
  %99 = zext i32 %storemerge.i to i64
  %ptr_add_tmp168.i = getelementptr i8, i8* %1, i64 %99
  store i8 69, i8* %ptr_add_tmp168.i, align 1, !noalias !49
  %100 = add nsw i32 %storemerge.i, 1
  %101 = getelementptr inbounds %"struct.std::ryu::floating_decimal_64", %"struct.std::ryu::floating_decimal_64"* %2, i64 0, i32 1
  %load_tmp170.i = load i32, i32* %101, align 8, !alias.scope !49
  %add_tmp172.i = add nsw i32 %43, -1
  %sub_tmp173.i = add i32 %add_tmp172.i, %load_tmp170.i
  %102 = icmp slt i32 %sub_tmp173.i, 0
  br i1 %102, label %then175.i, label %endif181.i

then175.i:                                        ; preds = %endif165.i
  %103 = zext i32 %100 to i64
  %ptr_add_tmp178.i = getelementptr i8, i8* %1, i64 %103
  store i8 45, i8* %ptr_add_tmp178.i, align 1, !noalias !49
  %104 = add nsw i32 %storemerge.i, 2
  %unary_minus_tmp.i = sub i32 0, %sub_tmp173.i
  br label %endif181.i

endif181.i:                                       ; preds = %then175.i, %endif165.i
  %.1.i = phi i32 [ %104, %then175.i ], [ %100, %endif165.i ]
  %.0.i = phi i32 [ %unary_minus_tmp.i, %then175.i ], [ %sub_tmp173.i, %endif165.i ]
  %105 = icmp sgt i32 %.0.i, 99
  br i1 %105, label %then183.i, label %else202.i

then183.i:                                        ; preds = %endif181.i
  %mod_tmp185.i = srem i32 %.0.i, 10
  %106 = zext i32 %.1.i to i64
  %ptr_add_tmp188.i = getelementptr i8, i8* %1, i64 %106
  %div_tmp190.i = sdiv i32 %.0.i, 10
  %mul_tmp191.i = shl nsw i32 %div_tmp190.i, 1
  %107 = sext i32 %mul_tmp191.i to i64
  %ptr_add_tmp192.i = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %107
  %108 = bitcast i8* %ptr_add_tmp192.i to i16*
  %109 = bitcast i8* %ptr_add_tmp188.i to i16*
  %110 = load i16, i16* %108, align 2, !noalias !49
  store i16 %110, i16* %109, align 1, !noalias !49
  %111 = trunc i32 %mod_tmp185.i to i8
  %cast_tmp195.i = add i8 %111, 48
  %ptr_add_tmp199.i = getelementptr i8, i8* %ptr_add_tmp188.i, i64 2
  store i8 %cast_tmp195.i, i8* %ptr_add_tmp199.i, align 1, !noalias !49
  %add_tmp201.i = add i32 %.1.i, 3
  br label %"func.std.ryu.to_chars..3.struct.std::ryu::floating_decimal_64.builtin.bool.0P.builtin.uint8.builtin.int32.exit"

else202.i:                                        ; preds = %endif181.i
  %112 = icmp sgt i32 %.0.i, 9
  br i1 %112, label %then204.i, label %else213.i

then204.i:                                        ; preds = %else202.i
  %113 = zext i32 %.1.i to i64
  %ptr_add_tmp207.i = getelementptr i8, i8* %1, i64 %113
  %mul_tmp209.i = shl i32 %.0.i, 1
  %114 = sext i32 %mul_tmp209.i to i64
  %ptr_add_tmp210.i = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %114
  %115 = bitcast i8* %ptr_add_tmp210.i to i16*
  %116 = bitcast i8* %ptr_add_tmp207.i to i16*
  %117 = load i16, i16* %115, align 2, !noalias !49
  store i16 %117, i16* %116, align 1, !noalias !49
  %add_tmp212.i = add i32 %.1.i, 2
  br label %"func.std.ryu.to_chars..3.struct.std::ryu::floating_decimal_64.builtin.bool.0P.builtin.uint8.builtin.int32.exit"

else213.i:                                        ; preds = %else202.i
  %118 = trunc i32 %.0.i to i8
  %cast_tmp216.i = add i8 %118, 48
  %119 = zext i32 %.1.i to i64
  %ptr_add_tmp219.i = getelementptr i8, i8* %1, i64 %119
  store i8 %cast_tmp216.i, i8* %ptr_add_tmp219.i, align 1, !noalias !49
  %120 = add i32 %.1.i, 1
  br label %"func.std.ryu.to_chars..3.struct.std::ryu::floating_decimal_64.builtin.bool.0P.builtin.uint8.builtin.int32.exit"

"func.std.ryu.to_chars..3.struct.std::ryu::floating_decimal_64.builtin.bool.0P.builtin.uint8.builtin.int32.exit": ; preds = %then183.i, %then204.i, %else213.i
  %storemerge225.i = phi i32 [ %add_tmp201.i, %then183.i ], [ %120, %else213.i ], [ %add_tmp212.i, %then204.i ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %23)
  ret i32 %storemerge225.i
}

define i32 @func.std.ryu.copy_special_str..4.0P.builtin.uint8.builtin.bool.builtin.bool.builtin.bool.builtin.int32(i8* %0, i1 %1, i1 %2, i1 %3) {
alloca:
  br i1 %3, label %then, label %endif

then:                                             ; preds = %alloca
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 dereferenceable(3) %0, i8* nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 3, i1 false)
  ret i32 3

endif:                                            ; preds = %alloca
  br i1 %1, label %then3, label %endif5

then3:                                            ; preds = %endif
  store i8 45, i8* %0, align 1
  br label %endif5

endif5:                                           ; preds = %then3, %endif
  br i1 %2, label %then7, label %endif17

then7:                                            ; preds = %endif5
  %ptr_add_tmp = getelementptr i8, i8* %0, i64 1
  %4 = select i1 %1, i8* %ptr_add_tmp, i8* %0
  %5 = bitcast i8* %4 to i64*
  store i64 8751735898823355977, i64* %5, align 1
  %spec.select = select i1 %1, i32 9, i32 8
  ret i32 %spec.select

endif17:                                          ; preds = %endif5
  %ptr_add_tmp21 = getelementptr i8, i8* %0, i64 1
  %6 = select i1 %1, i8* %ptr_add_tmp21, i8* %0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 dereferenceable(3) %6, i8* nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i64 3, i1 false)
  %7 = select i1 %1, i32 4, i32 3
  ret i32 %7
}

define void @func.std.ryu.d2s_buffered..2.builtin.float64.0P.builtin.uint8.void(double %0, i8* %1) {
alloca:
  %2 = call i32 @func.std.ryu.d2s_buffered_n..2.builtin.float64.0P.builtin.uint8.builtin.int32(double %0, i8* %1)
  %3 = sext i32 %2 to i64
  %ptr_add_tmp = getelementptr i8, i8* %1, i64 %3
  store i8 0, i8* %ptr_add_tmp, align 1
  ret void
}

define i8* @func.std.ryu.d2s..1.builtin.float64.0P.builtin.uint8(double %0) {
alloca:
  %1 = call dereferenceable_or_null(25) i8* @malloc(i64 25)
  %2 = call i32 @func.std.ryu.d2s_buffered_n..2.builtin.float64.0P.builtin.uint8.builtin.int32(double %0, i8* %1)
  %3 = sext i32 %2 to i64
  %ptr_add_tmp.i = getelementptr i8, i8* %1, i64 %3
  store i8 0, i8* %ptr_add_tmp.i, align 1
  ret i8* %1
}

declare i8* @malloc(i64)

define i32 @func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32(i32 %0) {
alloca:
  %1 = icmp ugt i32 %0, 99999999
  br i1 %1, label %endif28, label %else

else:                                             ; preds = %alloca
  %2 = icmp ugt i32 %0, 9999999
  br i1 %2, label %endif28, label %else3

else3:                                            ; preds = %else
  %3 = icmp ugt i32 %0, 999999
  br i1 %3, label %endif28, label %else6

else6:                                            ; preds = %else3
  %4 = icmp ugt i32 %0, 99999
  br i1 %4, label %endif28, label %else9

else9:                                            ; preds = %else6
  %5 = icmp ugt i32 %0, 9999
  br i1 %5, label %endif28, label %else12

else12:                                           ; preds = %else9
  %6 = icmp ugt i32 %0, 999
  br i1 %6, label %endif28, label %else15

else15:                                           ; preds = %else12
  %7 = icmp ugt i32 %0, 99
  br i1 %7, label %endif28, label %else18

else18:                                           ; preds = %else15
  %8 = icmp ugt i32 %0, 9
  %9 = select i1 %8, i32 2, i32 1
  br label %endif28

endif28:                                          ; preds = %else, %else6, %else12, %else18, %else15, %else9, %else3, %alloca
  %10 = phi i32 [ 9, %alloca ], [ 8, %else ], [ 7, %else3 ], [ 6, %else6 ], [ 5, %else9 ], [ 4, %else12 ], [ 3, %else15 ], [ %9, %else18 ]
  ret i32 %10
}

define i32 @func.std.ryu.log2pow5..1.builtin.uint32.builtin.uint32(i32 %0) {
alloca:
  %mul_tmp = mul i32 %0, 1217359
  %rshift_tmp = lshr i32 %mul_tmp, 19
  ret i32 %rshift_tmp
}

define i32 @func.std.ryu.ceil_log2pow5..1.builtin.uint32.builtin.uint32(i32 %0) {
alloca:
  %mul_tmp.i = mul i32 %0, 1217359
  %rshift_tmp.i = lshr i32 %mul_tmp.i, 19
  %add_tmp = add nuw nsw i32 %rshift_tmp.i, 1
  ret i32 %add_tmp
}

define i64 @func.std.ryu.div1e9..1.builtin.uint64.builtin.uint64(i64 %0) {
alloca:
  %div_tmp = udiv i64 %0, 1000000000
  ret i64 %div_tmp
}

define i32 @func.std.ryu.mod1e9..1.builtin.uint64.builtin.uint32(i64 %0) {
alloca:
  %1 = urem i64 %0, 1000000000
  %cast_tmp = trunc i64 %1 to i32
  ret i32 %cast_tmp
}

define i64 @func.std.ryu.mulShift64..3.builtin.uint64.0P.const.builtin.uint64.builtin.uint32.builtin.uint64(i64 %0, i64* %1, i32 %2) {
alloca:
  %ptr_add_tmp = getelementptr i64, i64* %1, i64 1
  %load_tmp2 = load i64, i64* %ptr_add_tmp, align 8
  %rshift_tmp.i = lshr i64 %0, 32
  %rshift_tmp6.i = lshr i64 %load_tmp2, 32
  %cast_tmp9.i = and i64 %0, 4294967295
  %cast_tmp11.i = and i64 %load_tmp2, 4294967295
  %mul_tmp.i = mul nuw i64 %cast_tmp11.i, %cast_tmp9.i
  %mul_tmp16.i = mul nuw i64 %rshift_tmp6.i, %cast_tmp9.i
  %mul_tmp21.i = mul nuw i64 %cast_tmp11.i, %rshift_tmp.i
  %mul_tmp26.i = mul nuw i64 %rshift_tmp6.i, %rshift_tmp.i
  %rshift_tmp30.i = lshr i64 %mul_tmp.i, 32
  %add_tmp.i = add i64 %rshift_tmp30.i, %mul_tmp21.i
  %rshift_tmp38.i = lshr i64 %add_tmp.i, 32
  %cast_tmp42.i = and i64 %add_tmp.i, 4294967295
  %add_tmp43.i = add i64 %cast_tmp42.i, %mul_tmp16.i
  %rshift_tmp47.i = lshr i64 %add_tmp43.i, 32
  %add_tmp52.i = add i64 %rshift_tmp38.i, %mul_tmp26.i
  %add_tmp55.i = add i64 %add_tmp52.i, %rshift_tmp47.i
  %cast_tmp57.i = shl i64 %add_tmp43.i, 32
  %cast_tmp59.i = and i64 %mul_tmp.i, 4294967295
  %bit_or_tmp.i = or i64 %cast_tmp57.i, %cast_tmp59.i
  %load_tmp5 = load i64, i64* %1, align 8
  %rshift_tmp6.i22 = lshr i64 %load_tmp5, 32
  %cast_tmp11.i25 = and i64 %load_tmp5, 4294967295
  %mul_tmp.i26 = mul nuw i64 %cast_tmp11.i25, %cast_tmp9.i
  %mul_tmp16.i28 = mul nuw i64 %rshift_tmp6.i22, %cast_tmp9.i
  %mul_tmp21.i31 = mul nuw i64 %cast_tmp11.i25, %rshift_tmp.i
  %mul_tmp26.i32 = mul nuw i64 %rshift_tmp6.i22, %rshift_tmp.i
  %rshift_tmp30.i34 = lshr i64 %mul_tmp.i26, 32
  %add_tmp.i35 = add i64 %rshift_tmp30.i34, %mul_tmp21.i31
  %rshift_tmp38.i36 = lshr i64 %add_tmp.i35, 32
  %cast_tmp42.i38 = and i64 %add_tmp.i35, 4294967295
  %add_tmp43.i39 = add i64 %cast_tmp42.i38, %mul_tmp16.i28
  %rshift_tmp47.i41 = lshr i64 %add_tmp43.i39, 32
  %add_tmp52.i43 = add i64 %rshift_tmp38.i36, %mul_tmp26.i32
  %add_tmp55.i44 = add i64 %add_tmp52.i43, %rshift_tmp47.i41
  %add_tmp = add i64 %add_tmp55.i44, %bit_or_tmp.i
  %3 = icmp ult i64 %add_tmp, %add_tmp55.i44
  %4 = zext i1 %3 to i64
  %load_tmp12 = add i64 %add_tmp55.i, %4
  %sub_tmp = add i32 %2, -64
  %sub_tmp.i = sub i32 128, %2
  %5 = zext i32 %sub_tmp.i to i64
  %lshift_tmp.i15 = shl i64 %load_tmp12, %5
  %6 = zext i32 %sub_tmp to i64
  %rshift_tmp.i16 = lshr i64 %add_tmp, %6
  %bit_or_tmp.i17 = or i64 %lshift_tmp.i15, %rshift_tmp.i16
  ret i64 %bit_or_tmp.i17
}

define i32 @func.std.ryu.mulPow5InvDivPow2..3.builtin.uint32.builtin.uint32.builtin.uint32.builtin.uint32(i32 %0, i32 %1, i32 %2) {
alloca:
  %3 = zext i32 %1 to i64
  %4 = getelementptr [55 x i64], [55 x i64]* @std.ryu.FLOAT_POW5_INV_SPLIT, i64 0, i64 %3
  %load_tmp2 = load i64, i64* %4, align 8
  %rshift_tmp.i = lshr i64 %load_tmp2, 32
  %cast_tmp4.i = zext i32 %0 to i64
  %cast_tmp6.i = and i64 %load_tmp2, 4294967295
  %mul_tmp.i = mul nuw i64 %cast_tmp6.i, %cast_tmp4.i
  %mul_tmp11.i = mul nuw i64 %rshift_tmp.i, %cast_tmp4.i
  %rshift_tmp13.i = lshr i64 %mul_tmp.i, 32
  %add_tmp.i = add i64 %rshift_tmp13.i, %mul_tmp11.i
  %sub_tmp.i = add i32 %2, -32
  %5 = zext i32 %sub_tmp.i to i64
  %rshift_tmp17.i = lshr i64 %add_tmp.i, %5
  %cast_tmp19.i = trunc i64 %rshift_tmp17.i to i32
  ret i32 %cast_tmp19.i
}

define i32 @func.std.ryu.mulShift32..3.builtin.uint32.builtin.uint64.builtin.uint32.builtin.uint32(i32 %0, i64 %1, i32 %2) {
alloca:
  %rshift_tmp = lshr i64 %1, 32
  %cast_tmp4 = zext i32 %0 to i64
  %cast_tmp6 = and i64 %1, 4294967295
  %mul_tmp = mul nuw i64 %cast_tmp6, %cast_tmp4
  %mul_tmp11 = mul nuw i64 %rshift_tmp, %cast_tmp4
  %rshift_tmp13 = lshr i64 %mul_tmp, 32
  %add_tmp = add i64 %rshift_tmp13, %mul_tmp11
  %sub_tmp = add i32 %2, -32
  %3 = zext i32 %sub_tmp to i64
  %rshift_tmp17 = lshr i64 %add_tmp, %3
  %cast_tmp19 = trunc i64 %rshift_tmp17 to i32
  ret i32 %cast_tmp19
}

define i1 @func.std.ryu.multipleOfPowerOf5_32..2.builtin.uint32.builtin.uint32.builtin.bool(i32 %0, i32 %1) {
alloca:
  br label %for_condition_check.i

for_condition_check.i:                            ; preds = %for.i, %alloca
  %.011.i.in = phi i32 [ %0, %alloca ], [ %.010.i, %for.i ]
  %.0.i = phi i32 [ 0, %alloca ], [ %3, %for.i ]
  %.011.i = urem i32 %.011.i.in, 5
  %2 = icmp eq i32 %.011.i, 0
  br i1 %2, label %for.i, label %func.std.ryu.pow5factor_32..1.builtin.uint32.builtin.uint32.exit

for.i:                                            ; preds = %for_condition_check.i
  %.010.i = udiv i32 %.011.i.in, 5
  %3 = add i32 %.0.i, 1
  br label %for_condition_check.i

func.std.ryu.pow5factor_32..1.builtin.uint32.builtin.uint32.exit: ; preds = %for_condition_check.i
  %4 = icmp uge i32 %.0.i, %1
  ret i1 %4
}

define i32 @func.std.ryu.pow5factor_32..1.builtin.uint32.builtin.uint32(i32 %0) {
alloca:
  br label %for_condition_check

for_condition_check:                              ; preds = %for, %alloca
  %.011.in = phi i32 [ %0, %alloca ], [ %.010, %for ]
  %.0 = phi i32 [ 0, %alloca ], [ %2, %for ]
  %.011 = urem i32 %.011.in, 5
  %1 = icmp eq i32 %.011, 0
  br i1 %1, label %for, label %endfor

for:                                              ; preds = %for_condition_check
  %.010 = udiv i32 %.011.in, 5
  %2 = add i32 %.0, 1
  br label %for_condition_check

endfor:                                           ; preds = %for_condition_check
  ret i32 %.0
}

define i32 @func.std.ryu.mulPow5divPow2..3.builtin.uint32.builtin.uint32.builtin.uint32.builtin.uint32(i32 %0, i32 %1, i32 %2) {
alloca:
  %3 = zext i32 %1 to i64
  %4 = getelementptr [47 x i64], [47 x i64]* @std.ryu.FLOAT_POW5_SPLIT, i64 0, i64 %3
  %load_tmp2 = load i64, i64* %4, align 8
  %rshift_tmp.i = lshr i64 %load_tmp2, 32
  %cast_tmp4.i = zext i32 %0 to i64
  %cast_tmp6.i = and i64 %load_tmp2, 4294967295
  %mul_tmp.i = mul nuw i64 %cast_tmp6.i, %cast_tmp4.i
  %mul_tmp11.i = mul nuw i64 %rshift_tmp.i, %cast_tmp4.i
  %rshift_tmp13.i = lshr i64 %mul_tmp.i, 32
  %add_tmp.i = add i64 %rshift_tmp13.i, %mul_tmp11.i
  %sub_tmp.i = add i32 %2, -32
  %5 = zext i32 %sub_tmp.i to i64
  %rshift_tmp17.i = lshr i64 %add_tmp.i, %5
  %cast_tmp19.i = trunc i64 %rshift_tmp17.i to i32
  ret i32 %cast_tmp19.i
}

define i1 @func.std.ryu.multipleOfPowerOf2_32..2.builtin.uint32.builtin.uint32.builtin.bool(i32 %0, i32 %1) {
alloca:
  %notmask = shl nsw i32 -1, %1
  %sub_tmp = xor i32 %notmask, -1
  %bit_and_tmp = and i32 %sub_tmp, %0
  %2 = icmp eq i32 %bit_and_tmp, 0
  ret i1 %2
}

define i32 @func.std.ryu.f2s_buffered_n..2.builtin.float32.0P.builtin.uint8.builtin.int32(float %0, i8* %1) {
alloca:
  %load_tmp.cast.i = bitcast float %0 to i32
  %2 = icmp slt i32 %load_tmp.cast.i, 0
  %bit_and_tmp3 = and i32 %load_tmp.cast.i, 8388607
  %rshift_tmp5 = lshr i32 %load_tmp.cast.i, 23
  %bit_and_tmp6 = and i32 %rshift_tmp5, 255
  %trunc = trunc i32 %rshift_tmp5 to i8
  switch i8 %trunc, label %endif [
    i8 -1, label %then
    i8 0, label %bool_and_rhs
  ]

bool_and_rhs:                                     ; preds = %alloca
  %3 = icmp eq i32 %bit_and_tmp3, 0
  br i1 %3, label %then, label %endif

then:                                             ; preds = %alloca, %bool_and_rhs
  %.not = icmp eq i32 %bit_and_tmp6, 0
  %.not20 = icmp eq i32 %bit_and_tmp3, 0
  br i1 %.not20, label %endif.i19, label %then.i18

then.i18:                                         ; preds = %then
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 dereferenceable(3) %1, i8* nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 3, i1 false)
  br label %func.std.ryu.copy_special_str..4.0P.builtin.uint8.builtin.bool.builtin.bool.builtin.bool.builtin.int32.exit

endif.i19:                                        ; preds = %then
  br i1 %2, label %then3.i, label %endif5.i

then3.i:                                          ; preds = %endif.i19
  store i8 45, i8* %1, align 1
  br label %endif5.i

endif5.i:                                         ; preds = %then3.i, %endif.i19
  br i1 %.not, label %endif17.i, label %then7.i

then7.i:                                          ; preds = %endif5.i
  %ptr_add_tmp.i = getelementptr i8, i8* %1, i64 1
  %4 = select i1 %2, i8* %ptr_add_tmp.i, i8* %1
  %5 = bitcast i8* %4 to i64*
  store i64 8751735898823355977, i64* %5, align 1
  %spec.select.i = select i1 %2, i32 9, i32 8
  br label %func.std.ryu.copy_special_str..4.0P.builtin.uint8.builtin.bool.builtin.bool.builtin.bool.builtin.int32.exit

endif17.i:                                        ; preds = %endif5.i
  %ptr_add_tmp21.i = getelementptr i8, i8* %1, i64 1
  %6 = select i1 %2, i8* %ptr_add_tmp21.i, i8* %1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 dereferenceable(3) %6, i8* nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i64 3, i1 false)
  %7 = select i1 %2, i32 4, i32 3
  br label %func.std.ryu.copy_special_str..4.0P.builtin.uint8.builtin.bool.builtin.bool.builtin.bool.builtin.int32.exit

func.std.ryu.copy_special_str..4.0P.builtin.uint8.builtin.bool.builtin.bool.builtin.bool.builtin.int32.exit: ; preds = %else119.i, %then110.i, %endif17.i, %then7.i, %then.i18
  %8 = phi i32 [ 3, %then.i18 ], [ %spec.select.i, %then7.i ], [ %7, %endif17.i ], [ %73, %else119.i ], [ %add_tmp118.i, %then110.i ]
  ret i32 %8

endif:                                            ; preds = %alloca, %bool_and_rhs
  %9 = call i64 @"func.std.ryu.f2d..2.builtin.uint32.builtin.uint32.struct.std::ryu::floating_decimal_32"(i32 %bit_and_tmp3, i32 %bit_and_tmp6)
  %10 = trunc i64 %9 to i32
  %11 = lshr i64 %9, 32
  %12 = trunc i64 %11 to i32
  br i1 %2, label %then.i, label %endif.i

then.i:                                           ; preds = %endif
  store i8 45, i8* %1, align 1
  br label %endif.i

endif.i:                                          ; preds = %then.i, %endif
  %.0131.i = phi i32 [ 1, %then.i ], [ 0, %endif ]
  %13 = icmp ugt i32 %10, 99999999
  br i1 %13, label %func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i, label %else.i.i

else.i.i:                                         ; preds = %endif.i
  %14 = icmp ugt i32 %10, 9999999
  br i1 %14, label %func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i, label %else3.i.i

else3.i.i:                                        ; preds = %else.i.i
  %15 = icmp ugt i32 %10, 999999
  br i1 %15, label %func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i, label %else6.i.i

else6.i.i:                                        ; preds = %else3.i.i
  %16 = icmp ugt i32 %10, 99999
  br i1 %16, label %func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i, label %else9.i.i

else9.i.i:                                        ; preds = %else6.i.i
  %17 = icmp ugt i32 %10, 9999
  br i1 %17, label %func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i, label %else12.i.i

else12.i.i:                                       ; preds = %else9.i.i
  %18 = icmp ugt i32 %10, 999
  br i1 %18, label %func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i, label %else15.i.i

else15.i.i:                                       ; preds = %else12.i.i
  %19 = icmp ugt i32 %10, 99
  br i1 %19, label %func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i, label %else18.i.i

else18.i.i:                                       ; preds = %else15.i.i
  %20 = icmp ugt i32 %10, 9
  %21 = select i1 %20, i32 2, i32 1
  br label %func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i

func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i: ; preds = %else18.i.i, %else15.i.i, %else12.i.i, %else9.i.i, %else6.i.i, %else3.i.i, %else.i.i, %endif.i
  %22 = phi i32 [ 9, %endif.i ], [ 8, %else.i.i ], [ 7, %else3.i.i ], [ 6, %else6.i.i ], [ 5, %else9.i.i ], [ 4, %else12.i.i ], [ 3, %else15.i.i ], [ %21, %else18.i.i ]
  br label %while_condition_check.i

while_condition_check.i:                          ; preds = %while.i, %func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i
  %.0132.i = phi i32 [ %10, %func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i ], [ %div_tmp10.i, %while.i ]
  %storemerge.i = phi i32 [ 0, %func.std.ryu.decimalLength9..1.builtin.uint32.builtin.uint32.exit.i ], [ %add_tmp.i, %while.i ]
  %23 = icmp ugt i32 %.0132.i, 9999
  br i1 %23, label %while.i, label %endwhile.i

while.i:                                          ; preds = %while_condition_check.i
  %24 = urem i32 %.0132.i, 10000
  %div_tmp10.i = udiv i32 %.0132.i, 10000
  %mod_tmp.i = urem i32 %24, 100
  %lshift_tmp.i = shl nuw nsw i32 %mod_tmp.i, 1
  %div_tmp13.i = udiv i32 %24, 100
  %lshift_tmp14.i = shl nuw nsw i32 %div_tmp13.i, 1
  %25 = zext i32 %.0131.i to i64
  %ptr_add_tmp17.i = getelementptr i8, i8* %1, i64 -1
  %26 = zext i32 %22 to i64
  %ptr_add_tmp19.i = getelementptr i8, i8* %ptr_add_tmp17.i, i64 %25
  %27 = zext i32 %storemerge.i to i64
  %28 = sub nsw i64 0, %27
  %ptr_sub_tmp.i = getelementptr i8, i8* %ptr_add_tmp19.i, i64 %26
  %ptr_sub_tmp21.i = getelementptr i8, i8* %ptr_sub_tmp.i, i64 %28
  %29 = zext i32 %lshift_tmp.i to i64
  %ptr_add_tmp23.i = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %29
  %30 = bitcast i8* %ptr_add_tmp23.i to i16*
  %31 = bitcast i8* %ptr_sub_tmp21.i to i16*
  %32 = load i16, i16* %30, align 2
  store i16 %32, i16* %31, align 1
  %ptr_add_tmp26.i = getelementptr i8, i8* %1, i64 -3
  %ptr_add_tmp28.i = getelementptr i8, i8* %ptr_add_tmp26.i, i64 %25
  %ptr_sub_tmp30.i = getelementptr i8, i8* %ptr_add_tmp28.i, i64 %26
  %ptr_sub_tmp31.i = getelementptr i8, i8* %ptr_sub_tmp30.i, i64 %28
  %33 = zext i32 %lshift_tmp14.i to i64
  %ptr_add_tmp33.i = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %33
  %34 = bitcast i8* %ptr_add_tmp33.i to i16*
  %35 = bitcast i8* %ptr_sub_tmp31.i to i16*
  %36 = load i16, i16* %34, align 2
  store i16 %36, i16* %35, align 1
  %add_tmp.i = add i32 %storemerge.i, 4
  br label %while_condition_check.i

endwhile.i:                                       ; preds = %while_condition_check.i
  %37 = icmp ugt i32 %.0132.i, 99
  br i1 %37, label %then36.i, label %endif54.i

then36.i:                                         ; preds = %endwhile.i
  %mod_tmp38.i = urem i32 %.0132.i, 100
  %lshift_tmp39.i = shl nuw nsw i32 %mod_tmp38.i, 1
  %div_tmp41.i = udiv i32 %.0132.i, 100
  %38 = zext i32 %.0131.i to i64
  %ptr_add_tmp44.i = getelementptr i8, i8* %1, i64 %38
  %39 = zext i32 %22 to i64
  %ptr_add_tmp46.i = getelementptr i8, i8* %ptr_add_tmp44.i, i64 %39
  %40 = zext i32 %storemerge.i to i64
  %41 = sub nsw i64 0, %40
  %ptr_sub_tmp48.i = getelementptr i8, i8* %ptr_add_tmp46.i, i64 %41
  %ptr_sub_tmp49.i = getelementptr i8, i8* %ptr_sub_tmp48.i, i64 -1
  %42 = zext i32 %lshift_tmp39.i to i64
  %ptr_add_tmp51.i = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %42
  %43 = bitcast i8* %ptr_add_tmp51.i to i16*
  %44 = bitcast i8* %ptr_sub_tmp49.i to i16*
  %45 = load i16, i16* %43, align 2
  store i16 %45, i16* %44, align 1
  %add_tmp53.i = or i32 %storemerge.i, 2
  br label %endif54.i

endif54.i:                                        ; preds = %then36.i, %endwhile.i
  %.0134.i = phi i32 [ %add_tmp53.i, %then36.i ], [ %storemerge.i, %endwhile.i ]
  %.1133.i = phi i32 [ %div_tmp41.i, %then36.i ], [ %.0132.i, %endwhile.i ]
  %46 = icmp ugt i32 %.1133.i, 9
  br i1 %46, label %then56.i, label %else.i

then56.i:                                         ; preds = %endif54.i
  %lshift_tmp58.i = shl i32 %.1133.i, 1
  %add_tmp60.i = or i32 %lshift_tmp58.i, 1
  %47 = zext i32 %add_tmp60.i to i64
  %48 = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %47
  %49 = zext i32 %.0131.i to i64
  %ptr_add_tmp63.i = getelementptr i8, i8* %1, i64 %49
  %50 = zext i32 %22 to i64
  %ptr_add_tmp65.i = getelementptr i8, i8* %ptr_add_tmp63.i, i64 %50
  %51 = zext i32 %.0134.i to i64
  %52 = sub nsw i64 0, %51
  %ptr_sub_tmp67.i = getelementptr i8, i8* %ptr_add_tmp65.i, i64 %52
  %load_tmp68.i = load i8, i8* %48, align 1
  store i8 %load_tmp68.i, i8* %ptr_sub_tmp67.i, align 1
  %53 = zext i32 %lshift_tmp58.i to i64
  %54 = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %53
  %load_tmp73.i = load i8, i8* %54, align 2
  store i8 %load_tmp73.i, i8* %ptr_add_tmp63.i, align 1
  br label %endif79.i

else.i:                                           ; preds = %endif54.i
  %55 = trunc i32 %.1133.i to i8
  %cast_tmp.i = add i8 %55, 48
  %56 = zext i32 %.0131.i to i64
  %ptr_add_tmp78.i = getelementptr i8, i8* %1, i64 %56
  store i8 %cast_tmp.i, i8* %ptr_add_tmp78.i, align 1
  br label %endif79.i

endif79.i:                                        ; preds = %else.i, %then56.i
  %57 = icmp ugt i32 %22, 1
  br i1 %57, label %then81.i, label %else90.i

then81.i:                                         ; preds = %endif79.i
  %58 = zext i32 %.0131.i to i64
  %ptr_add_tmp84.i = getelementptr i8, i8* %1, i64 %58
  %ptr_add_tmp85.i = getelementptr i8, i8* %ptr_add_tmp84.i, i64 1
  store i8 46, i8* %ptr_add_tmp85.i, align 1
  %add_tmp87.i = add nuw nsw i32 %.0131.i, 1
  %add_tmp89.i = add nuw nsw i32 %add_tmp87.i, %22
  br label %endif92.i

else90.i:                                         ; preds = %endif79.i
  %59 = add nuw nsw i32 %.0131.i, 1
  br label %endif92.i

endif92.i:                                        ; preds = %else90.i, %then81.i
  %storemerge129.i = phi i32 [ %59, %else90.i ], [ %add_tmp89.i, %then81.i ]
  %60 = zext i32 %storemerge129.i to i64
  %ptr_add_tmp95.i = getelementptr i8, i8* %1, i64 %60
  store i8 69, i8* %ptr_add_tmp95.i, align 1
  %61 = add nsw i32 %storemerge129.i, 1
  %add_tmp99.i = add i32 %12, -1
  %sub_tmp100.i = add i32 %add_tmp99.i, %22
  %62 = icmp slt i32 %sub_tmp100.i, 0
  br i1 %62, label %then102.i, label %endif108.i

then102.i:                                        ; preds = %endif92.i
  %63 = zext i32 %61 to i64
  %ptr_add_tmp105.i = getelementptr i8, i8* %1, i64 %63
  store i8 45, i8* %ptr_add_tmp105.i, align 1
  %64 = add nsw i32 %storemerge129.i, 2
  %unary_minus_tmp.i = sub i32 0, %sub_tmp100.i
  br label %endif108.i

endif108.i:                                       ; preds = %then102.i, %endif92.i
  %.1.i = phi i32 [ %64, %then102.i ], [ %61, %endif92.i ]
  %.0.i = phi i32 [ %unary_minus_tmp.i, %then102.i ], [ %sub_tmp100.i, %endif92.i ]
  %65 = icmp sgt i32 %.0.i, 9
  br i1 %65, label %then110.i, label %else119.i

then110.i:                                        ; preds = %endif108.i
  %66 = zext i32 %.1.i to i64
  %ptr_add_tmp113.i = getelementptr i8, i8* %1, i64 %66
  %mul_tmp115.i = shl i32 %.0.i, 1
  %67 = sext i32 %mul_tmp115.i to i64
  %ptr_add_tmp116.i = getelementptr [200 x i8], [200 x i8]* @std.ryu.DIGIT_TABLE, i64 0, i64 %67
  %68 = bitcast i8* %ptr_add_tmp116.i to i16*
  %69 = bitcast i8* %ptr_add_tmp113.i to i16*
  %70 = load i16, i16* %68, align 2
  store i16 %70, i16* %69, align 1
  %add_tmp118.i = add i32 %.1.i, 2
  br label %func.std.ryu.copy_special_str..4.0P.builtin.uint8.builtin.bool.builtin.bool.builtin.bool.builtin.int32.exit

else119.i:                                        ; preds = %endif108.i
  %71 = trunc i32 %.0.i to i8
  %cast_tmp122.i = add i8 %71, 48
  %72 = zext i32 %.1.i to i64
  %ptr_add_tmp125.i = getelementptr i8, i8* %1, i64 %72
  store i8 %cast_tmp122.i, i8* %ptr_add_tmp125.i, align 1
  %73 = add i32 %.1.i, 1
  br label %func.std.ryu.copy_special_str..4.0P.builtin.uint8.builtin.bool.builtin.bool.builtin.bool.builtin.int32.exit
}

define void @func.std.ryu.f2s_buffered..2.builtin.float32.0P.builtin.uint8.void(float %0, i8* %1) {
alloca:
  %2 = call i32 @func.std.ryu.f2s_buffered_n..2.builtin.float32.0P.builtin.uint8.builtin.int32(float %0, i8* %1)
  %3 = sext i32 %2 to i64
  %ptr_add_tmp = getelementptr i8, i8* %1, i64 %3
  store i8 0, i8* %ptr_add_tmp, align 1
  ret void
}

define i8* @func.std.ryu.f2s..1.builtin.float32.0P.builtin.uint8(float %0) {
alloca:
  %1 = call dereferenceable_or_null(16) i8* @malloc(i64 16)
  %2 = call i32 @func.std.ryu.f2s_buffered_n..2.builtin.float32.0P.builtin.uint8.builtin.int32(float %0, i8* %1)
  %3 = sext i32 %2 to i64
  %ptr_add_tmp.i = getelementptr i8, i8* %1, i64 %3
  store i8 0, i8* %ptr_add_tmp.i, align 1
  ret i8* %1
}

define i32 @func.std.ryu.s2d..2.0P.const.builtin.uint8.0P.builtin.float64.builtin.uint32(i8* %0, double* %1) {
alloca:
  %cmp_tmp.i = icmp eq i8* %0, null
  br i1 %cmp_tmp.i, label %func.std.ryu.c_strlen..1.0P.const.builtin.uint8.builtin.int32.exit, label %while_condition_check.i

while_condition_check.i:                          ; preds = %while.i, %alloca
  %.06.i = phi i32 [ %2, %while.i ], [ 0, %alloca ]
  %.0.i = phi i8* [ %3, %while.i ], [ %0, %alloca ]
  %load_tmp2.i = load i8, i8* %.0.i, align 1
  %.not.i = icmp eq i8 %load_tmp2.i, 0
  br i1 %.not.i, label %func.std.ryu.c_strlen..1.0P.const.builtin.uint8.builtin.int32.exit, label %while.i

while.i:                                          ; preds = %while_condition_check.i
  %2 = add i32 %.06.i, 1
  %3 = getelementptr i8, i8* %.0.i, i64 1
  br label %while_condition_check.i

func.std.ryu.c_strlen..1.0P.const.builtin.uint8.builtin.int32.exit: ; preds = %alloca, %while_condition_check.i
  %merge.i = phi i32 [ 0, %alloca ], [ %.06.i, %while_condition_check.i ]
  %4 = call i32 @func.std.ryu.s2d_n..3.0P.const.builtin.uint8.builtin.int32.0P.builtin.float64.builtin.uint32(i8* %0, i32 %merge.i, double* %1)
  ret i32 %4
}

define i32 @func.std.ryu.s2f..2.0P.const.builtin.uint8.0P.builtin.float32.builtin.uint32(i8* %0, float* %1) {
alloca:
  %cmp_tmp.i = icmp eq i8* %0, null
  br i1 %cmp_tmp.i, label %func.std.ryu.c_strlen..1.0P.const.builtin.uint8.builtin.int32.7.exit, label %while_condition_check.i

while_condition_check.i:                          ; preds = %while.i, %alloca
  %.06.i = phi i32 [ %2, %while.i ], [ 0, %alloca ]
  %.0.i = phi i8* [ %3, %while.i ], [ %0, %alloca ]
  %load_tmp2.i = load i8, i8* %.0.i, align 1
  %.not.i = icmp eq i8 %load_tmp2.i, 0
  br i1 %.not.i, label %func.std.ryu.c_strlen..1.0P.const.builtin.uint8.builtin.int32.7.exit, label %while.i

while.i:                                          ; preds = %while_condition_check.i
  %2 = add i32 %.06.i, 1
  %3 = getelementptr i8, i8* %.0.i, i64 1
  br label %while_condition_check.i

func.std.ryu.c_strlen..1.0P.const.builtin.uint8.builtin.int32.7.exit: ; preds = %alloca, %while_condition_check.i
  %merge.i = phi i32 [ 0, %alloca ], [ %.06.i, %while_condition_check.i ]
  %4 = call i32 @func.std.ryu.s2f_n..3.0P.const.builtin.uint8.builtin.int32.0P.builtin.float32.builtin.uint32(i8* %0, i32 %merge.i, float* %1)
  ret i32 %4
}

declare void @free(i8*)

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #1

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #1

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #0

; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn
declare void @llvm.experimental.noalias.scope.decl(metadata) #3

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #0

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #0

attributes #0 = { argmemonly nofree nosync nounwind willreturn }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #3 = { inaccessiblememonly nofree nosync nounwind willreturn }

!0 = !{!1}
!1 = distinct !{!1, !2, !"func.std.as_str..1.0R.const.struct.std::string.builtin.str: argument 0"}
!2 = distinct !{!2, !"func.std.as_str..1.0R.const.struct.std::string.builtin.str"}
!3 = !{!4}
!4 = distinct !{!4, !5, !"func.std.as_str..1.0R.const.struct.std::string.builtin.str: argument 0"}
!5 = distinct !{!5, !"func.std.as_str..1.0R.const.struct.std::string.builtin.str"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"func.std.rounded_alloc..1.builtin.uint64.0T.2.0P.builtin.uint8.builtin.uint64: argument 0"}
!8 = distinct !{!8, !"func.std.rounded_alloc..1.builtin.uint64.0T.2.0P.builtin.uint8.builtin.uint64"}
!9 = !{!10}
!10 = distinct !{!10, !11, !"func.std.as_str..1.0R.const.struct.std::string.builtin.str: argument 0"}
!11 = distinct !{!11, !"func.std.as_str..1.0R.const.struct.std::string.builtin.str"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"func.std.as_str..1.0R.const.struct.std::string.builtin.str: argument 0"}
!14 = distinct !{!14, !"func.std.as_str..1.0R.const.struct.std::string.builtin.str"}
!15 = !{!16}
!16 = distinct !{!16, !17, !"ctor.std::string..1.builtin.str: argument 1"}
!17 = distinct !{!17, !"ctor.std::string..1.builtin.str"}
!18 = !{!19}
!19 = distinct !{!19, !17, !"ctor.std::string..1.builtin.str: argument 0"}
!20 = !{!19, !16}
!21 = !{!22}
!22 = distinct !{!22, !23, !"func.std.as_str..1.0R.const.struct.std::string.builtin.str: argument 0"}
!23 = distinct !{!23, !"func.std.as_str..1.0R.const.struct.std::string.builtin.str"}
!24 = !{!25}
!25 = distinct !{!25, !26, !"func.std.as_str..1.0R.const.struct.std::string.builtin.str: argument 0"}
!26 = distinct !{!26, !"func.std.as_str..1.0R.const.struct.std::string.builtin.str"}
!27 = !{!28}
!28 = distinct !{!28, !29, !"func.std.as_str..1.0R.const.struct.std::string.builtin.str: argument 0"}
!29 = distinct !{!29, !"func.std.as_str..1.0R.const.struct.std::string.builtin.str"}
!30 = !{!31}
!31 = distinct !{!31, !32, !"func.std.ryu.to_chars_shortest..3.struct.std::ryu::floating_decimal_64.builtin.bool.0P.builtin.uint8.0P.builtin.uint8: argument 0"}
!32 = distinct !{!32, !"func.std.ryu.to_chars_shortest..3.struct.std::ryu::floating_decimal_64.builtin.bool.0P.builtin.uint8.0P.builtin.uint8"}
!33 = !{!34}
!34 = distinct !{!34, !35, !"func.std.ryu.to_chars_fixed..2.struct.std::ryu::floating_decimal_64.0P.builtin.uint8.0P.builtin.uint8: argument 0"}
!35 = distinct !{!35, !"func.std.ryu.to_chars_fixed..2.struct.std::ryu::floating_decimal_64.0P.builtin.uint8.0P.builtin.uint8"}
!36 = !{!34, !31}
!37 = !{!38}
!38 = distinct !{!38, !39, !"func.std.ryu.to_chars_scientific..2.struct.std::ryu::floating_decimal_64.0P.builtin.uint8.0P.builtin.uint8: argument 0"}
!39 = distinct !{!39, !"func.std.ryu.to_chars_scientific..2.struct.std::ryu::floating_decimal_64.0P.builtin.uint8.0P.builtin.uint8"}
!40 = !{!38, !31}
!41 = !{!42}
!42 = distinct !{!42, !43, !"func.std.ryu.s2d_str..2.builtin.str.0P.builtin.float64.builtin.uint32: argument 0"}
!43 = distinct !{!43, !"func.std.ryu.s2d_str..2.builtin.str.0P.builtin.float64.builtin.uint32"}
!44 = !{i64 0, i64 65}
!45 = !{!46}
!46 = distinct !{!46, !47, !"func.std.ryu.s2f_str..2.builtin.str.0P.builtin.float32.builtin.uint32: argument 0"}
!47 = distinct !{!47, !"func.std.ryu.s2f_str..2.builtin.str.0P.builtin.float32.builtin.uint32"}
!48 = !{i32 0, i32 33}
!49 = !{!50}
!50 = distinct !{!50, !51, !"func.std.ryu.to_chars..3.struct.std::ryu::floating_decimal_64.builtin.bool.0P.builtin.uint8.builtin.int32: argument 0"}
!51 = distinct !{!51, !"func.std.ryu.to_chars..3.struct.std::ryu::floating_decimal_64.builtin.bool.0P.builtin.uint8.builtin.int32"}
