import std::libc::stdio;
import std::libc::stdlib;

@__builtin
export function __builtin_str_length(s: str) -> usize
{
	let continuation_byte_count = 0uz;
	const begin = __builtin_str_begin_ptr(s);
	const end   = __builtin_str_end_ptr(s);
	for (let it = begin; it != end; ++it)
	{
		const c = *it;
		if ((c & 0b1100'0000u8) == 0b1000'0000u8)
		{
			continuation_byte_count += 1;
		}
	}
	const size = __builtin_str_size(s);
	return size - continuation_byte_count;
}

@__builtin
export function __builtin_str_starts_with(s: str, prefix: str) -> bool
{
	if (__builtin_str_size(s) < __builtin_str_size(prefix))
	{
		return false;
	}

	let s_it = __builtin_str_begin_ptr(s);
	let prefix_it = __builtin_str_begin_ptr(prefix);
	const prefix_end = __builtin_str_end_ptr(prefix);
	for (; prefix_it != prefix_end; ++s_it, ++prefix_it)
	{
		if (*s_it != *prefix_it)
		{
			return false;
		}
	}
	return true;
}

@__builtin
export function __builtin_str_ends_with(s: str, postfix: str) -> bool
{
	if (__builtin_str_size(s) < __builtin_str_size(postfix))
	{
		return false;
	}

	let s_it = __builtin_str_end_ptr(s) - __builtin_str_size(postfix);
	let postfix_it = __builtin_str_begin_ptr(postfix);
	const postfix_end = __builtin_str_end_ptr(postfix);
	for (; postfix_it != postfix_end; ++s_it, ++postfix_it)
	{
		if (*s_it != *postfix_it)
		{
			return false;
		}
	}
	return true;
}

@__builtin export function __builtin_str_begin_ptr(s: str) -> *const uint8;
@__builtin export function __builtin_str_end_ptr(s: str) -> *const uint8;
@__builtin
export function __builtin_str_size(s: str) -> usize
{
	return (__builtin_str_end_ptr(s) - __builtin_str_begin_ptr(s)) as usize;
}
@__builtin export function __builtin_str_from_ptrs(begin: *const uint8, end: *const uint8) -> str;

@__builtin export function __builtin_slice_begin_ptr(slice: [: auto]) -> typeof &slice[0];
@__builtin export function __builtin_slice_begin_const_ptr(slice: [: const auto]) -> typeof &slice[0];
@__builtin export function __builtin_slice_end_ptr(slice: [: auto]) -> typeof &slice[0];
@__builtin export function __builtin_slice_end_const_ptr(slice: [: const auto]) -> typeof &slice[0];
@__builtin
export function __builtin_slice_size(slice: [: const auto]) -> usize
{
	return (__builtin_slice_end_const_ptr(slice) - __builtin_slice_begin_const_ptr(slice)) as usize;
}
@__builtin export function __builtin_slice_from_ptrs(begin: *auto, end: *auto)
	-> (if consteval (typeof begin != typeof end) {
		(consteval __builtin_comptime_compile_error(__builtin_comptime_concatenate_strs(
			"mismatched pointer types '",
			__builtin_typename_as_str(typeof begin),
			"' and '",
			__builtin_typename_as_str(typeof end),
			"' in 'function __builtin_slice_from_ptrs'"
		)));
	} else {}, [: __builtin_remove_pointer(typeof begin)]);
@__builtin export function __builtin_slice_from_const_ptrs(begin: *const auto, end: *const auto)
	-> (if consteval (typeof begin != typeof end) {
		(consteval __builtin_comptime_compile_error(__builtin_comptime_concatenate_strs(
			"mismatched pointer types '",
			__builtin_typename_as_str(typeof begin),
			"' and '",
			__builtin_typename_as_str(typeof end),
			"' in 'function __builtin_slice_from_const_ptrs'"
		)));
	} else {}, [: __builtin_remove_pointer(typeof begin)]);

@__builtin export function __builtin_pointer_cast(T: *typename, ptr: *const void) -> T;
@__builtin export function __builtin_pointer_to_int(ptr: *const void) -> usize;
@__builtin export function __builtin_int_to_pointer(T: *typename, n: usize) -> T;

@__builtin export function __builtin_call_destructor(obj: &auto);
@__builtin export function __builtin_inplace_construct(ptr: *auto, val: auto)
	-> (if consteval (__builtin_remove_pointer(typeof ptr) != typeof val) {
		(consteval __builtin_comptime_compile_error(__builtin_comptime_concatenate_strs(
			"value of type '",
			__builtin_typename_as_str(typeof val),
			"' doesn't match the pointer type '",
			__builtin_typename_as_str(typeof ptr),
			"' in 'function __builtin_inplace_construct'"
		)));
	} else {}, void);
@__builtin export function __builtin_swap(lhs: &auto, rhs: &auto)
	-> (if consteval (typeof lhs != typeof rhs) {
		(consteval __builtin_comptime_compile_error(__builtin_comptime_concatenate_strs(
			"different types '",
			__builtin_typename_as_str(typeof lhs),
			"' and '",
			__builtin_typename_as_str(typeof rhs),
			"' in 'function __builtin_swap'"
		)));
	} else {}, void);

@__builtin export function __builtin_is_comptime() -> bool;

@__builtin @symbol_name("__bozon_builtin_is_option_set_impl") consteval function __builtin_is_option_set_impl(begin: *const uint8, end: *const uint8) -> bool;
@__builtin
export consteval function __builtin_is_option_set(option: str) -> bool
{
	return __builtin_is_option_set_impl(__builtin_str_begin_ptr(option), __builtin_str_end_ptr(option));
}

@__builtin
export function __builtin_panic(message: str)
{
	if (__builtin_is_comptime())
	{
		__builtin_comptime_compile_error(message);
	}
	else
	{
		std::libc::fwrite(__builtin_str_begin_ptr(message), 1, __builtin_str_size(message), std::libc::stderr());
		std::libc::abort();
	}
}

@__builtin
export function __builtin_print_stdout(s: str)
{
	std::libc::fwrite(__builtin_str_begin_ptr(s), 1, __builtin_str_size(s), std::libc::stdout());
}
@__builtin
export function __builtin_print_stderr(s: str)
{
	std::libc::fwrite(__builtin_str_begin_ptr(s), 1, __builtin_str_size(s), std::libc::stderr());
}

@__builtin @symbol_name("__bozon_builtin_comptime_malloc") consteval function __builtin_comptime_malloc(size: usize) -> *void;
@__builtin export consteval function __builtin_comptime_malloc_type(T: typename, count: usize) -> *T;
@__builtin @symbol_name("__bozon_builtin_comptime_free") export consteval function __builtin_comptime_free(ptr: *void);

@__builtin export consteval function __builtin_comptime_compile_error(message: str);
@__builtin export consteval function __builtin_comptime_compile_warning(message: str);
// src_tokens variants are handled in __comptime_checking.bz

@__builtin consteval function __builtin_comptime_concatenate_strs(s: ...consteval str) -> str;

@__builtin export consteval function __builtin_typename_as_str(T: typename) -> str;

@__builtin export consteval function __builtin_is_const(T: typename) -> bool;
@__builtin export consteval function __builtin_is_consteval(T: typename) -> bool;
@__builtin export consteval function __builtin_is_pointer(T: typename) -> bool;
@__builtin export consteval function __builtin_is_reference(T: typename) -> bool;
@__builtin export consteval function __builtin_is_move_reference(T: typename) -> bool;

@__builtin export consteval function __builtin_remove_const(T: typename) -> typename;
@__builtin export consteval function __builtin_remove_consteval(T: typename) -> typename;
@__builtin export consteval function __builtin_remove_pointer(T: typename) -> typename;
@__builtin export consteval function __builtin_remove_reference(T: typename) -> typename;
@__builtin export consteval function __builtin_remove_move_reference(T: typename) -> typename;

@__builtin export consteval function __builtin_is_default_constructible(T: typename) -> bool;
@__builtin export consteval function __builtin_is_copy_constructible(T: typename) -> bool;
@__builtin export consteval function __builtin_is_trivially_copy_constructible(T: typename) -> bool;
@__builtin export consteval function __builtin_is_trivially_destructible(T: typename) -> bool;

@__builtin @symbol_name("llvm.lifetime.start.p0i8") function __builtin_lifetime_start(size: uint64, ptr: *void);
@__builtin @symbol_name("llvm.lifetime.end.p0i8") function __builtin_lifetime_end(size: uint64, ptr: *void);

@__builtin @symbol_name(
	if (sizeof usize == 8) {
		"llvm.memcpy.p0i8.p0i8.i64"
	} else if (sizeof usize == 4) {
		"llvm.memcpy.p0i8.p0i8.i32"
	} else {
		unreachable
	}
) export function __builtin_memcpy(dest: *void, src: *const void, n: usize);
@__builtin @symbol_name(
	if (sizeof usize == 8) {
		"llvm.memmove.p0i8.p0i8.i64"
	} else if (sizeof usize == 4) {
		"llvm.memmove.p0i8.p0i8.i32"
	} else {
		unreachable
	}
) export function __builtin_memmove(dest: *void, src: *const void, n: usize);
@__builtin @symbol_name(
	if (sizeof usize == 8) {
		"llvm.memset.p0i8.i64"
	} else if (sizeof usize == 4) {
		"llvm.memset.p0i8.i32"
	} else {
		unreachable
	}
) export function __builtin_memset(dest: *void, val: uint8, n: usize);

@__builtin @symbol_name("llvm.exp.f32") export function __builtin_exp_f32(x: float32) -> float32;
@__builtin @symbol_name("llvm.exp.f64") export function __builtin_exp_f64(x: float64) -> float64;
@__builtin @symbol_name("llvm.exp2.f32") export function __builtin_exp2_f32(x: float32) -> float32;
@__builtin @symbol_name("llvm.exp2.f64") export function __builtin_exp2_f64(x: float64) -> float64;
@__builtin @symbol_name("expm1f") export function __builtin_expm1_f32(x: float32) -> float32;
@__builtin @symbol_name("expm1")  export function __builtin_expm1_f64(x: float64) -> float64;
@__builtin @symbol_name("llvm.log.f32") export function __builtin_log_f32(x: float32) -> float32;
@__builtin @symbol_name("llvm.log.f64") export function __builtin_log_f64(x: float64) -> float64;
@__builtin @symbol_name("llvm.log10.f32") export function __builtin_log10_f32(x: float32) -> float32;
@__builtin @symbol_name("llvm.log10.f64") export function __builtin_log10_f64(x: float64) -> float64;
@__builtin @symbol_name("llvm.log2.f32") export function __builtin_log2_f32(x: float32) -> float32;
@__builtin @symbol_name("llvm.log2.f64") export function __builtin_log2_f64(x: float64) -> float64;
@__builtin @symbol_name("log1pf") export function __builtin_log1p_f32(x: float32) -> float32;
@__builtin @symbol_name("log1p")  export function __builtin_log1p_f64(x: float64) -> float64;

@__builtin @symbol_name("llvm.sqrt.f32") export function __builtin_sqrt_f32(x: float32) -> float32;
@__builtin @symbol_name("llvm.sqrt.f64") export function __builtin_sqrt_f64(x: float64) -> float64;
@__builtin @symbol_name("llvm.pow.f32") export function __builtin_pow_f32(x: float32, y: float32) -> float32;
@__builtin @symbol_name("llvm.pow.f64") export function __builtin_pow_f64(x: float64, y: float64) -> float64;
@__builtin @symbol_name("cbrtf") export function __builtin_cbrt_f32(x: float32) -> float32;
@__builtin @symbol_name("cbrt")  export function __builtin_cbrt_f64(x: float64) -> float64;
@__builtin @symbol_name("hypotf") export function __builtin_hypot_f32(x: float32, y: float32) -> float32;
@__builtin @symbol_name("hypot")  export function __builtin_hypot_f64(x: float64, y: float64) -> float64;

@__builtin @symbol_name("llvm.sin.f32") export function __builtin_sin_f32(x: float32) -> float32;
@__builtin @symbol_name("llvm.sin.f64") export function __builtin_sin_f64(x: float64) -> float64;
@__builtin @symbol_name("llvm.cos.f32") export function __builtin_cos_f32(x: float32) -> float32;
@__builtin @symbol_name("llvm.cos.f64") export function __builtin_cos_f64(x: float64) -> float64;
@__builtin @symbol_name("tanf") export function __builtin_tan_f32(x: float32) -> float32;
@__builtin @symbol_name("tan")  export function __builtin_tan_f64(x: float64) -> float64;
@__builtin @symbol_name("asinf") export function __builtin_asin_f32(x: float32) -> float32;
@__builtin @symbol_name("asin")  export function __builtin_asin_f64(x: float64) -> float64;
@__builtin @symbol_name("acosf") export function __builtin_acos_f32(x: float32) -> float32;
@__builtin @symbol_name("acos")  export function __builtin_acos_f64(x: float64) -> float64;
@__builtin @symbol_name("atanf") export function __builtin_atan_f32(x: float32) -> float32;
@__builtin @symbol_name("atan")  export function __builtin_atan_f64(x: float64) -> float64;
@__builtin @symbol_name("atan2f") export function __builtin_atan2_f32(y: float32, x: float32) -> float32;
@__builtin @symbol_name("atan2")  export function __builtin_atan2_f64(y: float64, x: float64) -> float64;

@__builtin @symbol_name("sinhf") export function __builtin_sinh_f32(x: float32) -> float32;
@__builtin @symbol_name("sinh")  export function __builtin_sinh_f64(x: float64) -> float64;
@__builtin @symbol_name("coshf") export function __builtin_cosh_f32(x: float32) -> float32;
@__builtin @symbol_name("cosh")  export function __builtin_cosh_f64(x: float64) -> float64;
@__builtin @symbol_name("tanhf") export function __builtin_tanh_f32(x: float32) -> float32;
@__builtin @symbol_name("tanh")  export function __builtin_tanh_f64(x: float64) -> float64;
@__builtin @symbol_name("asinhf") export function __builtin_asinh_f32(x: float32) -> float32;
@__builtin @symbol_name("asinh")  export function __builtin_asinh_f64(x: float64) -> float64;
@__builtin @symbol_name("acoshf") export function __builtin_acosh_f32(x: float32) -> float32;
@__builtin @symbol_name("acosh")  export function __builtin_acosh_f64(x: float64) -> float64;
@__builtin @symbol_name("atanhf") export function __builtin_atanh_f32(x: float32) -> float32;
@__builtin @symbol_name("atanh")  export function __builtin_atanh_f64(x: float64) -> float64;

@__builtin @symbol_name("erff") export function __builtin_erf_f32(x: float32) -> float32;
@__builtin @symbol_name("erf")  export function __builtin_erf_f64(x: float64) -> float64;
@__builtin @symbol_name("erfcf") export function __builtin_erfc_f32(x: float32) -> float32;
@__builtin @symbol_name("erfc")  export function __builtin_erfc_f64(x: float64) -> float64;
@__builtin @symbol_name("tgammaf") export function __builtin_tgamma_f32(x: float32) -> float32;
@__builtin @symbol_name("tgamma")  export function __builtin_tgamma_f64(x: float64) -> float64;
@__builtin @symbol_name("lgammaf") export function __builtin_lgamma_f32(x: float32) -> float32;
@__builtin @symbol_name("lgamma")  export function __builtin_lgamma_f64(x: float64) -> float64;

@__builtin @symbol_name("llvm.bitreverse.i8")  export function __builtin_bitreverse_u8 (n: uint8)  -> uint8;
@__builtin @symbol_name("llvm.bitreverse.i16") export function __builtin_bitreverse_u16(n: uint16) -> uint16;
@__builtin @symbol_name("llvm.bitreverse.i32") export function __builtin_bitreverse_u32(n: uint32) -> uint32;
@__builtin @symbol_name("llvm.bitreverse.i64") export function __builtin_bitreverse_u64(n: uint64) -> uint64;
@__builtin @symbol_name("llvm.ctpop.i8")  export function __builtin_popcount_u8 (n: uint8)  -> uint8;
@__builtin @symbol_name("llvm.ctpop.i16") export function __builtin_popcount_u16(n: uint16) -> uint16;
@__builtin @symbol_name("llvm.ctpop.i32") export function __builtin_popcount_u32(n: uint32) -> uint32;
@__builtin @symbol_name("llvm.ctpop.i64") export function __builtin_popcount_u64(n: uint64) -> uint64;
@__builtin @symbol_name("llvm.bswap.i16") export function __builtin_byteswap_u16(n: uint16) -> uint16;
@__builtin @symbol_name("llvm.bswap.i32") export function __builtin_byteswap_u32(n: uint32) -> uint32;
@__builtin @symbol_name("llvm.bswap.i64") export function __builtin_byteswap_u64(n: uint64) -> uint64;

@__builtin @symbol_name("llvm.ctlz.i8")  export function __builtin_clz_u8 (n: uint8)  -> uint8;
@__builtin @symbol_name("llvm.ctlz.i16") export function __builtin_clz_u16(n: uint16) -> uint16;
@__builtin @symbol_name("llvm.ctlz.i32") export function __builtin_clz_u32(n: uint32) -> uint32;
@__builtin @symbol_name("llvm.ctlz.i64") export function __builtin_clz_u64(n: uint64) -> uint64;
@__builtin @symbol_name("llvm.cttz.i8")  export function __builtin_ctz_u8 (n: uint8)  -> uint8;
@__builtin @symbol_name("llvm.cttz.i16") export function __builtin_ctz_u16(n: uint16) -> uint16;
@__builtin @symbol_name("llvm.cttz.i32") export function __builtin_ctz_u32(n: uint32) -> uint32;
@__builtin @symbol_name("llvm.cttz.i64") export function __builtin_ctz_u64(n: uint64) -> uint64;
@__builtin @symbol_name("llvm.fshl.i8")  export function __builtin_fshl_u8 (a: uint8,  b: uint8,  amount: uint8)  -> uint8;
@__builtin @symbol_name("llvm.fshl.i16") export function __builtin_fshl_u16(a: uint16, b: uint16, amount: uint16) -> uint16;
@__builtin @symbol_name("llvm.fshl.i32") export function __builtin_fshl_u32(a: uint32, b: uint32, amount: uint32) -> uint32;
@__builtin @symbol_name("llvm.fshl.i64") export function __builtin_fshl_u64(a: uint64, b: uint64, amount: uint64) -> uint64;
@__builtin @symbol_name("llvm.fshr.i8")  export function __builtin_fshr_u8 (a: uint8,  b: uint8,  amount: uint8)  -> uint8;
@__builtin @symbol_name("llvm.fshr.i16") export function __builtin_fshr_u16(a: uint16, b: uint16, amount: uint16) -> uint16;
@__builtin @symbol_name("llvm.fshr.i32") export function __builtin_fshr_u32(a: uint32, b: uint32, amount: uint32) -> uint32;
@__builtin @symbol_name("llvm.fshr.i64") export function __builtin_fshr_u64(a: uint64, b: uint64, amount: uint64) -> uint64;

//
// unary operators
//

@__builtin export operator + (n: int8)  -> int8;
@__builtin export operator + (n: int16) -> int16;
@__builtin export operator + (n: int32) -> int32;
@__builtin export operator + (n: int64) -> int64;
@__builtin export operator + (n: uint8)  -> uint8;
@__builtin export operator + (n: uint16) -> uint16;
@__builtin export operator + (n: uint32) -> uint32;
@__builtin export operator + (n: uint64) -> uint64;
@__builtin export operator + (x: float32) -> float32;
@__builtin export operator + (x: float64) -> float64;

@__builtin export operator - (n: int8)  -> int8;
@__builtin export operator - (n: int16) -> int16;
@__builtin export operator - (n: int32) -> int32;
@__builtin export operator - (n: int64) -> int64;
@__builtin export operator - (x: float32) -> float32;
@__builtin export operator - (x: float64) -> float64;

@__builtin export operator * (p: *auto) -> &__builtin_remove_pointer(typeof p);
@__builtin export operator * (p: *const auto) -> &__builtin_remove_pointer(typeof p);

@__builtin export operator ~ (n: uint8)  -> uint8;
@__builtin export operator ~ (n: uint16) -> uint16;
@__builtin export operator ~ (n: uint32) -> uint32;
@__builtin export operator ~ (n: uint64) -> uint64;
@__builtin export operator ~ (n: bool) -> bool;

@__builtin export operator ! (n: bool) -> bool;

@__builtin export operator ++ (n: &int8)  -> &int8;
@__builtin export operator ++ (n: &int16) -> &int16;
@__builtin export operator ++ (n: &int32) -> &int32;
@__builtin export operator ++ (n: &int64) -> &int64;
@__builtin export operator ++ (n: &uint8)  -> &uint8;
@__builtin export operator ++ (n: &uint16) -> &uint16;
@__builtin export operator ++ (n: &uint32) -> &uint32;
@__builtin export operator ++ (n: &uint64) -> &uint64;
@__builtin export operator ++ (c: &char) -> &char;
@__builtin export operator ++ (p: &*auto) -> typeof p;
@__builtin export operator ++ (p: &*const auto) -> typeof p;

@__builtin export operator -- (n: &int8)  -> &int8;
@__builtin export operator -- (n: &int16) -> &int16;
@__builtin export operator -- (n: &int32) -> &int32;
@__builtin export operator -- (n: &int64) -> &int64;
@__builtin export operator -- (n: &uint8)  -> &uint8;
@__builtin export operator -- (n: &uint16) -> &uint16;
@__builtin export operator -- (n: &uint32) -> &uint32;
@__builtin export operator -- (n: &uint64) -> &uint64;
@__builtin export operator -- (c: &char) -> &char;
@__builtin export operator -- (p: &*auto) -> typeof p;
@__builtin export operator -- (p: &*const auto) -> typeof p;


//
// binary operators
//

@__builtin_assign export operator = (lhs: &int8,  rhs: int8)  -> &int8;
@__builtin_assign export operator = (lhs: &int16, rhs: int16) -> &int16;
@__builtin_assign export operator = (lhs: &int32, rhs: int32) -> &int32;
@__builtin_assign export operator = (lhs: &int64, rhs: int64) -> &int64;
@__builtin_assign export operator = (lhs: &uint8,  rhs: uint8)  -> &uint8;
@__builtin_assign export operator = (lhs: &uint16, rhs: uint16) -> &uint16;
@__builtin_assign export operator = (lhs: &uint32, rhs: uint32) -> &uint32;
@__builtin_assign export operator = (lhs: &uint64, rhs: uint64) -> &uint64;
@__builtin_assign export operator = (lhs: &float32, rhs: float32) -> &float32;
@__builtin_assign export operator = (lhs: &float64, rhs: float64) -> &float64;
@__builtin_assign export operator = (lhs: &char, rhs: char) -> &char;
@__builtin_assign export operator = (lhs: &str, rhs: str) -> &str;
@__builtin_assign export operator = (lhs: &bool, rhs: bool) -> &bool;
@__builtin_assign export operator = (lhs: &*auto, rhs: *auto)
	-> (if consteval (__builtin_remove_reference(typeof lhs) != typeof rhs) {
		(consteval __builtin_comptime_compile_error(__builtin_comptime_concatenate_strs(
			"mismatched pointer types '",
			__builtin_typename_as_str(__builtin_remove_reference(typeof lhs)),
			"' and '",
			__builtin_typename_as_str(typeof rhs),
			"' in assignment"
		)));
	} else {}, typeof lhs);
@__builtin_assign export operator = (lhs: &*const auto, rhs: *const auto)
	-> (if consteval (__builtin_remove_reference(typeof lhs) != typeof rhs) {
		(consteval __builtin_comptime_compile_error(__builtin_comptime_concatenate_strs(
			"mismatched pointer types '",
			__builtin_typename_as_str(__builtin_remove_reference(typeof lhs)),
			"' and '",
			__builtin_typename_as_str(typeof rhs),
			"' in assignment"
		)));
	} else {}, typeof lhs);
@__builtin export operator = (lhs: &*auto, rhs: __null_t) -> typeof lhs;
@__builtin export operator = (lhs: &*const auto, rhs: __null_t) -> typeof lhs;
@__builtin_assign export operator = (lhs: &[: auto], rhs: [: auto])
	-> (if consteval (__builtin_remove_reference(typeof lhs) != typeof rhs) {
		(consteval __builtin_comptime_compile_error(__builtin_comptime_concatenate_strs(
			"mismatched slice types '",
			__builtin_typename_as_str(__builtin_remove_reference(typeof lhs)),
			"' and '",
			__builtin_typename_as_str(typeof rhs),
			"' in assignment"
		)));
	} else {}, typeof lhs);
@__builtin_assign export operator = (lhs: &[: const auto], rhs: [: const auto])
	-> (if consteval (__builtin_remove_reference(typeof lhs) != typeof rhs) {
		(consteval __builtin_comptime_compile_error(__builtin_comptime_concatenate_strs(
			"mismatched slice types '",
			__builtin_typename_as_str(__builtin_remove_reference(typeof lhs)),
			"' and '",
			__builtin_typename_as_str(typeof rhs),
			"' in assignment"
		)));
	} else {}, typeof lhs);
@__builtin_assign export operator = (lhs: &[...auto], rhs: ##[...auto]) -> typeof lhs;
@__builtin_assign export operator = (lhs: &[??: auto], rhs: ##[??: auto]) -> typeof lhs;

@__builtin export operator + (lhs: int8,  rhs: int8)  -> int8;
@__builtin export operator + (lhs: int16, rhs: int16) -> int16;
@__builtin export operator + (lhs: int32, rhs: int32) -> int32;
@__builtin export operator + (lhs: int64, rhs: int64) -> int64;
@__builtin export operator + (lhs: uint8,  rhs: uint8)  -> uint8;
@__builtin export operator + (lhs: uint16, rhs: uint16) -> uint16;
@__builtin export operator + (lhs: uint32, rhs: uint32) -> uint32;
@__builtin export operator + (lhs: uint64, rhs: uint64) -> uint64;
@__builtin export operator + (lhs: float32, rhs: float32) -> float32;
@__builtin export operator + (lhs: float64, rhs: float64) -> float64;

@__builtin export operator + (lhs: char, rhs:  int8)  -> char;
@__builtin export operator + (lhs: char, rhs:  int16) -> char;
@__builtin export operator + (lhs: char, rhs:  int32) -> char;
@__builtin export operator + (lhs: char, rhs:  int64) -> char;
@__builtin export operator + (lhs: char, rhs: uint8)  -> char;
@__builtin export operator + (lhs: char, rhs: uint16) -> char;
@__builtin export operator + (lhs: char, rhs: uint32) -> char;
@__builtin export operator + (lhs: char, rhs: uint64) -> char;
@__builtin export operator + (lhs:  int8,  rhs: char) -> char;
@__builtin export operator + (lhs:  int16, rhs: char) -> char;
@__builtin export operator + (lhs:  int32, rhs: char) -> char;
@__builtin export operator + (lhs:  int64, rhs: char) -> char;
@__builtin export operator + (lhs: uint8,  rhs: char) -> char;
@__builtin export operator + (lhs: uint16, rhs: char) -> char;
@__builtin export operator + (lhs: uint32, rhs: char) -> char;
@__builtin export operator + (lhs: uint64, rhs: char) -> char;
@__builtin export operator + (lhs: *auto, rhs:  int8)  -> typeof lhs;
@__builtin export operator + (lhs: *auto, rhs:  int16) -> typeof lhs;
@__builtin export operator + (lhs: *auto, rhs:  int32) -> typeof lhs;
@__builtin export operator + (lhs: *auto, rhs:  int64) -> typeof lhs;
@__builtin export operator + (lhs: *auto, rhs: uint8)  -> typeof lhs;
@__builtin export operator + (lhs: *auto, rhs: uint16) -> typeof lhs;
@__builtin export operator + (lhs: *auto, rhs: uint32) -> typeof lhs;
@__builtin export operator + (lhs: *auto, rhs: uint64) -> typeof lhs;
@__builtin export operator + (lhs: *const auto, rhs:  int8)  -> typeof lhs;
@__builtin export operator + (lhs: *const auto, rhs:  int16) -> typeof lhs;
@__builtin export operator + (lhs: *const auto, rhs:  int32) -> typeof lhs;
@__builtin export operator + (lhs: *const auto, rhs:  int64) -> typeof lhs;
@__builtin export operator + (lhs: *const auto, rhs: uint8)  -> typeof lhs;
@__builtin export operator + (lhs: *const auto, rhs: uint16) -> typeof lhs;
@__builtin export operator + (lhs: *const auto, rhs: uint32) -> typeof lhs;
@__builtin export operator + (lhs: *const auto, rhs: uint64) -> typeof lhs;
@__builtin export operator + (lhs:  int8,  rhs: *auto) -> typeof rhs;
@__builtin export operator + (lhs:  int16, rhs: *auto) -> typeof rhs;
@__builtin export operator + (lhs:  int32, rhs: *auto) -> typeof rhs;
@__builtin export operator + (lhs:  int64, rhs: *auto) -> typeof rhs;
@__builtin export operator + (lhs: uint8,  rhs: *auto) -> typeof rhs;
@__builtin export operator + (lhs: uint16, rhs: *auto) -> typeof rhs;
@__builtin export operator + (lhs: uint32, rhs: *auto) -> typeof rhs;
@__builtin export operator + (lhs: uint64, rhs: *auto) -> typeof rhs;
@__builtin export operator + (lhs:  int8,  rhs: *const auto) -> typeof rhs;
@__builtin export operator + (lhs:  int16, rhs: *const auto) -> typeof rhs;
@__builtin export operator + (lhs:  int32, rhs: *const auto) -> typeof rhs;
@__builtin export operator + (lhs:  int64, rhs: *const auto) -> typeof rhs;
@__builtin export operator + (lhs: uint8,  rhs: *const auto) -> typeof rhs;
@__builtin export operator + (lhs: uint16, rhs: *const auto) -> typeof rhs;
@__builtin export operator + (lhs: uint32, rhs: *const auto) -> typeof rhs;
@__builtin export operator + (lhs: uint64, rhs: *const auto) -> typeof rhs;

@__builtin export operator += (lhs: &int8,  rhs: int8)  -> &int8;
@__builtin export operator += (lhs: &int16, rhs: int16) -> &int16;
@__builtin export operator += (lhs: &int32, rhs: int32) -> &int32;
@__builtin export operator += (lhs: &int64, rhs: int64) -> &int64;
@__builtin export operator += (lhs: &uint8,  rhs: uint8)  -> &uint8;
@__builtin export operator += (lhs: &uint16, rhs: uint16) -> &uint16;
@__builtin export operator += (lhs: &uint32, rhs: uint32) -> &uint32;
@__builtin export operator += (lhs: &uint64, rhs: uint64) -> &uint64;
@__builtin export operator += (lhs: &float32, rhs: float32) -> &float32;
@__builtin export operator += (lhs: &float64, rhs: float64) -> &float64;

@__builtin export operator += (lhs: &char, rhs:  int8)  -> &char;
@__builtin export operator += (lhs: &char, rhs:  int16) -> &char;
@__builtin export operator += (lhs: &char, rhs:  int32) -> &char;
@__builtin export operator += (lhs: &char, rhs:  int64) -> &char;
@__builtin export operator += (lhs: &char, rhs: uint8)  -> &char;
@__builtin export operator += (lhs: &char, rhs: uint16) -> &char;
@__builtin export operator += (lhs: &char, rhs: uint32) -> &char;
@__builtin export operator += (lhs: &char, rhs: uint64) -> &char;
@__builtin export operator += (lhs: &*auto, rhs:  int8)  -> typeof lhs;
@__builtin export operator += (lhs: &*auto, rhs:  int16) -> typeof lhs;
@__builtin export operator += (lhs: &*auto, rhs:  int32) -> typeof lhs;
@__builtin export operator += (lhs: &*auto, rhs:  int64) -> typeof lhs;
@__builtin export operator += (lhs: &*auto, rhs: uint8)  -> typeof lhs;
@__builtin export operator += (lhs: &*auto, rhs: uint16) -> typeof lhs;
@__builtin export operator += (lhs: &*auto, rhs: uint32) -> typeof lhs;
@__builtin export operator += (lhs: &*auto, rhs: uint64) -> typeof lhs;
@__builtin export operator += (lhs: &*const auto, rhs:  int8)  -> typeof lhs;
@__builtin export operator += (lhs: &*const auto, rhs:  int16) -> typeof lhs;
@__builtin export operator += (lhs: &*const auto, rhs:  int32) -> typeof lhs;
@__builtin export operator += (lhs: &*const auto, rhs:  int64) -> typeof lhs;
@__builtin export operator += (lhs: &*const auto, rhs: uint8)  -> typeof lhs;
@__builtin export operator += (lhs: &*const auto, rhs: uint16) -> typeof lhs;
@__builtin export operator += (lhs: &*const auto, rhs: uint32) -> typeof lhs;
@__builtin export operator += (lhs: &*const auto, rhs: uint64) -> typeof lhs;

@__builtin export operator - (lhs: int8,  rhs: int8)  -> int8;
@__builtin export operator - (lhs: int16, rhs: int16) -> int16;
@__builtin export operator - (lhs: int32, rhs: int32) -> int32;
@__builtin export operator - (lhs: int64, rhs: int64) -> int64;
@__builtin export operator - (lhs: uint8,  rhs: uint8)  -> uint8;
@__builtin export operator - (lhs: uint16, rhs: uint16) -> uint16;
@__builtin export operator - (lhs: uint32, rhs: uint32) -> uint32;
@__builtin export operator - (lhs: uint64, rhs: uint64) -> uint64;
@__builtin export operator - (lhs: float32, rhs: float32) -> float32;
@__builtin export operator - (lhs: float64, rhs: float64) -> float64;

@__builtin export operator - (lhs: char, rhs:  int8)  -> char;
@__builtin export operator - (lhs: char, rhs:  int16) -> char;
@__builtin export operator - (lhs: char, rhs:  int32) -> char;
@__builtin export operator - (lhs: char, rhs:  int64) -> char;
@__builtin export operator - (lhs: char, rhs: uint8)  -> char;
@__builtin export operator - (lhs: char, rhs: uint16) -> char;
@__builtin export operator - (lhs: char, rhs: uint32) -> char;
@__builtin export operator - (lhs: char, rhs: uint64) -> char;
@__builtin export operator - (lhs: char, rhs: char) -> int32;
@__builtin export operator - (lhs: *auto, rhs:  int8)  -> typeof lhs;
@__builtin export operator - (lhs: *auto, rhs:  int16) -> typeof lhs;
@__builtin export operator - (lhs: *auto, rhs:  int32) -> typeof lhs;
@__builtin export operator - (lhs: *auto, rhs:  int64) -> typeof lhs;
@__builtin export operator - (lhs: *auto, rhs: uint8)  -> typeof lhs;
@__builtin export operator - (lhs: *auto, rhs: uint16) -> typeof lhs;
@__builtin export operator - (lhs: *auto, rhs: uint32) -> typeof lhs;
@__builtin export operator - (lhs: *auto, rhs: uint64) -> typeof lhs;
@__builtin export operator - (lhs: *const auto, rhs:  int8)  -> typeof lhs;
@__builtin export operator - (lhs: *const auto, rhs:  int16) -> typeof lhs;
@__builtin export operator - (lhs: *const auto, rhs:  int32) -> typeof lhs;
@__builtin export operator - (lhs: *const auto, rhs:  int64) -> typeof lhs;
@__builtin export operator - (lhs: *const auto, rhs: uint8)  -> typeof lhs;
@__builtin export operator - (lhs: *const auto, rhs: uint16) -> typeof lhs;
@__builtin export operator - (lhs: *const auto, rhs: uint32) -> typeof lhs;
@__builtin export operator - (lhs: *const auto, rhs: uint64) -> typeof lhs;
@__builtin export operator - (lhs: *const auto, rhs: *const auto)
	-> (if consteval (typeof lhs != typeof rhs) {
		(consteval __builtin_comptime_compile_error(__builtin_comptime_concatenate_strs(
			"mismatched pointer types '",
			__builtin_typename_as_str(__builtin_remove_reference(typeof lhs)),
			"' and '",
			__builtin_typename_as_str(typeof rhs),
			"' in 'operator -'"
		)));
	} else {}, isize);

@__builtin export operator -= (lhs: &int8,  rhs: int8)  -> &int8;
@__builtin export operator -= (lhs: &int16, rhs: int16) -> &int16;
@__builtin export operator -= (lhs: &int32, rhs: int32) -> &int32;
@__builtin export operator -= (lhs: &int64, rhs: int64) -> &int64;
@__builtin export operator -= (lhs: &uint8,  rhs: uint8)  -> &uint8;
@__builtin export operator -= (lhs: &uint16, rhs: uint16) -> &uint16;
@__builtin export operator -= (lhs: &uint32, rhs: uint32) -> &uint32;
@__builtin export operator -= (lhs: &uint64, rhs: uint64) -> &uint64;
@__builtin export operator -= (lhs: &float32, rhs: float32) -> &float32;
@__builtin export operator -= (lhs: &float64, rhs: float64) -> &float64;

@__builtin export operator -= (lhs: &char, rhs:  int8)  -> &char;
@__builtin export operator -= (lhs: &char, rhs:  int16) -> &char;
@__builtin export operator -= (lhs: &char, rhs:  int32) -> &char;
@__builtin export operator -= (lhs: &char, rhs:  int64) -> &char;
@__builtin export operator -= (lhs: &char, rhs: uint8)  -> &char;
@__builtin export operator -= (lhs: &char, rhs: uint16) -> &char;
@__builtin export operator -= (lhs: &char, rhs: uint32) -> &char;
@__builtin export operator -= (lhs: &char, rhs: uint64) -> &char;
@__builtin export operator -= (lhs: &*auto, rhs:  int8)  -> typeof lhs;
@__builtin export operator -= (lhs: &*auto, rhs:  int16) -> typeof lhs;
@__builtin export operator -= (lhs: &*auto, rhs:  int32) -> typeof lhs;
@__builtin export operator -= (lhs: &*auto, rhs:  int64) -> typeof lhs;
@__builtin export operator -= (lhs: &*auto, rhs: uint8)  -> typeof lhs;
@__builtin export operator -= (lhs: &*auto, rhs: uint16) -> typeof lhs;
@__builtin export operator -= (lhs: &*auto, rhs: uint32) -> typeof lhs;
@__builtin export operator -= (lhs: &*auto, rhs: uint64) -> typeof lhs;
@__builtin export operator -= (lhs: &*const auto, rhs:  int8)  -> typeof lhs;
@__builtin export operator -= (lhs: &*const auto, rhs:  int16) -> typeof lhs;
@__builtin export operator -= (lhs: &*const auto, rhs:  int32) -> typeof lhs;
@__builtin export operator -= (lhs: &*const auto, rhs:  int64) -> typeof lhs;
@__builtin export operator -= (lhs: &*const auto, rhs: uint8)  -> typeof lhs;
@__builtin export operator -= (lhs: &*const auto, rhs: uint16) -> typeof lhs;
@__builtin export operator -= (lhs: &*const auto, rhs: uint32) -> typeof lhs;
@__builtin export operator -= (lhs: &*const auto, rhs: uint64) -> typeof lhs;

@__builtin export operator * (lhs: int8,  rhs: int8)  -> int8;
@__builtin export operator * (lhs: int16, rhs: int16) -> int16;
@__builtin export operator * (lhs: int32, rhs: int32) -> int32;
@__builtin export operator * (lhs: int64, rhs: int64) -> int64;
@__builtin export operator * (lhs: uint8,  rhs: uint8)  -> uint8;
@__builtin export operator * (lhs: uint16, rhs: uint16) -> uint16;
@__builtin export operator * (lhs: uint32, rhs: uint32) -> uint32;
@__builtin export operator * (lhs: uint64, rhs: uint64) -> uint64;
@__builtin export operator * (lhs: float32, rhs: float32) -> float32;
@__builtin export operator * (lhs: float64, rhs: float64) -> float64;

@__builtin export operator *= (lhs: &int8,  rhs: int8)  -> &int8;
@__builtin export operator *= (lhs: &int16, rhs: int16) -> &int16;
@__builtin export operator *= (lhs: &int32, rhs: int32) -> &int32;
@__builtin export operator *= (lhs: &int64, rhs: int64) -> &int64;
@__builtin export operator *= (lhs: &uint8,  rhs: uint8)  -> &uint8;
@__builtin export operator *= (lhs: &uint16, rhs: uint16) -> &uint16;
@__builtin export operator *= (lhs: &uint32, rhs: uint32) -> &uint32;
@__builtin export operator *= (lhs: &uint64, rhs: uint64) -> &uint64;
@__builtin export operator *= (lhs: &float32, rhs: float32) -> &float32;
@__builtin export operator *= (lhs: &float64, rhs: float64) -> &float64;

@__builtin export operator / (lhs: int8,  rhs: int8)  -> int8;
@__builtin export operator / (lhs: int16, rhs: int16) -> int16;
@__builtin export operator / (lhs: int32, rhs: int32) -> int32;
@__builtin export operator / (lhs: int64, rhs: int64) -> int64;
@__builtin export operator / (lhs: uint8,  rhs: uint8)  -> uint8;
@__builtin export operator / (lhs: uint16, rhs: uint16) -> uint16;
@__builtin export operator / (lhs: uint32, rhs: uint32) -> uint32;
@__builtin export operator / (lhs: uint64, rhs: uint64) -> uint64;
@__builtin export operator / (lhs: float32, rhs: float32) -> float32;
@__builtin export operator / (lhs: float64, rhs: float64) -> float64;

@__builtin export operator /= (lhs: &int8,  rhs: int8)  -> &int8;
@__builtin export operator /= (lhs: &int16, rhs: int16) -> &int16;
@__builtin export operator /= (lhs: &int32, rhs: int32) -> &int32;
@__builtin export operator /= (lhs: &int64, rhs: int64) -> &int64;
@__builtin export operator /= (lhs: &uint8,  rhs: uint8)  -> &uint8;
@__builtin export operator /= (lhs: &uint16, rhs: uint16) -> &uint16;
@__builtin export operator /= (lhs: &uint32, rhs: uint32) -> &uint32;
@__builtin export operator /= (lhs: &uint64, rhs: uint64) -> &uint64;
@__builtin export operator /= (lhs: &float32, rhs: float32) -> &float32;
@__builtin export operator /= (lhs: &float64, rhs: float64) -> &float64;

@__builtin export operator % (lhs: int8,  rhs: int8)  -> int8;
@__builtin export operator % (lhs: int16, rhs: int16) -> int16;
@__builtin export operator % (lhs: int32, rhs: int32) -> int32;
@__builtin export operator % (lhs: int64, rhs: int64) -> int64;
@__builtin export operator % (lhs: uint8,  rhs: uint8)  -> uint8;
@__builtin export operator % (lhs: uint16, rhs: uint16) -> uint16;
@__builtin export operator % (lhs: uint32, rhs: uint32) -> uint32;
@__builtin export operator % (lhs: uint64, rhs: uint64) -> uint64;

@__builtin export operator %= (lhs: &int8,  rhs: int8)  -> &int8;
@__builtin export operator %= (lhs: &int16, rhs: int16) -> &int16;
@__builtin export operator %= (lhs: &int32, rhs: int32) -> &int32;
@__builtin export operator %= (lhs: &int64, rhs: int64) -> &int64;
@__builtin export operator %= (lhs: &uint8,  rhs: uint8)  -> &uint8;
@__builtin export operator %= (lhs: &uint16, rhs: uint16) -> &uint16;
@__builtin export operator %= (lhs: &uint32, rhs: uint32) -> &uint32;
@__builtin export operator %= (lhs: &uint64, rhs: uint64) -> &uint64;

@__builtin export operator == (lhs: int8,  rhs: int8)  -> bool;
@__builtin export operator == (lhs: int16, rhs: int16) -> bool;
@__builtin export operator == (lhs: int32, rhs: int32) -> bool;
@__builtin export operator == (lhs: int64, rhs: int64) -> bool;
@__builtin export operator == (lhs: uint8,  rhs: uint8)  -> bool;
@__builtin export operator == (lhs: uint16, rhs: uint16) -> bool;
@__builtin export operator == (lhs: uint32, rhs: uint32) -> bool;
@__builtin export operator == (lhs: uint64, rhs: uint64) -> bool;
@__builtin export operator == (lhs: float32, rhs: float32) -> bool;
@__builtin export operator == (lhs: float64, rhs: float64) -> bool;
@__builtin export operator == (lhs: char, rhs: char) -> bool;
@__builtin export operator == (lhs: str, rhs: str) -> bool
{
	if (__builtin_str_size(lhs) != __builtin_str_size(rhs))
	{
		return false;
	}

	let lhs_it = __builtin_str_begin_ptr(lhs);
	let rhs_it = __builtin_str_begin_ptr(rhs);
	const lhs_end = __builtin_str_end_ptr(lhs);
	if (lhs_it == rhs_it)
	{
		return true;
	}

	for (; lhs_it != lhs_end; ++lhs_it, ++rhs_it)
	{
		if (*lhs_it != *rhs_it)
		{
			return false;
		}
	}
	return true;
}
@__builtin export operator == (lhs: bool, rhs: bool) -> bool;
@__builtin export operator == (lhs: *const auto, rhs: *const auto)
	-> (if consteval (typeof lhs != typeof rhs) {
		(consteval __builtin_comptime_compile_error(__builtin_comptime_concatenate_strs(
			"mismatched pointer types '",
			__builtin_typename_as_str(__builtin_remove_reference(typeof lhs)),
			"' and '",
			__builtin_typename_as_str(typeof rhs),
			"' in comparison operator"
		)));
	} else {}, bool);
@__builtin export operator == (lhs: *const auto, rhs: __null_t) -> bool;
@__builtin export operator == (lhs: __null_t, rhs: *const auto) -> bool;

@__builtin export operator != (lhs: int8,  rhs: int8)  -> bool;
@__builtin export operator != (lhs: int16, rhs: int16) -> bool;
@__builtin export operator != (lhs: int32, rhs: int32) -> bool;
@__builtin export operator != (lhs: int64, rhs: int64) -> bool;
@__builtin export operator != (lhs: uint8,  rhs: uint8)  -> bool;
@__builtin export operator != (lhs: uint16, rhs: uint16) -> bool;
@__builtin export operator != (lhs: uint32, rhs: uint32) -> bool;
@__builtin export operator != (lhs: uint64, rhs: uint64) -> bool;
@__builtin export operator != (lhs: float32, rhs: float32) -> bool;
@__builtin export operator != (lhs: float64, rhs: float64) -> bool;
@__builtin export operator != (lhs: char, rhs: char) -> bool;
@__builtin export operator != (lhs: str, rhs: str) -> bool
{
	if (__builtin_str_size(lhs) != __builtin_str_size(rhs))
	{
		return true;
	}

	let lhs_it = __builtin_str_begin_ptr(lhs);
	let rhs_it = __builtin_str_begin_ptr(rhs);
	const lhs_end = __builtin_str_end_ptr(lhs);
	if (lhs_it == rhs_it)
	{
		return false;
	}

	for (; lhs_it != lhs_end; ++lhs_it, ++rhs_it)
	{
		if (*lhs_it != *rhs_it)
		{
			return true;
		}
	}
	return false;
}
@__builtin export operator != (lhs: bool, rhs: bool) -> bool;
@__builtin export operator != (lhs: *const auto, rhs: *const auto)
	-> (if consteval (typeof lhs != typeof rhs) {
		(consteval __builtin_comptime_compile_error(__builtin_comptime_concatenate_strs(
			"mismatched pointer types '",
			__builtin_typename_as_str(__builtin_remove_reference(typeof lhs)),
			"' and '",
			__builtin_typename_as_str(typeof rhs),
			"' in comparison operator"
		)));
	} else {}, bool);
@__builtin export operator != (lhs: *const auto, rhs: __null_t) -> bool;
@__builtin export operator != (lhs: __null_t, rhs: *const auto) -> bool;

@__builtin export operator < (lhs: int8,  rhs: int8)  -> bool;
@__builtin export operator < (lhs: int16, rhs: int16) -> bool;
@__builtin export operator < (lhs: int32, rhs: int32) -> bool;
@__builtin export operator < (lhs: int64, rhs: int64) -> bool;
@__builtin export operator < (lhs: uint8,  rhs: uint8)  -> bool;
@__builtin export operator < (lhs: uint16, rhs: uint16) -> bool;
@__builtin export operator < (lhs: uint32, rhs: uint32) -> bool;
@__builtin export operator < (lhs: uint64, rhs: uint64) -> bool;
@__builtin export operator < (lhs: float32, rhs: float32) -> bool;
@__builtin export operator < (lhs: float64, rhs: float64) -> bool;
@__builtin export operator < (lhs: char, rhs: char) -> bool;
@__builtin export operator < (lhs: *const auto, rhs: *const auto)
	-> (if consteval (typeof lhs != typeof rhs) {
		(consteval __builtin_comptime_compile_error(__builtin_comptime_concatenate_strs(
			"mismatched pointer types '",
			__builtin_typename_as_str(__builtin_remove_reference(typeof lhs)),
			"' and '",
			__builtin_typename_as_str(typeof rhs),
			"' in comparison operator"
		)));
	} else {}, bool);

@__builtin export operator <= (lhs: int8,  rhs: int8)  -> bool;
@__builtin export operator <= (lhs: int16, rhs: int16) -> bool;
@__builtin export operator <= (lhs: int32, rhs: int32) -> bool;
@__builtin export operator <= (lhs: int64, rhs: int64) -> bool;
@__builtin export operator <= (lhs: uint8,  rhs: uint8)  -> bool;
@__builtin export operator <= (lhs: uint16, rhs: uint16) -> bool;
@__builtin export operator <= (lhs: uint32, rhs: uint32) -> bool;
@__builtin export operator <= (lhs: uint64, rhs: uint64) -> bool;
@__builtin export operator <= (lhs: float32, rhs: float32) -> bool;
@__builtin export operator <= (lhs: float64, rhs: float64) -> bool;
@__builtin export operator <= (lhs: char, rhs: char) -> bool;
@__builtin export operator <= (lhs: *const auto, rhs: *const auto)
	-> (if consteval (typeof lhs != typeof rhs) {
		(consteval __builtin_comptime_compile_error(__builtin_comptime_concatenate_strs(
			"mismatched pointer types '",
			__builtin_typename_as_str(__builtin_remove_reference(typeof lhs)),
			"' and '",
			__builtin_typename_as_str(typeof rhs),
			"' in comparison operator"
		)));
	} else {}, bool);

@__builtin export operator > (lhs: int8,  rhs: int8)  -> bool;
@__builtin export operator > (lhs: int16, rhs: int16) -> bool;
@__builtin export operator > (lhs: int32, rhs: int32) -> bool;
@__builtin export operator > (lhs: int64, rhs: int64) -> bool;
@__builtin export operator > (lhs: uint8,  rhs: uint8)  -> bool;
@__builtin export operator > (lhs: uint16, rhs: uint16) -> bool;
@__builtin export operator > (lhs: uint32, rhs: uint32) -> bool;
@__builtin export operator > (lhs: uint64, rhs: uint64) -> bool;
@__builtin export operator > (lhs: float32, rhs: float32) -> bool;
@__builtin export operator > (lhs: float64, rhs: float64) -> bool;
@__builtin export operator > (lhs: char, rhs: char) -> bool;
@__builtin export operator > (lhs: *const auto, rhs: *const auto)
	-> (if consteval (typeof lhs != typeof rhs) {
		(consteval __builtin_comptime_compile_error(__builtin_comptime_concatenate_strs(
			"mismatched pointer types '",
			__builtin_typename_as_str(__builtin_remove_reference(typeof lhs)),
			"' and '",
			__builtin_typename_as_str(typeof rhs),
			"' in comparison operator"
		)));
	} else {}, bool);

@__builtin export operator >= (lhs: int8,  rhs: int8)  -> bool;
@__builtin export operator >= (lhs: int16, rhs: int16) -> bool;
@__builtin export operator >= (lhs: int32, rhs: int32) -> bool;
@__builtin export operator >= (lhs: int64, rhs: int64) -> bool;
@__builtin export operator >= (lhs: uint8,  rhs: uint8)  -> bool;
@__builtin export operator >= (lhs: uint16, rhs: uint16) -> bool;
@__builtin export operator >= (lhs: uint32, rhs: uint32) -> bool;
@__builtin export operator >= (lhs: uint64, rhs: uint64) -> bool;
@__builtin export operator >= (lhs: float32, rhs: float32) -> bool;
@__builtin export operator >= (lhs: float64, rhs: float64) -> bool;
@__builtin export operator >= (lhs: char, rhs: char) -> bool;
@__builtin export operator >= (lhs: *const auto, rhs: *const auto)
	-> (if consteval (typeof lhs != typeof rhs) {
		(consteval __builtin_comptime_compile_error(__builtin_comptime_concatenate_strs(
			"mismatched pointer types '",
			__builtin_typename_as_str(__builtin_remove_reference(typeof lhs)),
			"' and '",
			__builtin_typename_as_str(typeof rhs),
			"' in comparison operator"
		)));
	} else {}, bool);

@__builtin export operator & (lhs: uint8,  rhs: uint8)  -> uint8;
@__builtin export operator & (lhs: uint16, rhs: uint16) -> uint16;
@__builtin export operator & (lhs: uint32, rhs: uint32) -> uint32;
@__builtin export operator & (lhs: uint64, rhs: uint64) -> uint64;
@__builtin export operator & (lhs: bool, rhs: bool) -> bool;

@__builtin export operator &= (lhs: &uint8,  rhs: uint8)  -> &uint8;
@__builtin export operator &= (lhs: &uint16, rhs: uint16) -> &uint16;
@__builtin export operator &= (lhs: &uint32, rhs: uint32) -> &uint32;
@__builtin export operator &= (lhs: &uint64, rhs: uint64) -> &uint64;
@__builtin export operator &= (lhs: &bool, rhs: bool) -> &bool;

@__builtin export operator ^ (lhs: uint8,  rhs: uint8)  -> uint8;
@__builtin export operator ^ (lhs: uint16, rhs: uint16) -> uint16;
@__builtin export operator ^ (lhs: uint32, rhs: uint32) -> uint32;
@__builtin export operator ^ (lhs: uint64, rhs: uint64) -> uint64;
@__builtin export operator ^ (lhs: bool, rhs: bool) -> bool;

@__builtin export operator ^= (lhs: &uint8,  rhs: uint8)  -> &uint8;
@__builtin export operator ^= (lhs: &uint16, rhs: uint16) -> &uint16;
@__builtin export operator ^= (lhs: &uint32, rhs: uint32) -> &uint32;
@__builtin export operator ^= (lhs: &uint64, rhs: uint64) -> &uint64;
@__builtin export operator ^= (lhs: &bool, rhs: bool) -> &bool;

@__builtin export operator | (lhs: uint8,  rhs: uint8)  -> uint8;
@__builtin export operator | (lhs: uint16, rhs: uint16) -> uint16;
@__builtin export operator | (lhs: uint32, rhs: uint32) -> uint32;
@__builtin export operator | (lhs: uint64, rhs: uint64) -> uint64;
@__builtin export operator | (lhs: bool, rhs: bool) -> bool;

@__builtin export operator |= (lhs: &uint8,  rhs: uint8)  -> &uint8;
@__builtin export operator |= (lhs: &uint16, rhs: uint16) -> &uint16;
@__builtin export operator |= (lhs: &uint32, rhs: uint32) -> &uint32;
@__builtin export operator |= (lhs: &uint64, rhs: uint64) -> &uint64;
@__builtin export operator |= (lhs: &bool, rhs: bool) -> &bool;

@__builtin export operator << (lhs: uint8,  rhs:  int8)  -> uint8;
@__builtin export operator << (lhs: uint8,  rhs:  int16) -> uint8;
@__builtin export operator << (lhs: uint8,  rhs:  int32) -> uint8;
@__builtin export operator << (lhs: uint8,  rhs:  int64) -> uint8;
@__builtin export operator << (lhs: uint8,  rhs: uint8)  -> uint8;
@__builtin export operator << (lhs: uint8,  rhs: uint16) -> uint8;
@__builtin export operator << (lhs: uint8,  rhs: uint32) -> uint8;
@__builtin export operator << (lhs: uint8,  rhs: uint64) -> uint8;

@__builtin export operator << (lhs: uint16,  rhs:  int8)  -> uint16;
@__builtin export operator << (lhs: uint16,  rhs:  int16) -> uint16;
@__builtin export operator << (lhs: uint16,  rhs:  int32) -> uint16;
@__builtin export operator << (lhs: uint16,  rhs:  int64) -> uint16;
@__builtin export operator << (lhs: uint16,  rhs: uint8)  -> uint16;
@__builtin export operator << (lhs: uint16,  rhs: uint16) -> uint16;
@__builtin export operator << (lhs: uint16,  rhs: uint32) -> uint16;
@__builtin export operator << (lhs: uint16,  rhs: uint64) -> uint16;

@__builtin export operator << (lhs: uint32,  rhs:  int8)  -> uint32;
@__builtin export operator << (lhs: uint32,  rhs:  int16) -> uint32;
@__builtin export operator << (lhs: uint32,  rhs:  int32) -> uint32;
@__builtin export operator << (lhs: uint32,  rhs:  int64) -> uint32;
@__builtin export operator << (lhs: uint32,  rhs: uint8)  -> uint32;
@__builtin export operator << (lhs: uint32,  rhs: uint16) -> uint32;
@__builtin export operator << (lhs: uint32,  rhs: uint32) -> uint32;
@__builtin export operator << (lhs: uint32,  rhs: uint64) -> uint32;

@__builtin export operator << (lhs: uint64,  rhs:  int8)  -> uint64;
@__builtin export operator << (lhs: uint64,  rhs:  int16) -> uint64;
@__builtin export operator << (lhs: uint64,  rhs:  int32) -> uint64;
@__builtin export operator << (lhs: uint64,  rhs:  int64) -> uint64;
@__builtin export operator << (lhs: uint64,  rhs: uint8)  -> uint64;
@__builtin export operator << (lhs: uint64,  rhs: uint16) -> uint64;
@__builtin export operator << (lhs: uint64,  rhs: uint32) -> uint64;
@__builtin export operator << (lhs: uint64,  rhs: uint64) -> uint64;

@__builtin export operator <<= (lhs: &uint8,  rhs:  int8)  -> &uint8;
@__builtin export operator <<= (lhs: &uint8,  rhs:  int16) -> &uint8;
@__builtin export operator <<= (lhs: &uint8,  rhs:  int32) -> &uint8;
@__builtin export operator <<= (lhs: &uint8,  rhs:  int64) -> &uint8;
@__builtin export operator <<= (lhs: &uint8,  rhs: uint8)  -> &uint8;
@__builtin export operator <<= (lhs: &uint8,  rhs: uint16) -> &uint8;
@__builtin export operator <<= (lhs: &uint8,  rhs: uint32) -> &uint8;
@__builtin export operator <<= (lhs: &uint8,  rhs: uint64) -> &uint8;

@__builtin export operator <<= (lhs: &uint16,  rhs:  int8)  -> &uint16;
@__builtin export operator <<= (lhs: &uint16,  rhs:  int16) -> &uint16;
@__builtin export operator <<= (lhs: &uint16,  rhs:  int32) -> &uint16;
@__builtin export operator <<= (lhs: &uint16,  rhs:  int64) -> &uint16;
@__builtin export operator <<= (lhs: &uint16,  rhs: uint8)  -> &uint16;
@__builtin export operator <<= (lhs: &uint16,  rhs: uint16) -> &uint16;
@__builtin export operator <<= (lhs: &uint16,  rhs: uint32) -> &uint16;
@__builtin export operator <<= (lhs: &uint16,  rhs: uint64) -> &uint16;

@__builtin export operator <<= (lhs: &uint32,  rhs:  int8)  -> &uint32;
@__builtin export operator <<= (lhs: &uint32,  rhs:  int16) -> &uint32;
@__builtin export operator <<= (lhs: &uint32,  rhs:  int32) -> &uint32;
@__builtin export operator <<= (lhs: &uint32,  rhs:  int64) -> &uint32;
@__builtin export operator <<= (lhs: &uint32,  rhs: uint8)  -> &uint32;
@__builtin export operator <<= (lhs: &uint32,  rhs: uint16) -> &uint32;
@__builtin export operator <<= (lhs: &uint32,  rhs: uint32) -> &uint32;
@__builtin export operator <<= (lhs: &uint32,  rhs: uint64) -> &uint32;

@__builtin export operator <<= (lhs: &uint64,  rhs:  int8)  -> &uint64;
@__builtin export operator <<= (lhs: &uint64,  rhs:  int16) -> &uint64;
@__builtin export operator <<= (lhs: &uint64,  rhs:  int32) -> &uint64;
@__builtin export operator <<= (lhs: &uint64,  rhs:  int64) -> &uint64;
@__builtin export operator <<= (lhs: &uint64,  rhs: uint8)  -> &uint64;
@__builtin export operator <<= (lhs: &uint64,  rhs: uint16) -> &uint64;
@__builtin export operator <<= (lhs: &uint64,  rhs: uint32) -> &uint64;
@__builtin export operator <<= (lhs: &uint64,  rhs: uint64) -> &uint64;

@__builtin export operator >> (lhs: uint8,  rhs:  int8)  -> uint8;
@__builtin export operator >> (lhs: uint8,  rhs:  int16) -> uint8;
@__builtin export operator >> (lhs: uint8,  rhs:  int32) -> uint8;
@__builtin export operator >> (lhs: uint8,  rhs:  int64) -> uint8;
@__builtin export operator >> (lhs: uint8,  rhs: uint8)  -> uint8;
@__builtin export operator >> (lhs: uint8,  rhs: uint16) -> uint8;
@__builtin export operator >> (lhs: uint8,  rhs: uint32) -> uint8;
@__builtin export operator >> (lhs: uint8,  rhs: uint64) -> uint8;

@__builtin export operator >> (lhs: uint16,  rhs:  int8)  -> uint16;
@__builtin export operator >> (lhs: uint16,  rhs:  int16) -> uint16;
@__builtin export operator >> (lhs: uint16,  rhs:  int32) -> uint16;
@__builtin export operator >> (lhs: uint16,  rhs:  int64) -> uint16;
@__builtin export operator >> (lhs: uint16,  rhs: uint8)  -> uint16;
@__builtin export operator >> (lhs: uint16,  rhs: uint16) -> uint16;
@__builtin export operator >> (lhs: uint16,  rhs: uint32) -> uint16;
@__builtin export operator >> (lhs: uint16,  rhs: uint64) -> uint16;

@__builtin export operator >> (lhs: uint32,  rhs:  int8)  -> uint32;
@__builtin export operator >> (lhs: uint32,  rhs:  int16) -> uint32;
@__builtin export operator >> (lhs: uint32,  rhs:  int32) -> uint32;
@__builtin export operator >> (lhs: uint32,  rhs:  int64) -> uint32;
@__builtin export operator >> (lhs: uint32,  rhs: uint8)  -> uint32;
@__builtin export operator >> (lhs: uint32,  rhs: uint16) -> uint32;
@__builtin export operator >> (lhs: uint32,  rhs: uint32) -> uint32;
@__builtin export operator >> (lhs: uint32,  rhs: uint64) -> uint32;

@__builtin export operator >> (lhs: uint64,  rhs:  int8)  -> uint64;
@__builtin export operator >> (lhs: uint64,  rhs:  int16) -> uint64;
@__builtin export operator >> (lhs: uint64,  rhs:  int32) -> uint64;
@__builtin export operator >> (lhs: uint64,  rhs:  int64) -> uint64;
@__builtin export operator >> (lhs: uint64,  rhs: uint8)  -> uint64;
@__builtin export operator >> (lhs: uint64,  rhs: uint16) -> uint64;
@__builtin export operator >> (lhs: uint64,  rhs: uint32) -> uint64;
@__builtin export operator >> (lhs: uint64,  rhs: uint64) -> uint64;

@__builtin export operator >>= (lhs: &uint8,  rhs:  int8)  -> &uint8;
@__builtin export operator >>= (lhs: &uint8,  rhs:  int16) -> &uint8;
@__builtin export operator >>= (lhs: &uint8,  rhs:  int32) -> &uint8;
@__builtin export operator >>= (lhs: &uint8,  rhs:  int64) -> &uint8;
@__builtin export operator >>= (lhs: &uint8,  rhs: uint8)  -> &uint8;
@__builtin export operator >>= (lhs: &uint8,  rhs: uint16) -> &uint8;
@__builtin export operator >>= (lhs: &uint8,  rhs: uint32) -> &uint8;
@__builtin export operator >>= (lhs: &uint8,  rhs: uint64) -> &uint8;

@__builtin export operator >>= (lhs: &uint16,  rhs:  int8)  -> &uint16;
@__builtin export operator >>= (lhs: &uint16,  rhs:  int16) -> &uint16;
@__builtin export operator >>= (lhs: &uint16,  rhs:  int32) -> &uint16;
@__builtin export operator >>= (lhs: &uint16,  rhs:  int64) -> &uint16;
@__builtin export operator >>= (lhs: &uint16,  rhs: uint8)  -> &uint16;
@__builtin export operator >>= (lhs: &uint16,  rhs: uint16) -> &uint16;
@__builtin export operator >>= (lhs: &uint16,  rhs: uint32) -> &uint16;
@__builtin export operator >>= (lhs: &uint16,  rhs: uint64) -> &uint16;

@__builtin export operator >>= (lhs: &uint32,  rhs:  int8)  -> &uint32;
@__builtin export operator >>= (lhs: &uint32,  rhs:  int16) -> &uint32;
@__builtin export operator >>= (lhs: &uint32,  rhs:  int32) -> &uint32;
@__builtin export operator >>= (lhs: &uint32,  rhs:  int64) -> &uint32;
@__builtin export operator >>= (lhs: &uint32,  rhs: uint8)  -> &uint32;
@__builtin export operator >>= (lhs: &uint32,  rhs: uint16) -> &uint32;
@__builtin export operator >>= (lhs: &uint32,  rhs: uint32) -> &uint32;
@__builtin export operator >>= (lhs: &uint32,  rhs: uint64) -> &uint32;

@__builtin export operator >>= (lhs: &uint64,  rhs:  int8)  -> &uint64;
@__builtin export operator >>= (lhs: &uint64,  rhs:  int16) -> &uint64;
@__builtin export operator >>= (lhs: &uint64,  rhs:  int32) -> &uint64;
@__builtin export operator >>= (lhs: &uint64,  rhs:  int64) -> &uint64;
@__builtin export operator >>= (lhs: &uint64,  rhs: uint8)  -> &uint64;
@__builtin export operator >>= (lhs: &uint64,  rhs: uint16) -> &uint64;
@__builtin export operator >>= (lhs: &uint64,  rhs: uint32) -> &uint64;
@__builtin export operator >>= (lhs: &uint64,  rhs: uint64) -> &uint64;
