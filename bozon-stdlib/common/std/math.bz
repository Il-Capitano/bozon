export function exp   = __builtin_exp_f32;
export function exp   = __builtin_exp_f64;
export function exp2  = __builtin_exp2_f32;
export function exp2  = __builtin_exp2_f64;
export function expm1 = __builtin_expm1_f32;
export function expm1 = __builtin_expm1_f64;
export function log   = __builtin_log_f32;
export function log   = __builtin_log_f64;
export function log10 = __builtin_log10_f32;
export function log10 = __builtin_log10_f64;
export function log2  = __builtin_log2_f32;
export function log2  = __builtin_log2_f64;
export function log1p = __builtin_log1p_f32;
export function log1p = __builtin_log1p_f64;

export function sqrt  = __builtin_sqrt_f32;
export function sqrt  = __builtin_sqrt_f64;
export function cbrt  = __builtin_cbrt_f32;
export function cbrt  = __builtin_cbrt_f64;
export function pow   = __builtin_pow_f32;
export function pow   = __builtin_pow_f64;
export function hypot = __builtin_hypot_f32;
export function hypot = __builtin_hypot_f64;

export function sin   = __builtin_sin_f32;
export function sin   = __builtin_sin_f64;
export function cos   = __builtin_cos_f32;
export function cos   = __builtin_cos_f64;
export function tan   = __builtin_tan_f32;
export function tan   = __builtin_tan_f64;
export function asin  = __builtin_asin_f32;
export function asin  = __builtin_asin_f64;
export function acos  = __builtin_acos_f32;
export function acos  = __builtin_acos_f64;
export function atan  = __builtin_atan_f32;
export function atan  = __builtin_atan_f64;
export function atan2 = __builtin_atan2_f32;
export function atan2 = __builtin_atan2_f64;

export function sinh  = __builtin_sinh_f32;
export function sinh  = __builtin_sinh_f64;
export function cosh  = __builtin_cosh_f32;
export function cosh  = __builtin_cosh_f64;
export function tanh  = __builtin_tanh_f32;
export function tanh  = __builtin_tanh_f64;
export function asinh = __builtin_asinh_f32;
export function asinh = __builtin_asinh_f64;
export function acosh = __builtin_acosh_f32;
export function acosh = __builtin_acosh_f64;
export function atanh = __builtin_atanh_f32;
export function atanh = __builtin_atanh_f64;

export function erf    = __builtin_erf_f32;
export function erf    = __builtin_erf_f64;
export function erfc   = __builtin_erfc_f32;
export function erfc   = __builtin_erfc_f64;
export function tgamma = __builtin_tgamma_f32;
export function tgamma = __builtin_tgamma_f64;
export function lgamma = __builtin_lgamma_f32;
export function lgamma = __builtin_lgamma_f64;

export function min = __builtin_min_i8;
export function min = __builtin_min_i16;
export function min = __builtin_min_i32;
export function min = __builtin_min_i64;
export function min = __builtin_min_u8;
export function min = __builtin_min_u16;
export function min = __builtin_min_u32;
export function min = __builtin_min_u64;
export function min = __builtin_min_f32;
export function min = __builtin_min_f64;

export function max = __builtin_max_i8;
export function max = __builtin_max_i16;
export function max = __builtin_max_i32;
export function max = __builtin_max_i64;
export function max = __builtin_max_u8;
export function max = __builtin_max_u16;
export function max = __builtin_max_u32;
export function max = __builtin_max_u64;
export function max = __builtin_max_f32;
export function max = __builtin_max_f64;

export function min(a: *auto, b: *auto) -> typeof a
{
	static_assert(typeof a == typeof b, "mismatched types in 'std::min'");
	return if (a < b) { a } else { b };
}

export function min(a: *mut auto, b: *mut auto) -> typeof a
{
	static_assert(typeof a == typeof b, "mismatched types in 'std::min'");
	return if (a < b) { a } else { b };
}

export function min(a: ?*auto, b: ?*auto) -> typeof a
{
	static_assert(typeof a == typeof b, "mismatched types in 'std::min'");
	return if (a < b) { a } else { b };
}

export function min(a: ?*mut auto, b: ?*mut auto) -> typeof a
{
	static_assert(typeof a == typeof b, "mismatched types in 'std::min'");
	return if (a < b) { a } else { b };
}

export function max(a: *auto, b: *auto) -> typeof a
{
	static_assert(typeof a == typeof b, "mismatched types in 'std::max'");
	return if (a > b) { a } else { b };
}

export function max(a: *mut auto, b: *mut auto) -> typeof a
{
	static_assert(typeof a == typeof b, "mismatched types in 'std::max'");
	return if (a > b) { a } else { b };
}

export function max(a: ?*auto, b: ?*auto) -> typeof a
{
	static_assert(typeof a == typeof b, "mismatched types in 'std::max'");
	return if (a > b) { a } else { b };
}

export function max(a: ?*mut auto, b: ?*mut auto) -> typeof a
{
	static_assert(typeof a == typeof b, "mismatched types in 'std::max'");
	return if (a > b) { a } else { b };
}

export function abs = __builtin_abs_i8;
export function abs = __builtin_abs_i16;
export function abs = __builtin_abs_i32;
export function abs = __builtin_abs_i64;
export function abs = __builtin_abs_f32;
export function abs = __builtin_abs_f64;

// math constants

export consteval pi_f64 : float64 = 3.1415926535897932;
export consteval tau_f64: float64 = 6.2831853071795865;
export consteval e_f64  : float64 = 2.7182818284590452;

export consteval pi_f32 : float32 = 3.14159265f32;
export consteval tau_f32: float32 = 6.28318531f32;
export consteval e_f32  : float32 = 2.71828183f32;

export consteval pi  = pi_f64;
export consteval tau = tau_f64;
export consteval e   = e_f64;

static_assert(pi_f64  == atan2(0.0, -1.0));
static_assert(tau_f64 == 2.0 * pi_f64);
static_assert(e_f64   == exp(1.0));

static_assert(pi_f32  == atan2(0.0f32, -1.0f32));
static_assert(tau_f32 == 2.0f32 * pi_f32);
static_assert(e_f32   == exp(1.0f32));

static_assert(pi_f32  == pi_f64  as float32);
static_assert(tau_f32 == tau_f64 as float32);
static_assert(e_f32   == e_f64   as float32);

// limits

export consteval inf_f64: float64 = ((1.0 / 0.0));
export consteval nan_f64: float64 = ((inf_f64 - inf_f64));

export consteval inf_f32: float32 = ((1.0f32 / 0.0f32));
export consteval nan_f32: float32 = ((inf_f32 - inf_f32));

export consteval inf = inf_f64;
export consteval nan = nan_f64;

export consteval f64_min       : float64 = 2.2250738585072014e-308;
export consteval f64_min_denorm: float64 = 5e-324;

export consteval f32_min       : float32 = 1.1754944e-38f32;
export consteval f32_min_denorm: float32 = 1e-45f32;

function bits_as_float(n: uint32) -> float32
{
	return __builtin_bit_cast(float32, n);
}

function bits_as_float(n: uint64) -> float64
{
	return __builtin_bit_cast(float64, n);
}

static_assert(inf_f64 == bits_as_float(0x7ff0'0000'0000'0000u64));
static_assert(inf_f32 == bits_as_float(0x7f80'0000u32));
static_assert(((nan_f64 != nan_f64)));
static_assert(((nan_f32 != nan_f32)));

static_assert(f64_min == bits_as_float(0x0010'0000'0000'0000u64));
static_assert(f32_min == bits_as_float(0x0080'0000u32));
static_assert(f64_min_denorm == bits_as_float(0x0000'0000'0000'0001u64));
static_assert(f32_min_denorm == bits_as_float(0x0000'0001u32));
