// Copyright 2018 Ulf Adams
//
// The contents of this file may be used under the terms of the Apache License,
// Version 2.0.
//
//    (See accompanying file LICENSE-Apache or copy at
//     http://www.apache.org/licenses/LICENSE-2.0)
//
// Alternatively, the contents of this file may be used under the terms of
// the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE-Boost or copy at
//     https://www.boost.org/LICENSE_1_0.txt)
//
// Unless required by applicable law or agreed to in writing, this software
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.

// The contents of this file are a direct translation of the corresponding source
// file(s) found in https://github.com/ulfjack/ryu/tree/master/ryu from C to bozon.

import common;
import f2s_full_table;

import std::utils;

export function pow5factor_32(mut value: uint32) -> uint32
{
	mut count = 0u32;
	for (;;)
	{
		std::assert(value != 0);
		let q = value / 5;
		let r = value % 5;
		if (r != 0)
		{
			break;
		}
		value = q;
		++count;
	}
	return count;
}

// Returns true if value is divisible by 5^p.
export function multipleOfPowerOf5_32(value: uint32, p: uint32) -> bool
{
	return pow5factor_32(value) >= p;
}

// Returns true if value is divisible by 2^p.
export function multipleOfPowerOf2_32(value: uint32, p: uint32) -> bool
{
	// __builtin_ctz doesn't appear to be faster here.
	return (value & ((1u32 << p) - 1)) == 0;
}

// It seems to be slightly faster to avoid uint128_t here, although the
// generated code for uint128_t looks slightly nicer.
export function mulShift32(m: uint32, factor: uint64, shift: uint32) -> uint32
{
	std::assert(shift > 32);

	// The casts here help MSVC to avoid calls to the __allmul library
	// function.
	let factorLo = factor as uint32;
	let factorHi = (factor >> 32) as uint32;
	let bits0 = m as uint64 * factorLo;
	let bits1 = m as uint64 * factorHi;

	let sum = (bits0 >> 32) + bits1;
	let shiftedSum = sum >> (shift - 32);
	std::assert(shiftedSum <= (~0u32) as uint64);
	return shiftedSum as uint32;
}

export function mulPow5InvDivPow2(m: uint32, q: uint32, j: uint32) -> uint32
{
	return mulShift32(m, FLOAT_POW5_INV_SPLIT[q], j);
}

export function mulPow5divPow2(m: uint32, i: uint32, j: uint32) -> uint32
{
	return mulShift32(m, FLOAT_POW5_SPLIT[i], j);
}
