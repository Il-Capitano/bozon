import std::libc::stdlib;
import meta::comptime;
import meta::types;
import format;

export function memcpy  = __builtin_memcpy;
export function memmove = __builtin_memmove;
export function memset  = __builtin_memset;
export function trivially_copy_values  = __builtin_trivially_copy_values;
export function trivially_copy_overlapping_values  = __builtin_trivially_copy_overlapping_values;
export function trivially_relocate_values = __builtin_trivially_relocate_values;
export function trivially_set_values = __builtin_trivially_set_values;
export function swap = __builtin_swap;

export function bit_cast = __builtin_bit_cast;

export function enum_value = __builtin_enum_value;
export function create_initialized_array = __builtin_create_initialized_array;

export function assert(b: bool)
{
	if (!b) unreachable;
}

export function exit(code: int32) -> void
{
	std::libc::exit(code);
}

export function malloc_raw(T: typename, n: usize) -> *mut T
{
	static_assert(!meta::is_reference(T), "type in 'malloc_raw' can't be a reference type");
	static_assert(!meta::is_move_reference(T), "type in 'malloc_raw' can't be a move reference type");
	static_assert(!meta::is_mut(T), "type in 'malloc_raw' can't be 'mut'");
	static_assert(!meta::is_consteval(T), "type in 'malloc_raw' can't be 'consteval'");

	return if (meta::is_comptime()) {
		meta::malloc(T, n)
	} else {
		let malloc_result = std::libc::malloc(n * sizeof T);
		if (malloc_result == null)
		{
			unreachable;
		}
		__builtin_pointer_cast(*mut T, malloc_result.get_value())
	};
}

export function malloc(T: typename, n: usize) -> *mut T
{
	static_assert(!meta::is_reference(T), "type in 'malloc' can't be a reference type");
	static_assert(!meta::is_move_reference(T), "type in 'malloc' can't be a move reference type");
	static_assert(!meta::is_mut(T), "type in 'malloc' can't be 'mut'");
	static_assert(!meta::is_consteval(T), "type in 'malloc' can't be 'consteval'");

	let result = if (meta::is_comptime()) {
		meta::malloc(T, n)
	} else {
		let malloc_result = std::libc::malloc(n * sizeof T);
		if (malloc_result == null)
		{
			unreachable;
		}
		__builtin_pointer_cast(*mut T, malloc_result.get_value())
	};

	for (let [mut it, end] = [ result, result + n ]; it != end; ++it)
	{
		__builtin_inplace_construct(it, T());
	}

	return result;
}

export function free(p: ?*mut void)
{
	if (meta::is_comptime())
	{
		meta::free(p);
	}
	else
	{
		std::libc::free(p);
	}
}
