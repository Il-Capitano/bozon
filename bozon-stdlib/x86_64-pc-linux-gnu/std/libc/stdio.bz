import types;
import stddef;
struct _G_fpos_t
{
	.__pos: __off_t;
	.__state: __mbstate_t;
}
struct _IO_FILE
{
	._flags: int;
	._IO_read_ptr: *char;
	._IO_read_end: *char;
	._IO_read_base: *char;
	._IO_write_base: *char;
	._IO_write_ptr: *char;
	._IO_write_end: *char;
	._IO_buf_base: *char;
	._IO_buf_end: *char;
	._IO_save_base: *char;
	._IO_backup_base: *char;
	._IO_save_end: *char;
	._markers: *_IO_marker;
	._chain: *_IO_FILE;
	._fileno: int;
	._flags2: int;
	._old_offset: __off_t;
	._cur_column: unsigned_short;
	._vtable_offset: signed_char;
	._shortbuf: [1: char];
	._lock: *_IO_lock_t;
	._offset: __off64_t;
	._codecvt: *_IO_codecvt;
	._wide_data: *_IO_wide_data;
	._freeres_list: *_IO_FILE;
	._freeres_buf: *void;
	.__pad5: size_t;
	._mode: int;
	._unused2: [20: char];
}
struct _IO_codecvt;
struct _IO_marker;
struct _IO_wide_data;
struct __mbstate_t
{
	.__count: int;
	.__value: /* union type */[1: int32];
}
export type FILE = _IO_FILE;
export type fpos_t = __fpos_t;
type _IO_lock_t = void;
type __fpos_t = _G_fpos_t;
type __off64_t = long;
type __off_t = long;
@symbol_name("clearerr") export function "c" clearerr(stream: *FILE) -> void;
@symbol_name("fclose") export function "c" fclose(stream: *FILE) -> int;
@symbol_name("feof") export function "c" feof(stream: *FILE) -> int;
@symbol_name("ferror") export function "c" ferror(stream: *FILE) -> int;
@symbol_name("fflush") export function "c" fflush(stream: *FILE) -> int;
@symbol_name("fgetc") export function "c" fgetc(stream: *FILE) -> int;
@symbol_name("fgetpos") export function "c" fgetpos(stream: *FILE, pos: *fpos_t) -> int;
@symbol_name("fgets") export function "c" fgets(s: *char, n: int, stream: *FILE) -> *char;
@symbol_name("fopen") export function "c" fopen(filename: *const char, modes: *const char) -> *FILE;
@symbol_name("fputc") export function "c" fputc(c: int, stream: *FILE) -> int;
@symbol_name("fputs") export function "c" fputs(s: *const char, stream: *FILE) -> int;
@symbol_name("fread") export function "c" fread(ptr: *void, size: size_t, n: size_t, stream: *FILE) -> unsigned_long;
@symbol_name("freopen") export function "c" freopen(filename: *const char, modes: *const char, stream: *FILE) -> *FILE;
@symbol_name("fseek") export function "c" fseek(stream: *FILE, off: long, whence: int) -> int;
@symbol_name("fsetpos") export function "c" fsetpos(stream: *FILE, pos: *const fpos_t) -> int;
@symbol_name("ftell") export function "c" ftell(stream: *FILE) -> long;
@symbol_name("fwrite") export function "c" fwrite(ptr: *const void, size: size_t, n: size_t, s: *FILE) -> unsigned_long;
@symbol_name("getc") export function "c" getc(stream: *FILE) -> int;
@symbol_name("getchar") export function "c" getchar() -> int;
@symbol_name("perror") export function "c" perror(s: *const char) -> void;
@symbol_name("putc") export function "c" putc(c: int, stream: *FILE) -> int;
@symbol_name("putchar") export function "c" putchar(c: int) -> int;
@symbol_name("puts") export function "c" puts(s: *const char) -> int;
@symbol_name("remove") export function "c" remove(filename: *const char) -> int;
@symbol_name("rename") export function "c" rename(old: *const char, new: *const char) -> int;
@symbol_name("rewind") export function "c" rewind(stream: *FILE) -> void;
@symbol_name("setbuf") export function "c" setbuf(stream: *FILE, buf: *char) -> void;
@symbol_name("setvbuf") export function "c" setvbuf(stream: *FILE, buf: *char, modes: int, n: size_t) -> int;
@symbol_name("tmpfile") export function "c" tmpfile() -> *FILE;
@symbol_name("tmpnam") export function "c" tmpnam(s: *char) -> *char;
@symbol_name("ungetc") export function "c" ungetc(c: int, stream: *FILE) -> int;
export function BUFSIZ() -> int
{
	return 8192;
}
export function EOF() -> int
{
	return -1;
}
export function FILENAME_MAX() -> int
{
	return 4096;
}
export function FOPEN_MAX() -> int
{
	return 16;
}
export function L_tmpnam() -> int
{
	return 20;
}
export function SEEK_CUR() -> int
{
	return 1;
}
export function SEEK_END() -> int
{
	return 2;
}
export function SEEK_SET() -> int
{
	return 0;
}
export function TMP_MAX() -> int
{
	return 238328;
}
export function _IOFBF() -> int
{
	return 0;
}
export function _IOLBF() -> int
{
	return 1;
}
export function _IONBF() -> int
{
	return 2;
}
export function stderr() -> *FILE
{
	return __macro_clash_stderr;
}
export function stdin() -> *FILE
{
	return __macro_clash_stdin;
}
export function stdout() -> *FILE
{
	return __macro_clash_stdout;
}
@symbol_name("stderr") extern __macro_clash_stderr: *FILE;
@symbol_name("stdin") extern __macro_clash_stdin: *FILE;
@symbol_name("stdout") extern __macro_clash_stdout: *FILE;
