import types;
export type double_t = double;
export type float_t = float;
@symbol_name("acos") export function "c" acos(x: double) -> double;
@symbol_name("acosf") export function "c" acosf(x: float) -> float;
@symbol_name("acosh") export function "c" acosh(x: double) -> double;
@symbol_name("acoshf") export function "c" acoshf(x: float) -> float;
@symbol_name("asin") export function "c" asin(x: double) -> double;
@symbol_name("asinf") export function "c" asinf(x: float) -> float;
@symbol_name("asinh") export function "c" asinh(x: double) -> double;
@symbol_name("asinhf") export function "c" asinhf(x: float) -> float;
@symbol_name("atan") export function "c" atan(x: double) -> double;
@symbol_name("atan2") export function "c" atan2(y: double, x: double) -> double;
@symbol_name("atan2f") export function "c" atan2f(y: float, x: float) -> float;
@symbol_name("atanf") export function "c" atanf(x: float) -> float;
@symbol_name("atanh") export function "c" atanh(x: double) -> double;
@symbol_name("atanhf") export function "c" atanhf(x: float) -> float;
@symbol_name("cbrt") export function "c" cbrt(x: double) -> double;
@symbol_name("cbrtf") export function "c" cbrtf(x: float) -> float;
@symbol_name("ceil") export function "c" ceil(x: double) -> double;
@symbol_name("ceilf") export function "c" ceilf(x: float) -> float;
@symbol_name("copysign") export function "c" copysign(x: double, y: double) -> double;
@symbol_name("copysignf") export function "c" copysignf(x: float, y: float) -> float;
@symbol_name("cos") export function "c" cos(x: double) -> double;
@symbol_name("cosf") export function "c" cosf(x: float) -> float;
@symbol_name("cosh") export function "c" cosh(x: double) -> double;
@symbol_name("coshf") export function "c" coshf(x: float) -> float;
@symbol_name("erf") export function "c" erf(: double) -> double;
@symbol_name("erfc") export function "c" erfc(: double) -> double;
@symbol_name("erfcf") export function "c" erfcf(: float) -> float;
@symbol_name("erff") export function "c" erff(: float) -> float;
@symbol_name("exp") export function "c" exp(x: double) -> double;
@symbol_name("exp2") export function "c" exp2(x: double) -> double;
@symbol_name("exp2f") export function "c" exp2f(x: float) -> float;
@symbol_name("expf") export function "c" expf(x: float) -> float;
@symbol_name("expm1") export function "c" expm1(x: double) -> double;
@symbol_name("expm1f") export function "c" expm1f(x: float) -> float;
@symbol_name("fabs") export function "c" fabs(x: double) -> double;
@symbol_name("fabsf") export function "c" fabsf(x: float) -> float;
@symbol_name("fdim") export function "c" fdim(x: double, y: double) -> double;
@symbol_name("fdimf") export function "c" fdimf(x: float, y: float) -> float;
@symbol_name("floor") export function "c" floor(x: double) -> double;
@symbol_name("floorf") export function "c" floorf(x: float) -> float;
@symbol_name("fma") export function "c" fma(x: double, y: double, z: double) -> double;
@symbol_name("fmaf") export function "c" fmaf(x: float, y: float, z: float) -> float;
@symbol_name("fmax") export function "c" fmax(x: double, y: double) -> double;
@symbol_name("fmaxf") export function "c" fmaxf(x: float, y: float) -> float;
@symbol_name("fmin") export function "c" fmin(x: double, y: double) -> double;
@symbol_name("fminf") export function "c" fminf(x: float, y: float) -> float;
@symbol_name("fmod") export function "c" fmod(x: double, y: double) -> double;
@symbol_name("fmodf") export function "c" fmodf(x: float, y: float) -> float;
@symbol_name("frexp") export function "c" frexp(x: double, exponent: *int) -> double;
@symbol_name("frexpf") export function "c" frexpf(x: float, exponent: *int) -> float;
@symbol_name("hypot") export function "c" hypot(x: double, y: double) -> double;
@symbol_name("hypotf") export function "c" hypotf(x: float, y: float) -> float;
@symbol_name("ilogb") export function "c" ilogb(x: double) -> int;
@symbol_name("ilogbf") export function "c" ilogbf(x: float) -> int;
@symbol_name("ldexp") export function "c" ldexp(x: double, exponent: int) -> double;
@symbol_name("ldexpf") export function "c" ldexpf(x: float, exponent: int) -> float;
@symbol_name("lgamma") export function "c" lgamma(: double) -> double;
@symbol_name("lgammaf") export function "c" lgammaf(: float) -> float;
@symbol_name("llrint") export function "c" llrint(x: double) -> long_long;
@symbol_name("llrintf") export function "c" llrintf(x: float) -> long_long;
@symbol_name("llround") export function "c" llround(x: double) -> long_long;
@symbol_name("llroundf") export function "c" llroundf(x: float) -> long_long;
@symbol_name("log") export function "c" log(x: double) -> double;
@symbol_name("log10") export function "c" log10(x: double) -> double;
@symbol_name("log10f") export function "c" log10f(x: float) -> float;
@symbol_name("log1p") export function "c" log1p(x: double) -> double;
@symbol_name("log1pf") export function "c" log1pf(x: float) -> float;
@symbol_name("log2") export function "c" log2(x: double) -> double;
@symbol_name("log2f") export function "c" log2f(x: float) -> float;
@symbol_name("logb") export function "c" logb(x: double) -> double;
@symbol_name("logbf") export function "c" logbf(x: float) -> float;
@symbol_name("logf") export function "c" logf(x: float) -> float;
@symbol_name("lrint") export function "c" lrint(x: double) -> long;
@symbol_name("lrintf") export function "c" lrintf(x: float) -> long;
@symbol_name("lround") export function "c" lround(x: double) -> long;
@symbol_name("lroundf") export function "c" lroundf(x: float) -> long;
@symbol_name("modf") export function "c" modf(x: double, iptr: *double) -> double;
@symbol_name("modff") export function "c" modff(x: float, iptr: *float) -> float;
@symbol_name("nan") export function "c" nan(tagb: *const char) -> double;
@symbol_name("nanf") export function "c" nanf(tagb: *const char) -> float;
@symbol_name("nearbyint") export function "c" nearbyint(x: double) -> double;
@symbol_name("nearbyintf") export function "c" nearbyintf(x: float) -> float;
@symbol_name("nextafter") export function "c" nextafter(x: double, y: double) -> double;
@symbol_name("nextafterf") export function "c" nextafterf(x: float, y: float) -> float;
@symbol_name("pow") export function "c" pow(x: double, y: double) -> double;
@symbol_name("powf") export function "c" powf(x: float, y: float) -> float;
@symbol_name("remainder") export function "c" remainder(x: double, y: double) -> double;
@symbol_name("remainderf") export function "c" remainderf(x: float, y: float) -> float;
@symbol_name("remquo") export function "c" remquo(x: double, y: double, quo: *int) -> double;
@symbol_name("remquof") export function "c" remquof(x: float, y: float, quo: *int) -> float;
@symbol_name("rint") export function "c" rint(x: double) -> double;
@symbol_name("rintf") export function "c" rintf(x: float) -> float;
@symbol_name("round") export function "c" round(x: double) -> double;
@symbol_name("roundf") export function "c" roundf(x: float) -> float;
@symbol_name("scalbln") export function "c" scalbln(x: double, n: long) -> double;
@symbol_name("scalblnf") export function "c" scalblnf(x: float, n: long) -> float;
@symbol_name("scalbn") export function "c" scalbn(x: double, n: int) -> double;
@symbol_name("scalbnf") export function "c" scalbnf(x: float, n: int) -> float;
@symbol_name("sin") export function "c" sin(x: double) -> double;
@symbol_name("sinf") export function "c" sinf(x: float) -> float;
@symbol_name("sinh") export function "c" sinh(x: double) -> double;
@symbol_name("sinhf") export function "c" sinhf(x: float) -> float;
@symbol_name("sqrt") export function "c" sqrt(x: double) -> double;
@symbol_name("sqrtf") export function "c" sqrtf(x: float) -> float;
@symbol_name("tan") export function "c" tan(x: double) -> double;
@symbol_name("tanf") export function "c" tanf(x: float) -> float;
@symbol_name("tanh") export function "c" tanh(x: double) -> double;
@symbol_name("tanhf") export function "c" tanhf(x: float) -> float;
@symbol_name("tgamma") export function "c" tgamma(: double) -> double;
@symbol_name("tgammaf") export function "c" tgammaf(: float) -> float;
@symbol_name("trunc") export function "c" trunc(x: double) -> double;
@symbol_name("truncf") export function "c" truncf(x: float) -> float;
export function FP_INFINITE() -> int
{
	return 1;
}
export function FP_NAN() -> int
{
	return 0;
}
export function FP_NORMAL() -> int
{
	return 4;
}
export function FP_SUBNORMAL() -> int
{
	return 3;
}
export function FP_ZERO() -> int
{
	return 2;
}
export function HUGE_VAL() -> double
{
	return ((1.0f64 / 0.0f64));
}
export function HUGE_VALF() -> float
{
	return ((1.0f32 / 0.0f32));
}
export function INFINITY() -> float
{
	return ((1.0f32 / 0.0f32));
}
export function NAN() -> float
{
	return ((0.0f32 / 0.0f32));
}
