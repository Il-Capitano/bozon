import types;
import stddef;
export struct lldiv_t
{
	.quot: long_long;
	.rem: long_long;
}
struct _div_t
{
	.quot: int;
	.rem: int;
}
struct _ldiv_t
{
	.quot: long;
	.rem: long;
}
export type div_t = _div_t;
export type ldiv_t = _ldiv_t;
@symbol_name("___mb_cur_max_func") function "c" ___mb_cur_max_func() -> int;
@symbol_name("abort") export function "c" abort() -> void;
@symbol_name("abs") export function "c" abs(x: int) -> int;
@symbol_name("atof") export function "c" atof(string: *const char) -> double;
@symbol_name("atoi") export function "c" atoi(str: *const char) -> int;
@symbol_name("atol") export function "c" atol(str: *const char) -> long;
@symbol_name("calloc") export function "c" calloc(num_of_elements: size_t, size_of_elements: size_t) -> ?*void;
@symbol_name("div") export function "c" div(numerator: int, denominator: int) -> div_t;
@symbol_name("exit") export function "c" exit(code: int) -> void;
@symbol_name("free") export function "c" free(memory: ?*void) -> void;
@symbol_name("getenv") export function "c" getenv(var_name: *const char) -> *char;
@symbol_name("labs") export function "c" labs(x: long) -> long;
@symbol_name("ldiv") export function "c" ldiv(numerator: long, denominator: long) -> ldiv_t;
@symbol_name("lldiv") export function "c" lldiv(: long_long, : long_long) -> lldiv_t;
@symbol_name("malloc") export function "c" malloc(size: size_t) -> ?*void;
@symbol_name("mblen") export function "c" mblen(ch: *const char, max_count: size_t) -> int;
@symbol_name("mbstowcs") export function "c" mbstowcs(dest: *wchar_t, source: *const char, max_count: size_t) -> size_t;
@symbol_name("mbtowc") export function "c" mbtowc(dst_ch: *wchar_t, src_ch: *const char, src_size_in_bytes: size_t) -> int;
@symbol_name("rand") export function "c" rand() -> int;
@symbol_name("realloc") export function "c" realloc(memory: *void, new_size: size_t) -> *void;
@symbol_name("srand") export function "c" srand(seed: unsigned_int) -> void;
@symbol_name("strtol") export function "c" strtol(str: *const char, end_ptr: **char, radix: int) -> long;
@symbol_name("strtoul") export function "c" strtoul(str: *const char, end_ptr: **char, radix: int) -> unsigned_long;
@symbol_name("system") export function "c" system(command: *const char) -> int;
@symbol_name("wcstombs") export function "c" wcstombs(dest: *char, source: *const wchar_t, max_count: size_t) -> size_t;
@symbol_name("wctomb") export function "c" wctomb(mb_ch: *char, w_ch: wchar_t) -> int;
export function EXIT_FAILURE() -> int
{
	return 1;
}
export function EXIT_SUCCESS() -> int
{
	return 0;
}
export function MB_CUR_MAX() -> int
{
	return ___mb_cur_max_func();
}
export function RAND_MAX() -> int
{
	return 32767;
}
