import types;
export struct fenv_t
{
	.__control_word: unsigned_short;
	.__unused0: unsigned_short;
	.__status_word: unsigned_short;
	.__unused1: unsigned_short;
	.__tag_word: unsigned_short;
	.__unused2: unsigned_short;
	.__ip_offset: unsigned_int;
	.__ip_selector: unsigned_short;
	.__opcode: unsigned_short;
	.__data_offset: unsigned_int;
	.__data_selector: unsigned_short;
	.__unused3: unsigned_short;
	.__mxcsr: unsigned_int;
}
export type fexcept_t = unsigned_short;
@symbol_name("feclearexcept") export function "c" feclearexcept(: int) -> int;
@symbol_name("fegetenv") export function "c" fegetenv(envp: ?*mut fenv_t) -> int;
@symbol_name("fegetexceptflag") export function "c" fegetexceptflag(flagp: ?*mut fexcept_t, excepts: int) -> int;
@symbol_name("fegetround") export function "c" fegetround() -> int;
@symbol_name("feholdexcept") export function "c" feholdexcept(: ?*mut fenv_t) -> int;
@symbol_name("feraiseexcept") export function "c" feraiseexcept(excepts: int) -> int;
@symbol_name("fesetenv") export function "c" fesetenv(: ?*fenv_t) -> int;
@symbol_name("fesetexceptflag") export function "c" fesetexceptflag(: ?*fexcept_t, : int) -> int;
@symbol_name("fesetround") export function "c" fesetround(mode: int) -> int;
@symbol_name("fetestexcept") export function "c" fetestexcept(excepts: int) -> int;
@symbol_name("feupdateenv") export function "c" feupdateenv(: ?*fenv_t) -> int;
export function FE_ALL_EXCEPT() -> int
{
	return 63;
}
export function FE_DIVBYZERO() -> int
{
	return 4;
}
export function FE_DOWNWARD() -> int
{
	return 1024;
}
export function FE_INEXACT() -> int
{
	return 32;
}
export function FE_INVALID() -> int
{
	return 1;
}
export function FE_OVERFLOW() -> int
{
	return 8;
}
export function FE_TONEAREST() -> int
{
	return 0;
}
export function FE_TOWARDZERO() -> int
{
	return 3072;
}
export function FE_UNDERFLOW() -> int
{
	return 16;
}
export function FE_UPWARD() -> int
{
	return 2048;
}
