import types;
@__libc_function("ctype.h", "isalnum") export function "c" isalnum(c: int) -> int;
@__libc_function("ctype.h", "isalpha") export function "c" isalpha(c: int) -> int;
@__libc_function("ctype.h", "isblank") export function "c" isblank(c: int) -> int;
@__libc_function("ctype.h", "iscntrl") export function "c" iscntrl(c: int) -> int;
@__libc_function("ctype.h", "isdigit") export function "c" isdigit(c: int) -> int;
@__libc_function("ctype.h", "isgraph") export function "c" isgraph(c: int) -> int;
@__libc_function("ctype.h", "islower") export function "c" islower(c: int) -> int;
@__libc_function("ctype.h", "isprint") export function "c" isprint(c: int) -> int;
@__libc_function("ctype.h", "ispunct") export function "c" ispunct(c: int) -> int;
@__libc_function("ctype.h", "isspace") export function "c" isspace(c: int) -> int;
@__libc_function("ctype.h", "isupper") export function "c" isupper(c: int) -> int;
@__libc_function("ctype.h", "isxdigit") export function "c" isxdigit(c: int) -> int;
@__libc_function("ctype.h", "tolower") export function "c" tolower(c: int) -> int;
@__libc_function("ctype.h", "toupper") export function "c" toupper(c: int) -> int;
