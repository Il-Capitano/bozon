import types;

@symbol_name("acosf") export function acos(x: float)   -> float;
@symbol_name("acos")  export function acos(x: double)  -> double;
@symbol_name("acosf") export function acosf(x: double) -> double;

@symbol_name("asinf") export function asin(x: float)  -> float;
@symbol_name("asin")  export function asin(x: double) -> double;
@symbol_name("asinf") export function asinf(x: float) -> float;

@symbol_name("atanf") export function atan(x: float)  -> float;
@symbol_name("atan")  export function atan(x: double) -> double;
@symbol_name("atanf") export function atanf(x: float) -> float;

@symbol_name("atan2f") export function atan2(y: float,  x: float)  -> float;
@symbol_name("atan2")  export function atan2(y: double, x: double) -> double;
@symbol_name("atan2f") export function atan2f(y: float, x: float) -> float;

@symbol_name("cosf") export function cos(x: float)  -> float;
@symbol_name("cos")  export function cos(x: double) -> double;
@symbol_name("cosf") export function cosf(x: float) -> float;

@symbol_name("sinf") export function sin(x: float)  -> float;
@symbol_name("sin")  export function sin(x: double) -> double;
@symbol_name("sinf") export function sinf(x: float) -> float;

@symbol_name("tanf") export function tan(x: float)  -> float;
@symbol_name("tan")  export function tan(x: double) -> double;
@symbol_name("tanf") export function tanf(x: float) -> float;

@symbol_name("acoshf") export function acosh(x: float)  -> float;
@symbol_name("acosh")  export function acosh(x: double) -> double;
@symbol_name("acoshf") export function acoshf(x: float) -> float;

@symbol_name("asinhf") export function asinh(x: float)  -> float;
@symbol_name("asinh")  export function asinh(x: double) -> double;
@symbol_name("asinhf") export function asinhf(x: float) -> float;

@symbol_name("atanhf") export function atanh(x: float)  -> float;
@symbol_name("atanh")  export function atanh(x: double) -> double;
@symbol_name("atanhf") export function atanhf(x: float) -> float;

@symbol_name("coshf") export function cosh(x: float)  -> float;
@symbol_name("cosh")  export function cosh(x: double) -> double;
@symbol_name("coshf") export function coshf(x: float) -> float;

@symbol_name("sinhf") export function sinh(x: float)  -> float;
@symbol_name("sinh")  export function sinh(x: double) -> double;
@symbol_name("sinhf") export function sinhf(x: float) -> float;

@symbol_name("tanhf") export function tanh(x: float)  -> float;
@symbol_name("tanh")  export function tanh(x: double) -> double;
@symbol_name("tanhf") export function tanhf(x: float) -> float;

@symbol_name("expf") export function exp(x: float)  -> float;
@symbol_name("exp")  export function exp(x: double) -> double;
@symbol_name("expf") export function expf(x: float) -> float;

@symbol_name("exp2f") export function exp2(x: float)  -> float;
@symbol_name("exp2")  export function exp2(x: double) -> double;
@symbol_name("exp2f") export function exp2f(x: float) -> float;

@symbol_name("expm1f") export function expm1(x: float)  -> float;
@symbol_name("expm1")  export function expm1(x: double) -> double;
@symbol_name("expm1f") export function expm1f(x: float) -> float;

@symbol_name("frexpf") export function frexp(value: float,  exp: *int) -> float;
@symbol_name("frexp")  export function frexp(value: double, exp: *int) -> double;
@symbol_name("frexpf") export function frexpf(value: float, exp: *int) -> float;

@symbol_name("ilogbf") export function ilogb(x: float)  -> int;
@symbol_name("ilogb")  export function ilogb(x: double) -> int;
@symbol_name("ilogbf") export function ilogbf(x: float) -> int;

@symbol_name("ldexpf") export function ldexp(x: float,  exp: int) -> float;
@symbol_name("ldexp")  export function ldexp(x: double, exp: int) -> double;
@symbol_name("ldexpf") export function ldexpf(x: float, exp: int) -> float;

@symbol_name("logf") export function log(x: float)  -> float;
@symbol_name("log")  export function log(x: double) -> double;
@symbol_name("logf") export function logf(x: float) -> float;

@symbol_name("log10f") export function log10(x: float)  -> float;
@symbol_name("log10")  export function log10(x: double) -> double;
@symbol_name("log10f") export function log10f(x: float) -> float;

@symbol_name("log1pf") export function log1p(x: float)  -> float;
@symbol_name("log1p")  export function log1p(x: double) -> double;
@symbol_name("log1pf") export function log1pf(x: float) -> float;

@symbol_name("log2f") export function log2(x: float)  -> float;
@symbol_name("log2")  export function log2(x: double) -> double;
@symbol_name("log2f") export function log2f(x: float) -> float;

@symbol_name("logbf") export function logb(x: float)  -> float;
@symbol_name("logb")  export function logb(x: double) -> double;
@symbol_name("logbf") export function logbf(x: float) -> float;

@symbol_name("modff") export function modf(value: float,  iptr: *float)  -> float;
@symbol_name("modf")  export function modf(value: double, iptr: *double) -> double;
@symbol_name("modff") export function modff(value: float, iptr: *float) -> float;

@symbol_name("scalbnf") export function scalbn(x: float,  n: int) -> float;
@symbol_name("scalbn")  export function scalbn(x: double, n: int) -> double;
@symbol_name("scalbnf") export function scalbnf(x: float, n: int) -> float;

@symbol_name("scalblnf") export function scalbln(x: float,  n: long) -> float;
@symbol_name("scalbln")  export function scalbln(x: double, n: long) -> double;
@symbol_name("scalblnf") export function scalblnf(x: float, n: long) -> float;

@symbol_name("cbrtf") export function cbrt(x: float)  -> float;
@symbol_name("cbrt")  export function cbrt(x: double) -> double;
@symbol_name("cbrtf") export function cbrtf(x: float) -> float;

// absolute values
/*
function abs(j: int) -> int;
// function abs(j: long) -> long; // long is either the same as int or long_long, so it's not needed
function abs(j: long_long) -> long_long;
function abs(j: float) -> float;
function abs(j: double) -> double;
*/

@symbol_name("fabsf") export function fabs(x: float)  -> float;
@symbol_name("fabs")  export function fabs(x: double) -> double;
@symbol_name("fabsf") export function fabsf(x: float) -> float;

@symbol_name("hypotf") export function hypot(x: float,  y: float)  -> float;
@symbol_name("hypot")  export function hypot(x: double, y: double) -> double;
@symbol_name("hypotf") export function hypotf(x: float, y: float) -> float;

// three-dimensional hypotenuse
@symbol_name("hypotf") export function hypot(x: float,  y: float,  z: float)  -> float;
@symbol_name("hypot")  export function hypot(x: double, y: double, z: double) -> double;
@symbol_name("hypotf") export function hypotf(x: float, y: float, z: float) -> float;

@symbol_name("powf") export function pow(x: float,  y: float)  -> float;
@symbol_name("pow")  export function pow(x: double, y: double) -> double;
@symbol_name("powf") export function powf(x: float, y: float) -> float;

@symbol_name("sqrtf") export function sqrt(x: float)  -> float;
@symbol_name("sqrt")  export function sqrt(x: double) -> double;
@symbol_name("sqrtf") export function sqrtf(x: float) -> float;

@symbol_name("erff") export function erf(x: float)  -> float;
@symbol_name("erf")  export function erf(x: double) -> double;
@symbol_name("erff") export function erff(x: float) -> float;

@symbol_name("erfcf") export function erfc(x: float)  -> float;
@symbol_name("erfc")  export function erfc(x: double) -> double;
@symbol_name("erfcf") export function erfcf(x: float) -> float;

@symbol_name("lgammaf") export function lgamma(x: float)  -> float;
@symbol_name("lgamma")  export function lgamma(x: double) -> double;
@symbol_name("lgammaf") export function lgammaf(x: float) -> float;

@symbol_name("tgammaf") export function tgamma(x: float)  -> float;
@symbol_name("tgamma")  export function tgamma(x: double) -> double;
@symbol_name("tgammaf") export function tgammaf(x: float) -> float;

@symbol_name("ceilf") export function ceil(x: float)  -> float;
@symbol_name("ceil")  export function ceil(x: double) -> double;
@symbol_name("ceilf") export function ceilf(x: float) -> float;

@symbol_name("floorf") export function floor(x: float)  -> float;
@symbol_name("floor")  export function floor(x: double) -> double;
@symbol_name("floorf") export function floorf(x: float) -> float;

@symbol_name("nearbyintf") export function nearbyint(x: float)  -> float;
@symbol_name("nearbyint")  export function nearbyint(x: double) -> double;
@symbol_name("nearbyintf") export function nearbyintf(x: float) -> float;

@symbol_name("rintf") export function rint(x: float)  -> float;
@symbol_name("rint")  export function rint(x: double) -> double;
@symbol_name("rintf") export function rintf(x: float) -> float;

@symbol_name("lrintf") export function lrint(x: float)  -> long;
@symbol_name("lrint")  export function lrint(x: double) -> long;
@symbol_name("lrintf") export function lrintf(x: float) -> long;

@symbol_name("llrintf") export function llrint(x: float)  -> long_long;
@symbol_name("llrint")  export function llrint(x: double) -> long_long;
@symbol_name("llrintf") export function llrintf(x: float) -> long_long;

@symbol_name("roundf") export function round(x: float)  -> float;
@symbol_name("round")  export function round(x: double) -> double;
@symbol_name("roundf") export function roundf(x: float) -> float;

@symbol_name("lroundf") export function lround(x: float)  -> long;
@symbol_name("lround")  export function lround(x: double) -> long;
@symbol_name("lroundf") export function lroundf(x: float) -> long;

@symbol_name("llroundf") export function llround(x: float)  -> long_long;
@symbol_name("llround")  export function llround(x: double) -> long_long;
@symbol_name("llroundf") export function llroundf(x: float) -> long_long;

@symbol_name("truncf") export function trunc(x: float)  -> float;
@symbol_name("trunc")  export function trunc(x: double) -> double;
@symbol_name("truncf") export function truncf(x: float) -> float;

@symbol_name("fmodf") export function fmod(x: float,  y: float)  -> float;
@symbol_name("fmod")  export function fmod(x: double, y: double) -> double;
@symbol_name("fmodf") export function fmodf(x: float, y: float)  -> float;

@symbol_name("remainderf") export function remainder(x: float,  y: float)  -> float;
@symbol_name("remainder")  export function remainder(x: double, y: double) -> double;
@symbol_name("remainderf") export function remainderf(x: float, y: float)  -> float;

@symbol_name("remquof") export function remquo(x: float,  y: float,  quo: *int) -> float;
@symbol_name("remquo")  export function remquo(x: double, y: double, quo: *int) -> double;
@symbol_name("remquof") export function remquof(x: float, y: float, quo: *int)  -> float;

@symbol_name("copysignf") export function copysign(x: float,  y: float)  -> float;
@symbol_name("copysign")  export function copysign(x: double, y: double) -> double;
@symbol_name("copysignf") export function copysignf(x: float, y: float)  -> float;

/*
double nan(const char* tagp);
float nanf(const char* tagp);
*/

@symbol_name("nextafterf") export function nextafter(x: float,  y: float)  -> float;
@symbol_name("nextafter")  export function nextafter(x: double, y: double) -> double;
@symbol_name("nextafterf") export function nextafterf(x: float, y: float)  -> float;

/*
float nexttoward(float x, long double y);
double nexttoward(double x, long double y);
long double nexttoward(long double x, long double y);
float nexttowardf(float x, long double y);
long double nexttowardl(long double x, long double y);
*/

@symbol_name("fdimf") export function fdim(x: float,  y: float)  -> float;
@symbol_name("fdim")  export function fdim(x: double, y: double) -> double;
@symbol_name("fdimf") export function fdimf(x: float, y: float)  -> float;

@symbol_name("fmaxf") export function fmax(x: float,  y: float)  -> float;
@symbol_name("fmax")  export function fmax(x: double, y: double) -> double;
@symbol_name("fmaxf") export function fmaxf(x: float, y: float)  -> float;

@symbol_name("fminf") export function fmin(x: float,  y: float)  -> float;
@symbol_name("fmin")  export function fmin(x: double, y: double) -> double;
@symbol_name("fminf") export function fminf(x: float, y: float)  -> float;

@symbol_name("fmaf") export function fma(x: float,  y: float,  z: float)  -> float;
@symbol_name("fma")  export function fma(x: double, y: double, z: double) -> double;
@symbol_name("fmaf") export function fmaf(x: float, y: float,  z: float)  -> float;

// linear interpolation
@symbol_name("lerpf") export function lerp(a: float,  b: float,  t: float)  -> float;
@symbol_name("lerp")  export function lerp(a: double, b: double, t: double) -> double;
@symbol_name("lerpf") export function lerpf(a: float, b: float,  t: float)  -> float;

// classification / comparison functions
@symbol_name("fpclassifyf") export function fpclassify(x: float)  -> int;
@symbol_name("fpclassify")  export function fpclassify(x: double) -> int;
@symbol_name("fpclassifyf") export function fpclassifyf(x: float) -> int;

@symbol_name("isfinitef") export function isfinite(x: float)  -> bool;
@symbol_name("isfinite")  export function isfinite(x: double) -> bool;
@symbol_name("isfinitef") export function isfinitef(x: float) -> bool;

@symbol_name("isinff") export function isinf(x: float)  -> bool;
@symbol_name("isinf")  export function isinf(x: double) -> bool;
@symbol_name("isinff") export function isinff(x: float) -> bool;

@symbol_name("isnanf") export function isnan(x: float)  -> bool;
@symbol_name("isnan")  export function isnan(x: double) -> bool;
@symbol_name("isnanf") export function isnanf(x: float) -> bool;

@symbol_name("isnormalf") export function isnormal(x: float)  -> bool;
@symbol_name("isnormal")  export function isnormal(x: double) -> bool;
@symbol_name("isnormalf") export function isnormalf(x: float) -> bool;

@symbol_name("signbitf") export function signbit(x: float)  -> bool;
@symbol_name("signbit")  export function signbit(x: double) -> bool;
@symbol_name("signbitf") export function signbitf(x: float) -> bool;

@symbol_name("isgreaterf") export function isgreater(x: float,  y: float)  -> bool;
@symbol_name("isgreater")  export function isgreater(x: double, y: double) -> bool;
@symbol_name("isgreaterf") export function isgreaterf(x: float, y: float)  -> bool;

@symbol_name("isgreaterequalf") export function isgreaterequal(x: float,  y: float)  -> bool;
@symbol_name("isgreaterequal")  export function isgreaterequal(x: double, y: double) -> bool;
@symbol_name("isgreaterequalf") export function isgreaterequalf(x: float, y: float)  -> bool;

@symbol_name("islessf") export function isless(x: float,  y: float)  -> bool;
@symbol_name("isless")  export function isless(x: double, y: double) -> bool;
@symbol_name("islessf") export function islessf(x: float, y: float)  -> bool;

@symbol_name("islessequalf") export function islessequal(x: float,  y: float)  -> bool;
@symbol_name("islessequal")  export function islessequal(x: double, y: double) -> bool;
@symbol_name("islessequalf") export function islessequalf(x: float, y: float)  -> bool;

@symbol_name("islessgreaterf") export function islessgreater(x: float,  y: float)  -> bool;
@symbol_name("islessgreater")  export function islessgreater(x: double, y: double) -> bool;
@symbol_name("islessgreaterf") export function islessgreaterf(x: float, y: float)  -> bool;

@symbol_name("isunorderedf") export function isunordered(x: float,  y: float)  -> bool;
@symbol_name("isunordered")  export function isunordered(x: double, y: double) -> bool;
@symbol_name("isunorderedf") export function isunorderedf(x: float, y: float)  -> bool;

/*
// mathematical special functions

// associated Laguerre polynomials
@symbol_name("assoc_laguerref") export function assoc_laguerre(n: unsigned_int, m: unsigned_int, x: float)  -> float;
@symbol_name("assoc_laguerre") export function assoc_laguerre(n: unsigned_int, m: unsigned_int, x: double) -> double;
@symbol_name("assoc_laguerref") export function assoc_laguerref(n: unsigned_int, m: unsigned_int, x: float) -> float;

// associated Legendre functions
@symbol_name("assoc_legendref") export function assoc_legendre(l: unsigned_int, m: unsigned_int, x: float)  -> float;
@symbol_name("assoc_legendre") export function assoc_legendre(l: unsigned_int, m: unsigned_int, x: double) -> double;
@symbol_name("assoc_legendref") export function assoc_legendref(l: unsigned_int, m: unsigned_int, x: float) -> float;

// beta function
@symbol_name("betaf") export function beta(x: float,  y: float)  -> float;
@symbol_name("beta") export function beta(x: double, y: double) -> double;
@symbol_name("betaf") export function betaf(x: float, y: float) -> float;

// complete elliptic integral of the first kind
@symbol_name("comp_ellint_1f") export function comp_ellint_1(k: float)  -> float;
@symbol_name("comp_ellint_1") export function comp_ellint_1(k: double) -> double;
@symbol_name("comp_ellint_1f") export function comp_ellint_1f(k: float) -> float;

// complete elliptic integral of the second kind
@symbol_name("comp_ellint_2f") export function comp_ellint_2(k: float)  -> float;
@symbol_name("comp_ellint_2") export function comp_ellint_2(k: double) -> double;
@symbol_name("comp_ellint_2f") export function comp_ellint_2f(k: float) -> float;

// complete elliptic integral of the third kind
@symbol_name("comp_ellint_3f") export function comp_ellint_3(k: float,  nu: float)  -> float;
@symbol_name("comp_ellint_3") export function comp_ellint_3(k: double, nu: double) -> double;
@symbol_name("comp_ellint_3f") export function comp_ellint_3f(k: float, nu: float) -> float;

// regular modified cylindrical Bessel functions
@symbol_name("cyl_bessel_if") export function cyl_bessel_i(nu: float,  x: float)  -> float;
@symbol_name("cyl_bessel_i") export function cyl_bessel_i(nu: double, x: double) -> double;
@symbol_name("cyl_bessel_if") export function cyl_bessel_if(nu: float, x: float) -> float;

// cylindrical Bessel functions of the first kind
@symbol_name("cyl_bessel_jf") export function cyl_bessel_j(nu: float,  x: float)  -> float;
@symbol_name("cyl_bessel_j") export function cyl_bessel_j(nu: double, x: double) -> double;
@symbol_name("cyl_bessel_jf") export function cyl_bessel_jf(nu: float, x: float) -> float;

// irregular modified cylindrical Bessel functions
@symbol_name("cyl_bessel_kf") export function cyl_bessel_k(nu: float,  x: float)  -> float;
@symbol_name("cyl_bessel_k") export function cyl_bessel_k(nu: double, x: double) -> double;
@symbol_name("cyl_bessel_kf") export function cyl_bessel_kf(nu: float, x: float) -> float;

// cylindrical Neumann functions;
// cylindrical Bessel functions of the second kind
@symbol_name("cyl_neumannf") export function cyl_neumann(nu: float,  x: float)  -> float;
@symbol_name("cyl_neumann") export function cyl_neumann(nu: double, x: double) -> double;
@symbol_name("cyl_neumannf") export function cyl_neumannf(nu: float, x: float) -> float;

// incomplete elliptic integral of the first kind
@symbol_name("ellint_1f") export function ellint_1(k: float,  phi: float)  -> float;
@symbol_name("ellint_1") export function ellint_1(k: double, phi: double) -> double;
@symbol_name("ellint_1f") export function ellint_1f(k: float, phi: float) -> float;

// incomplete elliptic integral of the second kind
@symbol_name("ellint_2f") export function ellint_2(k: float,  phi: float)  -> float;
@symbol_name("ellint_2") export function ellint_2(k: double, phi: double) -> double;
@symbol_name("ellint_2f") export function ellint_2f(k: float, phi: float) -> float;

// incomplete elliptic integral of the third kind
@symbol_name("ellint_3f") export function ellint_3(k: float,  nu: float,  phi: float)  -> float;
@symbol_name("ellint_3") export function ellint_3(k: double, nu: double, phi: double) -> double;
@symbol_name("ellint_3f") export function ellint_3f(k: float, nu: float, phi: float) -> float;

// exponential integral
@symbol_name("expintf") export function expint(x: float)  -> float;
@symbol_name("expint") export function expint(x: double) -> double;
@symbol_name("expintf") export function expintf(x: float) -> float;

// Hermite polynomials
@symbol_name("hermitef") export function hermite(n: unsigned_int, x: float)  -> float;
@symbol_name("hermite") export function hermite(n: unsigned_int, x: double) -> double;
@symbol_name("hermitef") export function hermitef(n: unsigned_int, x: float) -> float;

// Laguerre polynomials
@symbol_name("laguerref") export function laguerre(n: unsigned_int, x: float)  -> float;
@symbol_name("laguerre") export function laguerre(n: unsigned_int, x: double) -> double;
@symbol_name("laguerref") export function laguerref(n: unsigned_int, x: float) -> float;

// Legendre polynomials
@symbol_name("legendref") export function legendre(l: unsigned_int, x: float)  -> float;
@symbol_name("legendre") export function legendre(l: unsigned_int, x: double) -> double;
@symbol_name("legendref") export function legendref(l: unsigned_int, x: float) -> float;

// Riemann zeta function
@symbol_name("riemann_zetaf") export function riemann_zeta(x: float)  -> float;
@symbol_name("riemann_zeta") export function riemann_zeta(x: double) -> double;
@symbol_name("riemann_zetaf") export function riemann_zetaf(x: float) -> float;

// spherical Bessel functions of the first kind
@symbol_name("sph_besself") export function sph_bessel(n: unsigned_int, x: float)  -> float;
@symbol_name("sph_bessel") export function sph_bessel(n: unsigned_int, x: double) -> double;
@symbol_name("sph_besself") export function sph_besself(n: unsigned_int, x: float) -> float;

// spherical associated Legendre functions
@symbol_name("sph_legendref") export function sph_legendre(l: unsigned_int, m: unsigned_int, theta: float)  -> float;
@symbol_name("sph_legendre") export function sph_legendre(l: unsigned_int, m: unsigned_int, theta: double) -> double;
@symbol_name("sph_legendref") export function sph_legendref(l: unsigned_int, m: unsigned_int, theta: float) -> float;

// spherical Neumann functions;
// spherical Bessel functions of the second kind
@symbol_name("sph_neumannf") export function sph_neumann(n: unsigned_int, x: float)  -> float;
@symbol_name("sph_neumann") export function sph_neumann(n: unsigned_int, x: double) -> double;
@symbol_name("sph_neumannf") export function sph_neumannf(n: unsigned_int, x: float) -> float;
*/
