import math;


export struct complex
{
	.re: float64;
	.im: float64;
}


export function abs(z: complex) -> float64
{ return hypot(z.re, z.im); }

export function abs_square(z: complex) -> float64
{ return z.re * z.re + z.im * z.im; }

export function conjugate(z: complex) -> complex
{ return complex[ z.re, -z.im ]; }

export function phi(z: complex) -> float64
{ return atan2(z.im, z.re); }


export operator + (z: complex) -> complex
{ return z; }

export operator - (z: complex) -> complex
{ return complex[ -z.re, -z.im ]; }


export operator + (lhs: complex, rhs: complex) -> complex
{ return complex[ lhs.re + rhs.re, lhs.im + rhs.im ]; }

export operator + (lhs: complex, rhs: float64) -> complex
{ return complex[ lhs.re + rhs, lhs.im ]; }

export operator + (lhs: float64, rhs: complex) -> complex
{ return complex[ lhs + rhs.re, rhs.im ]; }


export operator - (lhs: complex, rhs: complex) -> complex
{ return complex[ lhs.re - rhs.re, lhs.im - rhs.im ]; }

export operator - (lhs: complex, rhs: float64) -> complex
{ return complex[ lhs.re - rhs, lhs.im ]; }

export operator - (lhs: float64, rhs: complex) -> complex
{ return complex[ lhs - rhs.re, -rhs.im ]; }


export operator * (lhs: complex, rhs: complex) -> complex
{ return complex[ lhs.re * rhs.re - lhs.im * rhs.im, lhs.re * rhs.im + lhs.im * rhs.re ]; }

export operator * (lhs: complex, rhs: float64) -> complex
{ return complex[ lhs.re * rhs, lhs.im * rhs ]; }

export operator * (lhs: float64, rhs: complex) -> complex
{ return complex[ lhs * rhs.re, lhs * rhs.im ]; }


export operator / (lhs: complex, rhs: complex) -> complex
{ return lhs * (complex[ rhs.re, -rhs.im ] / abs_square(rhs)); }

export operator / (lhs: complex, rhs: float64) -> complex
{ return complex[ lhs.re / rhs, lhs.im / rhs ]; }

export operator / (lhs: float64, rhs: complex) -> complex
{ return complex[ rhs.re, -rhs.im ] * (lhs / abs_square(rhs)); }


export operator == (lhs: complex, rhs: complex) -> bool
{ return lhs.re == rhs.re & lhs.im == rhs.im; }

export operator == (lhs: complex, rhs: float64) -> bool
{ return lhs.re == rhs & lhs.im == 0.0; }

export operator == (lhs: float64, rhs: complex) -> bool
{ return lhs == rhs.re & 0.0 == rhs.im; }

export operator != (lhs: complex, rhs: complex) -> bool
{ return !(lhs == rhs); }

export operator != (lhs: complex, rhs: float64) -> bool
{ return !(lhs == rhs); }

export operator != (lhs: float64, rhs: complex) -> bool
{ return !(lhs == rhs); }


export function exp(z: complex) -> complex
{ return exp(z.re) * complex[ cos(z.im), sin(z.im) ]; }

export function exp2(z: complex) -> complex
{ return exp2(z.re) * complex[ cos(log(2.0) * z.im), sin(log(2.0) * z.im) ]; }

// expm1 is not supported right now

export function log(z: complex) -> complex
{ return complex[ log(z.abs()), z.phi() ]; }

export function log10(z: complex) -> complex
{ return complex[ log10(z.abs()), z.phi() / log(10.0) ]; }

export function log2(z: complex) -> complex
{ return complex[ log2(z.abs()), z.phi() / log(2.0) ]; }

// log1p is not supported right now


// the returned value is such that sqrt(z).re >= 0
export function sqrt(z: complex) -> complex
{
	const phi = z.phi();
	const abs = z.abs();
	return sqrt(abs) * complex[ cos(phi / 2.0), sin(phi / 2.0) ];
}

// cbrt is not supported right now

export function pow(x: float64, w: complex) -> complex
{ return exp(log(x) * w); }

export function pow(z: complex, y: float64) -> complex
{ return exp(log(z) * y); }

export function pow(z: complex, w: complex) -> complex
{ return exp(log(z) * w); }
