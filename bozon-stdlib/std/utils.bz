import libc::stdlib;
import meta::comptime;
import format;

export function memcpy  = __builtin_memcpy;
export function memmove = __builtin_memmove;
export function memset  = __builtin_memset;

export function assert(b: bool)
{
	if (!b) unreachable;
}

export function exit(code: int32) -> void
{
	libc::exit(code);
}

export function malloc(T: typename, n: usize) -> *T
{
	static_assert(&T != T, "type in malloc can't be a reference type");
	static_assert(const T != T, "type in malloc can't be const");
	static_assert(consteval T != T, "type in malloc can't be consteval");

	if (meta::is_comptime())
	{
		return meta::malloc(T, n);
	}
	else
	{
		const malloc_result = libc::malloc(n * sizeof T);
		if (malloc_result == null)
		{
			unreachable;
		}
		return __builtin_pointer_cast(*T, malloc_result.get_value());
	}
}

export function free(p: ?*void)
{
	if (meta::is_comptime())
	{
		meta::free(p);
	}
	else
	{
		libc::free(p);
	}
}

export function swap(a: &auto, b: &auto)
{
	static_assert(typeof a == typeof b, "different types in swap");
	const tmp = a;
	a = b;
	b = tmp;
}

consteval function is_integer_type(T: typename) -> bool
{
	return T == int8 || T == int16 || T == int32 || T == int64
		|| T == uint8 || T == uint16 || T == uint32 || T == uint64;
}

export struct iota_range<T: typename>
{
	static_assert(
		is_integer_type(T),
		comptime_format("invalid type argument '{}' for std::iota_range", __builtin_typename_as_str(T))
	);

	type value_type = T;

	._begin: T;
	._end: T;
}

export struct iota_iterator_t<T: typename>
{
	static_assert(
		is_integer_type(T),
		comptime_format("invalid type argument '{}' for std::iota_iterator_t", __builtin_typename_as_str(T))
	);

	type value_type = T;

	._value: T;
}

export function begin(iota: iota_range) -> iota_iterator_t<(typeof iota).value_type>
{
	type T = (typeof iota).value_type;
	return iota_iterator_t<T>[ iota._begin ];
}

export function end(iota: iota_range) -> iota_iterator_t<(typeof iota).value_type>
{
	type T = (typeof iota).value_type;
	return iota_iterator_t<T>[ iota._end ];
}

export function size(iota: iota_range) -> usize
{
	return (iota._end - iota._begin) as usize;
}


export operator * (it: iota_iterator_t) -> (typeof it).value_type
{
	return it._value;
}

export operator ++ (it: &iota_iterator_t) -> typeof it
{
	++it._value;
	return it;
}

export operator == (lhs: iota_iterator_t, rhs: iota_iterator_t) -> bool
{
	static_assert(typeof lhs == typeof rhs);
	return lhs._value == rhs._value;
}

export operator != (lhs: iota_iterator_t, rhs: iota_iterator_t) -> bool
{
	static_assert(typeof lhs == typeof rhs);
	return lhs._value != rhs._value;
}


export function iota(end) -> iota_range<typeof end>
{
	type T = typeof end;
	return iota_range<T>[ 0 as T, end ];
}

export function iota(begin, end) -> iota_range<typeof begin>
{
	static_assert(
		typeof begin == typeof end,
		comptime_format(
			"begin and end have different types '{}' and '{}' in std::iota",
			__builtin_typename_as_str(typeof begin), __builtin_typename_as_str(typeof end)
		)
	);
	if consteval (typeof begin == typeof end)
	{
		type T = typeof begin;
		return iota_range<T>[ begin, end ];
	}
	else
	{
		type T = typeof begin;
		return iota_range<T>[ 0 as T, 0 as T ];
	}
}
