import libc::stdlib;
import print;
import unicode;
import utils;

import meta::comptime;

/*
@no_comptime_checking
function print_ascii_char(c: char)
{
	const c_int_val = c as uint32 as uint8;
	std::print(__builtin_str_from_ptrs(&c_int_val, &c_int_val + 1));
}

@no_comptime_checking
function print_uint_impl(n: uint64, base: consteval uint64)
{
	if (n < 10u)
	{
		print_ascii_char('0' + n);
	}
	else if (n < base)
	{
		print_ascii_char('a' + n - 10);
	}
	else
	{
		print_uint_impl(n / base, base);
		const mod = n % base;
		const c = if (mod < 10u) { '0' + mod } else { 'a' + mod - 10 };
		print_ascii_char(c);
	}
}

@no_comptime_checking
function print_uint(n: uint64, base: consteval uint64)
{
	if (n == 0u)
	{
		std::print("0");
	}
	else
	{
		print_uint_impl(n, base);
	}
}

@no_comptime_checking
export function comptime_print(n: uint64)
{
	print_uint(n, 10u);
}

@no_comptime_checking
export function comptime_print(p: *const void)
{
	std::print("0x"), print_uint(__builtin_pointer_to_int(p), 16u);
}

@no_comptime_checking
export function comptime_println(n: uint64)
{
	print_uint(n, 10u), std::println("");
}

@no_comptime_checking
export function comptime_println(p: *const void)
{
	std::print("0x"), print_uint(__builtin_pointer_to_int(p), 16u), std::println("");
}
*/

static_assert(sizeof string == 3u * sizeof *uint8);
consteval short_string_max_size = 2u * sizeof *uint8;

function malloc(n: usize) -> *uint8
{
	if (meta::is_comptime())
	{
		return meta::malloc(uint8, n);
	}
	else
	{
		return __builtin_pointer_cast(*uint8, libc::malloc(n));
	}
}

function free(p: *void)
{
	if (meta::is_comptime())
	{
		meta::free(p);
	}
	else
	{
		libc::free(p);
	}
}

export struct string
{
	._data_begin: *uint8;
	._data_end:   *uint8;
	._alloc_end:  *uint8;

	destructor(&self)
	{
		if (!self.is_short_string())
		{
			free(self._data_begin);
		}
	}

	constructor()
	{
		return string[ null, null, null ];
	}

	constructor(s: str)
	{
		const size = s.size();
		if (size == 0u)
		{
			return string[ null, null, null ];
		}
		else if (!meta::is_comptime() && size <= short_string_max_size)
		{
			const data_begin = __builtin_int_to_pointer(*uint8, 1uz | (size << 1u));
			let data_and_alloc_end: [2: *uint8];
			memcpy(data_and_alloc_end.begin(), s.begin_ptr(), size);
			return string[ data_begin, data_and_alloc_end[0], data_and_alloc_end[1] ];
		}
		else
		{
			const [data_begin, alloc_size] = rounded_alloc(size);
			memcpy(data_begin, s.begin_ptr(), size);
			return string[ data_begin, data_begin + size, data_begin + alloc_size ];
		}
	}

	constructor(other: &const string)
	{
		return string(other.as_str());
	}
}

export operator = (self: &string, other: &const string) -> &string
{
	if (&self as *const string == &other)
	{
		return self;
	}
	const size = other.size();
	self.reserve(size);
	memcpy(self.begin_ptr(), other.begin_ptr(), size);
	self.set_size_unsafe(size);
	return self;
}

export operator = (self: &string, other: string) -> &string
{
	self.swap(other);
	return self;
}

export operator = (self: &string, rhs: str) -> &string
{
	const size = rhs.size();
	if (self.capacity() >= size)
	{
		memcpy(self.begin_ptr(), rhs.begin_ptr(), size);
		self.set_size_unsafe(size);
	}
	else
	{
		self = string(rhs);
	}
	return self;
}

function round_to_next_power_of_two(n: usize) -> usize
{
	// https://stackoverflow.com/a/466242/11488457
	static_assert(sizeof usize == 8u);
	n -= 1u;
	n |= n >>  1;
	n |= n >>  2;
	n |= n >>  4;
	n |= n >>  8;
	n |= n >> 16;
	n |= n >> 32;
	n += 1u;
	return n;
}

function rounded_alloc(n: usize) -> [*uint8, usize]
{
	if (n == 0u)
	{
		return [ null, 0u ];
	}
	else
	{
		const rounded_n = round_to_next_power_of_two(n);
		return [ malloc(rounded_n), rounded_n ];
	}
}

function is_short_string(s: &const string) -> bool
{
	if (meta::is_comptime())
	{
		return false;
	}
	else
	{
		const data_begin_int = __builtin_pointer_to_int(s._data_begin);
		return s._data_begin == null || (data_begin_int & 1uz) != 0u;
	}
}

function short_string_size(s: &const string) -> usize
{
	const data_begin_int = __builtin_pointer_to_int(s._data_begin);
	return data_begin_int >> 1u;
}

function begin_ptr(s: &const string) -> *uint8
{
	if (s.is_short_string())
	{
		return __builtin_pointer_cast(*uint8, &s._data_end);
	}
	else
	{
		return s._data_begin;
	}
}

function end_ptr(s: &const string) -> *uint8
{
	if (s.is_short_string())
	{
		const size = s.short_string_size();
		return __builtin_pointer_cast(*uint8, &s._data_end) + size;
	}
	else
	{
		return s._data_end;
	}
}

function set_short_string_size(s: &string, size: usize)
{
	if (size == 0u)
	{
		s._data_begin = null;
	}
	else
	{
		s._data_begin = __builtin_int_to_pointer(*uint8, (size << 1u) | 1uz);
	}
}

function set_size_unsafe(s: &string, size: usize)
{
	if (s.is_short_string())
	{
		s.set_short_string_size(size);
	}
	else
	{
		s._data_end = s._data_begin + size;
	}
}


function as_slice(s: &const string) -> [: const uint8]
{
	return __builtin_slice_from_const_ptrs(s.begin_ptr(), s.end_ptr());
}

export function as_str(s: &const string) -> str
{
	return __builtin_str_from_ptrs(s.begin_ptr(), s.end_ptr());
}

export function length(s: #const string) -> usize
{
	return s.as_str().length();
}

export function size(s: #const string) -> usize
{
	return s.as_str().size();
}

export function capacity(self: #const string) -> usize
{
	return if (self.is_short_string()) { short_string_max_size } else { (self._alloc_end - self._data_begin) as usize };
}

export function empty(self: #const string) -> bool
{
	return self._data_begin == null | self._data_begin == self._data_end;
}

export function not_empty(self: #const string) -> bool
{
	return !self.empty();
}

export function is_ascii(self: #const string) -> bool
{
	for (const c in self.as_slice())
	{
		if ((c & 0b1000'0000u8) != 0u)
		{
			return false;
		}
	}
	return true;
}

export function data(self: &string) -> *uint8
{
	return self.begin_ptr();
}

export function data(self: &const string) -> *const uint8
{
	return self.begin_ptr();
}

export function data_end(self: &string) -> *uint8
{
	return self.end_ptr();
}

export function data_end(self: &const string) -> *const uint8
{
	return self.end_ptr();
}


export function reserve(self: &string, new_capacity: usize)
{
	if (new_capacity > self.capacity())
	{
		const [data_begin, alloc_size] = rounded_alloc(new_capacity);
		const size = self.size();
		memcpy(data_begin, self.begin_ptr(), size);
		if (!self.is_short_string())
		{
			free(self._data_begin);
		}
		self._data_begin = data_begin;
		self._data_end   = data_begin + size;
		self._alloc_end  = data_begin + alloc_size;
	}
}

export function clear(self: &string)
{
	self.set_size_unsafe(0u);
}

export function push_back(self: &string, c: char)
{
	const char_and_size = encode_char_utf8(c);
	self.reserve(self.size() + char_and_size[1]);
	memcpy(self.end_ptr(), char_and_size[0].begin(), char_and_size[1]);
	self.set_size_unsafe(self.size() + char_and_size[1]);
}

function swap(a: &*uint8, b: &*uint8)
{
	const temp = a;
	a = b;
	b = temp;
}

export function swap(a: &string, b: &string)
{
	swap(a._data_begin, b._data_begin);
	swap(a._data_end,   b._data_end);
	swap(a._alloc_end,  b._alloc_end);
}

export function release(s: &string) -> string
{
	const data_begin = s._data_begin;
	const data_end   = s._data_end;
	const alloc_end  = s._alloc_end;
	s._data_begin = null;
	s._data_end   = null;
	s._alloc_end  = null;
	return string[ data_begin, data_end, alloc_end ];
}


export function print(s: #const string)
{
	print(s.as_str());
}

export function println(s: #const string)
{
	println(s.as_str());
}


export operator .. (lhs: #const string, rhs: #const string) -> string
{
	const lhs_begin = lhs.begin_ptr();
	const lhs_size = lhs.size();
	const rhs_begin = rhs.begin_ptr();
	const rhs_size = rhs.size();

	const result_size = lhs_size + rhs_size;

	const [result_alloc, result_alloc_size] = rounded_alloc(result_size);

	memcpy(result_alloc, lhs_begin, lhs_size);
	memcpy(result_alloc + lhs_size, rhs_begin, rhs_size);

	return string[ result_alloc, result_alloc + result_size, result_alloc + result_alloc_size ];
}

export operator .. (lhs: #const string, rhs: str) -> string
{
	const lhs_begin = lhs.begin_ptr();
	const lhs_size = lhs.size();
	const rhs_begin = rhs.begin_ptr();
	const rhs_size = rhs.size();

	const result_size = lhs_size + rhs_size;

	const [result_alloc, result_alloc_size] = rounded_alloc(result_size);

	memcpy(result_alloc, lhs_begin, lhs_size);
	memcpy(result_alloc + lhs_size, rhs_begin, rhs_size);

	return string[ result_alloc, result_alloc + result_size, result_alloc + result_alloc_size ];
}

export operator .. (lhs: str, rhs: #const string) -> string
{
	const lhs_begin = lhs.begin_ptr();
	const lhs_size = lhs.size();
	const rhs_begin = rhs.begin_ptr();
	const rhs_size = rhs.size();

	const result_size = lhs_size + rhs_size;

	const [result_alloc, result_alloc_size] = rounded_alloc(result_size);

	memcpy(result_alloc, lhs_begin, lhs_size);
	memcpy(result_alloc + lhs_size, rhs_begin, rhs_size);

	return string[ result_alloc, result_alloc + result_size, result_alloc + result_alloc_size ];
}

export operator .. (lhs: #const string, rhs: char) -> string
{
	const lhs_begin = lhs.begin_ptr();
	const lhs_size = lhs.size();
	const rhs_encoded = encode_char_utf8(rhs);
	const rhs_begin = rhs_encoded[0].begin();
	const rhs_size = rhs_encoded[1] as usize;

	const result_size = lhs_size + rhs_size;

	const [result_alloc, result_alloc_size] = rounded_alloc(result_size);

	memcpy(result_alloc, lhs_begin, lhs_size);
	memcpy(result_alloc + lhs_size, rhs_begin, rhs_size);

	return string[ result_alloc, result_alloc + result_size, result_alloc + result_alloc_size ];
}

export operator .. (lhs: char, rhs: #const string) -> string
{
	const lhs_encoded = encode_char_utf8(lhs);
	const lhs_begin = lhs_encoded[0].begin();
	const lhs_size = lhs_encoded[1] as usize;
	const rhs_begin = rhs.begin_ptr();
	const rhs_size = rhs.size();

	const result_size = lhs_size + rhs_size;

	const [result_alloc, result_alloc_size] = rounded_alloc(result_size);

	memcpy(result_alloc, lhs_begin, lhs_size);
	memcpy(result_alloc + lhs_size, rhs_begin, rhs_size);

	return string[ result_alloc, result_alloc + result_size, result_alloc + result_alloc_size ];
}


export operator ..= (lhs: &string, rhs: #const string) -> &string
{
	const rhs_size = rhs.size();
	const result_size = lhs.size() + rhs_size;
	lhs.reserve(result_size);

	// lhs.reserve could change rhs, if you write something like s ..= s
	const rhs_begin = rhs.begin_ptr();
	memcpy(lhs.end_ptr(), rhs_begin, rhs_size);
	lhs.set_size_unsafe(result_size);
	return lhs;
}

export operator ..= (lhs: &string, rhs: str) -> &string
{
	const rhs_size = rhs.size();
	const result_size = lhs.size() + rhs_size;
	lhs.reserve(result_size);

	const rhs_begin = rhs.begin_ptr();
	memcpy(lhs.end_ptr(), rhs_begin, rhs_size);
	lhs.set_size_unsafe(result_size);
	return lhs;
}

export operator ..= (lhs: &string, rhs: char) -> &string
{
	const rhs_encoded = encode_char_utf8(rhs);
	const rhs_begin = rhs_encoded[0].begin();
	const rhs_size = rhs_encoded[1] as usize;

	const result_size = lhs.size() + rhs_size;
	lhs.reserve(result_size);
	memcpy(lhs.end_ptr(), rhs_begin, rhs_size);
	lhs.set_size_unsafe(result_size);
	return lhs;
}


export operator == (lhs: #const string, rhs: #const string) -> bool
{
	return lhs.as_str() == rhs.as_str();
}

export operator == (lhs: str, rhs: #const string) -> bool
{
	return lhs == rhs.as_str();
}

export operator == (lhs: #const string, rhs: str) -> bool
{
	return lhs.as_str() == rhs;
}

export operator != (lhs: #const string, rhs: #const string) -> bool
{
	return lhs.as_str() != rhs.as_str();
}

export operator != (lhs: str, rhs: #const string) -> bool
{
	return lhs != rhs.as_str();
}

export operator != (lhs: #const string, rhs: str) -> bool
{
	return lhs.as_str() != rhs;
}


export function starts_with(s: #const string, prefix: #const string) -> bool
{
	return s.as_str().starts_with(prefix.as_str());
}

export function starts_with(s: #const string, prefix: str) -> bool
{
	return s.as_str().starts_with(prefix);
}

export function ends_with(s: #const string, postfix: #const string) -> bool
{
	return s.as_str().ends_with(postfix.as_str());
}

export function ends_with(s: #const string, postfix: str) -> bool
{
	return s.as_str().ends_with(postfix);
}
