import utils;
import meta::comptime;
import format;

export struct vector<T: typename>
{
	static_assert(&T != T, "vector value_type can't be a reference type");
	static_assert(const T != T, "vector value_type can't be const");
	static_assert(consteval T != T, "vector value_type can't be consteval");

	type value_type = T;
	type _self_t = vector<T>;

	._data_begin: *T;
	._data_end:   *T;
	._alloc_end:  *T;

	destructor(&self)
	{
		self.clear();
		free(self._data_begin);
	}

	constructor()
	{
		return _self_t[ null, null, null ];
	}

	constructor(other: &const _self_t)
	{
		const size = other.size();
		if (size == 0u)
		{
			return _self_t();
		}
		const [data_begin, alloc_size] = rounded_alloc(T, size);
		const data_end = data_begin + size;
		const alloc_end = data_begin + alloc_size;
		copy_range(data_begin, data_end, other._data_begin);
		return _self_t[ data_begin, data_end, alloc_end ];
	}

	operator = (self: &_self_t, other: &const _self_t) -> &_self_t
	{
		if (&self == &other)
		{
			return self;
		}
		const size = other.size();
		self.clear();
		self.reserve(size);
		self._data_end = self._data_begin + size;
		copy_range(self._data_begin, self._data_end, other._data_begin);
		return self;
	}

	operator = (self: &_self_t, other: _self_t) -> &_self_t
	{
		self.swap(other);
		return self;
	}

	function size(self: #const _self_t) -> usize
	{
		return (self._data_end - self._data_begin) as usize;
	}

	function capacity(self: #const _self_t) -> usize
	{
		return (self._alloc_end - self._data_begin) as usize;
	}

	function as_slice(self: &_self_t) -> [: value_type]
	{
		return __builtin_slice_from_ptrs(self._data_begin, self._data_end);
	}

	function as_slice(self: &const _self_t) -> [: const value_type]
	{
		return __builtin_slice_from_const_ptrs(self._data_begin, self._data_end);
	}

	operator [] (self: &_self_t, i: int64) -> &value_type
	{
		assert(i >= 0 && i as uint64 < self.size());
		return *(self._data_begin + i);
	}

	operator [] (self: &_self_t, i: uint64) -> &value_type
	{
		assert(i < self.size());
		return *(self._data_begin + i);
	}

	operator [] (self: &const _self_t, i: int64) -> &const value_type
	{
		assert(i >= 0 && i as uint64 < self.size());
		return *(self._data_begin + i);
	}

	operator [] (self: &const _self_t, i: uint64) -> &const value_type
	{
		assert(i < self.size());
		return *(self._data_begin + i);
	}


	function reserve(self: &_self_t, new_capacity: usize)
	{
		if (new_capacity > self.capacity())
		{
			const [new_data_begin, new_alloc_size] = rounded_alloc(T, new_capacity);
			const new_data_end = new_data_begin + self.size();
			const new_alloc_end = new_data_begin + new_alloc_size;
			copy_range(new_data_begin, new_data_end, self._data_begin);
			self.clear();
			free(self._data_begin);
			self._data_begin = new_data_begin;
			self._data_end   = new_data_end;
			self._alloc_end  = new_alloc_end;
		}
	}

	function release(self: &_self_t) -> _self_t
	{
		const data_begin = self._data_begin;
		const data_end   = self._data_end;
		const alloc_end  = self._alloc_end;
		self._data_begin = null;
		self._data_end   = null;
		self._alloc_end  = null;
		return _self_t[ data_begin, data_end, alloc_end ];
	}

	function clear(self: &_self_t)
	{
		for (let it = self._data_end; it != self._data_begin;)
		{
			--it;
			__builtin_call_destructor(*it);
		}
		self._data_end = self._data_begin;
	}

	function push_back(self: &_self_t, value: ##value_type)
	{
		if (self._data_end == self._alloc_end)
		{
			self.reserve(self.size() + 1u);
		}
		__builtin_inplace_construct(self._data_end, value_type(__forward value));
		self._data_end += 1;
	}

	function emplace_back(self: &_self_t, args: ...##auto) -> &value_type
	{
		if (self._data_end == self._alloc_end)
		{
			self.reserve(self.size() + 1u);
		}
		__builtin_inplace_construct(self._data_end, value_type(...__forward args));
		self._data_end += 1;
		return *(self._data_end - 1);
	}
}

export function swap(a: &vector, b: &vector)
	-> (if consteval (typeof a != typeof b) {
		(consteval meta::compile_error(comptime_format(
			"different 'std::vector' types in swap: '{}' and '{}'",
			__builtin_typename_as_str(__builtin_remove_reference(typeof a)),
			__builtin_typename_as_str(__builtin_remove_reference(typeof b)),
		)))
	} else {}, void)
{
	swap(a._data_begin, b._data_begin);
	swap(a._data_end,   b._data_end);
	swap(a._alloc_end,  b._alloc_end);
}

export function begin(vec: &vector) -> *(typeof vec).value_type
{
	return vec._data_begin;
}

export function end(vec: &vector) -> *(typeof vec).value_type
{
	return vec._data_end;
}

export function begin(vec: &const vector) -> *const (typeof vec).value_type
{
	return vec._data_begin;
}

export function end(vec: &const vector) -> *const (typeof vec).value_type
{
	return vec._data_end;
}


function copy_range(begin: *auto, end: *auto, other_begin: *const auto)
{
	for (let [it, other_it] = [ begin, other_begin ]; it != end; ++it, ++other_it)
	{
		__builtin_inplace_construct(it, *other_it);
	}
}

function round_to_next_power_of_two(n: usize) -> usize
{
	// https://stackoverflow.com/a/466242/11488457
	static_assert(sizeof usize == 8u);
	n -= 1u;
	n |= n >>  1;
	n |= n >>  2;
	n |= n >>  4;
	n |= n >>  8;
	n |= n >> 16;
	n |= n >> 32;
	n += 1u;
	return n;
}

function rounded_alloc(T: typename, n: usize) -> [*T, usize]
{
	if (n == 0u)
	{
		return [ null, 0u ];
	}
	else
	{
		const rounded_n = round_to_next_power_of_two(n);
		return [ malloc(T, rounded_n), rounded_n ];
	}
}
