// Copyright 2018 Ulf Adams
//
// The contents of this file may be used under the terms of the Apache License,
// Version 2.0.
//
//    (See accompanying file LICENSE-Apache or copy at
//     http://www.apache.org/licenses/LICENSE-2.0)
//
// Alternatively, the contents of this file may be used under the terms of
// the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE-Boost or copy at
//     https://www.boost.org/LICENSE_1_0.txt)
//
// Unless required by applicable law or agreed to in writing, this software
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.

import std::utils;

// Returns the number of decimal digits in v, which must not contain more than 9 digits.
export function decimalLength9(v: uint32) -> uint32
{
	// Function precondition: v is not a 10-digit number.
	// (f2s: 9 digits are sufficient for round-tripping.)
	// (d2fixed: We print 9-digit blocks.)
	assert(v < 1'000'000'000u);
	return if (v >= 100'000'000u) { 9u }
		else if (v >= 10'000'000u) { 8u }
		else if (v >=  1'000'000u) { 7u }
		else if (v >=    100'000u) { 6u }
		else if (v >=     10'000u) { 5u }
		else if (v >=      1'000u) { 4u }
		else if (v >=        100u) { 3u }
		else if (v >=         10u) { 2u }
		else                       { 1u };
}

// Returns e == 0 ? 1 : [log_2(5^e)]; requires 0 <= e <= 3528.
export function log2pow5(e: uint32) -> uint32
{
	// This approximation works up to the point that the multiplication overflows at e = 3529.
	// If the multiplication were done in 64 bits, it would fail at 5^4004 which is just greater
	// than 2^9297.
	assert(e >= 0u);
	assert(e <= 3528u);
	return (e * 1217359u) >> 19u;
}

// Returns e == 0 ? 1 : ceil(log_2(5^e)); requires 0 <= e <= 3528.
export function pow5bits(e: uint32) -> uint32
{
	// This approximation works up to the point that the multiplication overflows at e = 3529.
	// If the multiplication were done in 64 bits, it would fail at 5^4004 which is just greater
	// than 2^9297.
	assert(e >= 0u);
	assert(e <= 3528u);
	return ((e * 1217359u) >> 19u) + 1u;
}

// Returns e == 0 ? 1 : ceil(log_2(5^e)); requires 0 <= e <= 3528.
export function ceil_log2pow5(e: uint32) -> uint32
{
	return log2pow5(e) + 1u;
}

// Returns floor(log_10(2^e)); requires 0 <= e <= 1650.
export function log10Pow2(e: uint32) -> uint32
{
	// The first value this approximation fails for is 2^1651 which is just greater than 10^297.
	assert(e >= 0u);
	assert(e <= 1650u);
	return (e * 78913u) >> 18u;
}

// Returns floor(log_10(5^e)); requires 0 <= e <= 2620.
export function log10Pow5(e: uint32) -> uint32
{
	// The first value this approximation fails for is 5^2621 which is just greater than 10^1832.
	assert(e >= 0u);
	assert(e <= 2620u);
	return (e * 732923u) >> 20u;
}

export function copy_special_str(result: *uint8, sign: bool, exponent: bool, mantissa: bool) -> int32
{
	if (mantissa)
	{
		memcpy(result, "NaN".begin_ptr(), 3u);
		return 3;
	}
	if (sign)
	{
		*result = '-' as uint32 as uint8;
	}
	if (exponent)
	{
		memcpy(if (sign) { result + 1 } else { result }, "Infinity".begin_ptr(), 8u);
		return if (sign) { 9 } else { 8 };
	}
	memcpy(if (sign) { result + 1 } else { result }, "0E0".begin_ptr(), 3u);
	return if (sign) { 4 } else { 3 };
}

export function float_to_bits(f: float32) -> uint32
{
	let bits: uint32 = 0u;
	memcpy(&bits, &f, sizeof float32);
	return bits;
}

export function double_to_bits(d: float64) -> uint64
{
	let bits: uint64 = 0u;
	memcpy(&bits, &d, sizeof float64);
	return bits;
}


//
// addition by me
//

// writes nan, inf or 0.0 to output with sign
export function copy_short_special_str(result: *uint8, sign: bool, exponent: bool, mantissa: bool) -> *uint8
{
	if (mantissa)
	{
		memcpy(result, "nan".begin_ptr(), 3u);
		return result + 3;
	}

	if (sign)
	{
		*result = '-' as uint32 as uint8;
		++result;
	}
	if (exponent)
	{
		memcpy(result, "inf".begin_ptr(), 3u);
		return result + 3;
	}
	else
	{
		memcpy(result, "0.0".begin_ptr(), 3u);
		return result + 3;
	}
}
