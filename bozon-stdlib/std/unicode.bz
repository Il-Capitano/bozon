export consteval unicode_max_char = '\U0010ffff';

export consteval utf8_max_one_byte_char   = '\u007f';
export consteval utf8_max_two_byte_char   = '\u07ff';
export consteval utf8_max_three_byte_char = '\uffff';

export function encode_char_utf8(c: char) -> [[4: uint8], uint32]
{
	let buffer: [4: uint8];
	if (c < utf8_max_one_byte_char)
	{
		buffer[0] = c as uint32 as uint8;
		return [buffer, 1u];
	}
	else if (c < utf8_max_two_byte_char)
	{
		buffer[0] = (((c as uint32 >> 6u) & 0b0001'1111) | 0b1100'0000) as uint8;
		buffer[1] = (((c as uint32 >> 0u) & 0b0011'1111) | 0b1000'0000) as uint8;
		return [buffer, 2u];
	}
	else if (c < utf8_max_three_byte_char)
	{
		buffer[0] = (((c as uint32 >> 12u) & 0b0000'1111) | 0b1110'0000) as uint8;
		buffer[1] = (((c as uint32 >>  6u) & 0b0011'1111) | 0b1000'0000) as uint8;
		buffer[2] = (((c as uint32 >>  0u) & 0b0011'1111) | 0b1000'0000) as uint8;
		return [buffer, 3u];
	}
	else
	{
		buffer[0] = (((c as uint32 >> 18u) & 0b0000'0111) | 0b1111'0000) as uint8;
		buffer[1] = (((c as uint32 >> 12u) & 0b0011'1111) | 0b1000'0000) as uint8;
		buffer[2] = (((c as uint32 >>  6u) & 0b0011'1111) | 0b1000'0000) as uint8;
		buffer[3] = (((c as uint32 >>  0u) & 0b0011'1111) | 0b1000'0000) as uint8;
		return [buffer, 4u];
	}
}

export function decode_char_utf8(data: *uint8, end: *uint8) -> [char, *uint8]
{
	const max_size = end - data;
	if (max_size == 0)
	{
		return [ '\x00', data ];
	}
	const first_byte = *data;
	if (first_byte < utf8_max_one_byte_char as uint32 as uint8)
	{
		return [ first_byte as uint32 as char, data + 1 ];
	}
	else if (max_size >= 2 && (first_byte & 0b1110'0000u8) == 0b1100'0000u8)
	{
		const bytes = [ first_byte, *(data + 1) ];
		if ((bytes[1] & 0b1100'0000u8) != 0b1000'0000u8)
		{
			return [ '\x00', data ];
		}
		const result_int_val = ((bytes[0] & 0b0001'1111u8) as uint32 << 6u)
			| ((bytes[1] & 0b0011'1111u8) as uint32 <<  0u);
		return [ result_int_val as char, data + 2];
	}
	else if (max_size >= 3 && (first_byte & 0b1111'0000u8) == 0b1110'0000u8)
	{
		const bytes = [ first_byte, *(data + 1), *(data + 2) ];
		if (
			(bytes[1] & 0b1100'0000u8) != 0b1000'0000u8
			|| (bytes[2] & 0b1100'0000u8) != 0b1000'0000u8
		)
		{
			return [ '\x00', data ];
		}
		const result_int_val = ((bytes[0] & 0b0000'1111u8) as uint32 << 12u)
			| ((bytes[1] & 0b0011'1111u8) as uint32 <<  6u)
			| ((bytes[2] & 0b0011'1111u8) as uint32 <<  0u);
		return [ result_int_val as char, data + 3];
	}
	else if (max_size >= 4 && (first_byte & 0b1111'1000u8) == 0b1111'0000u8)
	{
		const bytes = [ first_byte, *(data + 1), *(data + 2), *(data + 3) ];
		if (
			(bytes[1] & 0b1100'0000u8) != 0b1000'0000u8
			|| (bytes[2] & 0b1100'0000u8) != 0b1000'0000u8
			|| (bytes[3] & 0b1100'0000u8) != 0b1000'0000u8
		)
		{
			return [ '\x00', data ];
		}
		const result_int_val = ((bytes[0] & 0b0000'0111u8) as uint32 << 18u)
			| ((bytes[1] & 0b0011'1111u8) as uint32 << 12u)
			| ((bytes[2] & 0b0011'1111u8) as uint32 <<  6u)
			| ((bytes[3] & 0b0011'1111u8) as uint32 <<  0u);
		return [ result_int_val as char, data + 4];
	}
	else
	{
		return [ '\x00', data ];
	}
}
