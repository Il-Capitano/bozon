function move_func(: move int32);

struct generic_type_t<T: typename>
{
	.value: T;
}

struct generic_value_t<N: usize>
{
	.value: [N: int32];
}

enum E
{
	a, b, c
}

function test()
{
	let i: int32 = 0;
	let mi: mut int32 = 0;

	let ri: &int32 = i;
	let rmi: &mut int32 = mi;

	mut pi: *int32 = &i;
	mut pmi: *mut int32 = &mi;
	mut ppi: **int32 = &pi;
	mut ppmi: **mut int32 = &pmi;
	mut pmpi: *mut *int32 = &pi;
	mut pmpmi: *mut *mut int32 = &pmi;


	// lvalue reference
	let _: &int32 = i;
	let _: &int32 = mi;
	let _: &mut int32 = mi;
	let _: &int32 = ri;
	let _: &int32 = rmi;
	let _: &mut int32 = rmi;
	let _: &*int32 = pmi;
	let _: &*mut int32 = pmi;
	let _: &mut *mut int32 = pmi;

	// move reference
	move_func(0i32);
	mut j = 0i32;
	move_func(move j);
	let j = 0i32;
	move_func(move j);

	// auto reference
	let _: #int32 = i;
	static_assert(typeof _ == &int32);
	let _: #int32 = mi;
	static_assert(typeof _ == &int32);
	let _: #mut int32 = mi;
	static_assert(typeof _ == &mut int32);

	let _: #int32 = 0;
	static_assert(typeof _ == int32);
	let _: #mut int32 = 0;
	static_assert(typeof _ == mut int32);

	let _: #int32 = 0i8;
	static_assert(typeof _ == int32);
	let _: #mut int32 = 0i8;
	static_assert(typeof _ == mut int32);

	let j = 0;
	let _: #int32 = move j;
	static_assert(typeof _ == int32);
	let j = 0;
	let _: #mut int32 = move j;
	static_assert(typeof _ == mut int32);

	// auto reference-mut
	let _: ##int32 = i;
	static_assert(typeof _ == &int32);
	let _: ##int32 = mi;
	static_assert(typeof _ == &mut int32);

	let _: ##int32 = 0;
	static_assert(typeof _ == int32);

	let _: ##int32 = 0i8;
	static_assert(typeof _ == int32);

	let j = 0;
	let _: ##int32 = move j;
	static_assert(typeof _ == int32);
	mut j = 0;
	let _: ##int32 = move j;
	static_assert(typeof _ == int32);

	// auto
	let _: auto = 0i32;
	static_assert(typeof _ == int32);
	let _: auto = 'a';
	static_assert(typeof _ == char);
	let _: auto = [int32, float64, str, char]();
	static_assert(typeof _ == [int32, float64, str, char]);
	let _: auto = [5: char]();
	static_assert(typeof _ == [5: char]);

	// generic base type deduction
	let _: generic_type_t = generic_type_t<int32>();
	static_assert(typeof _ == generic_type_t<int32>);
	let _: generic_type_t = generic_type_t<float64>();
	static_assert(typeof _ == generic_type_t<float64>);
	let _: generic_type_t = generic_type_t<str>();
	static_assert(typeof _ == generic_type_t<str>);
	let _: generic_type_t = generic_type_t<[int32, char]>();
	static_assert(typeof _ == generic_type_t<[int32, char]>);

	let _: generic_value_t = generic_value_t<10>();
	static_assert(typeof _ == generic_value_t<10>);
	let _: generic_value_t = generic_value_t<1000>();
	static_assert(typeof _ == generic_value_t<1000>);

	// pointer
	let _: *void = pmi;
	let _: *void = pi;
	let _: *void = pmpmi;
	let _: *void = pmpi;
	let _: *void = ppmi;
	let _: *void = ppi;
	let _: *void = *pmpmi;
	let _: *void = *pmpi;
	let _: *void = *ppmi;
	let _: *void = *ppi;
	let _: *mut void = pmi;
	let _: *mut void = pmpmi;
	let _: *mut void = pmpi;
	let _: *mut void = *pmpmi;
	let _: *mut void = *ppmi;
	let _: *int32 = pmi;
	let _: *int32 = pi;
	let _: *int32 = *ppmi;
	let _: *int32 = *pmpmi;
	let _: *int32 = *ppi;
	let _: *mut int32 = pmi;
	let _: *mut int32 = *pmpmi;
	let _: *mut int32 = *ppmi;
	let _: *mut *int32 = pmpi;
	let _: **mut int32 = pmpmi;
	let _: **mut int32 = ppmi;
	let _: **int32 = pmpmi;
	let _: **int32 = pmpi;
	let _: **int32 = ppmi;
	let _: **int32 = ppi;

	// slice
	let _: [: int32] = [: int32]();
	let _: [: int32] = [: mut int32]();
	let _: [: mut int32] = [: mut int32]();
	let _: [: mut *mut int32] = [: mut *mut int32]();
	let _: [: mut *int32] = [: mut *int32]();
	let _: [: *int32] = [: mut *int32]();
	let _: [: *int32] = [: mut *mut int32]();

	// array
	let _: [4: int32] = [4: int32]();
	let _: [??: int32] = [3: int32]();
	static_assert(typeof _ == [3: int32]);

	// tuple
	let _: [int32, float64, str] = [int32, float64, str]();
	let _: [int32, float64, ...str] = [int32, float64, str]();
	let _: [int32, float64, ...str] = [int32, float64]();
	let _: [int32, float64, ...str] = [int32, float64, str, str]();

	// array to slice
	mut arr = [4: int32]();
	let carr = [4: int32]();
	mut parr: [4: *mut int32] = [ &arr[0], &arr[1], &arr[2], &arr[3] ];
	let _: [: mut int32] = arr;
	let _: [: int32] = arr;
	let _: [: int32] = carr;
	let _: [: *mut int32] = parr;
	let _: [: *int32] = parr;

	// equal types
	let _: int32 = 0i32;
	let _: int64 = 0i64;
	let _: uint16 = 0u16;
	let _: generic_value_t<3> = generic_value_t<3>();

	// implicit conversions
	let _: int8 = 0;
	let _: uint8 = 0;
	let _: int64 = 0i16;
	let _: uint64 = 0u32;
	let _: ?int32 = null;
	let _: ?*int32 = null;

	let _: E = .a;
	let _: E = .b;
	let _: E = .c;
	let _: mut E = .a;
}
