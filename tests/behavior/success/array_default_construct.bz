import resource;
import counting_resource;

struct S
{
	.i: int32;
	.j: usize;
	.x: float32;
	.y: float64;
	.a: [20: uint32];
	.s: str;
}

struct complex_S
{
	.r0: resource_t;
	.r1: complex_resource_t;
	.cr0: relocatable_counting_resource_t;
	.cr1: counting_resource_t;
}

function main()
{
	{
		let a = [1: int32]();
		for (let &v in a)
		{
			if (v != int32()) unreachable;
		}
		let a = [10: int32]();
		for (let &v in a)
		{
			if (v != int32()) unreachable;
		}
		let a = [100: int32]();
		for (let &v in a)
		{
			if (v != int32()) unreachable;
		}
	}

	{
		let a = [1: float64]();
		for (let &v in a)
		{
			if (v != float64()) unreachable;
		}
		let a = [10: float64]();
		for (let &v in a)
		{
			if (v != float64()) unreachable;
		}
		let a = [100: float64]();
		for (let &v in a)
		{
			if (v != float64()) unreachable;
		}
	}

	{
		let a = [1: str]();
		for (let &v in a)
		{
			if (v != str()) unreachable;
		}
		let a = [10: str]();
		for (let &v in a)
		{
			if (v != str()) unreachable;
		}
		let a = [100: str]();
		for (let &v in a)
		{
			if (v != str()) unreachable;
		}
	}

	{
		let _ = [1: resource_t]();
		let _ = [10: resource_t]();
		let _ = [100: resource_t]();
		let _ = [1: complex_resource_t]();
		let _ = [10: complex_resource_t]();
		let _ = [100: complex_resource_t]();
		let _ = [1: relocatable_counting_resource_t]();
		let _ = [10: relocatable_counting_resource_t]();
		let _ = [100: relocatable_counting_resource_t]();
		let _ = [1: counting_resource_t]();
		let _ = [10: counting_resource_t]();
		let _ = [100: counting_resource_t]();
		let _ = [1: [resource_t, complex_resource_t, relocatable_counting_resource_t, counting_resource_t]]();
		let _ = [10: [resource_t, complex_resource_t, relocatable_counting_resource_t, counting_resource_t]]();
		let _ = [100: [resource_t, complex_resource_t, relocatable_counting_resource_t, counting_resource_t]]();
	}

	{
		let _ = [10, 10: resource_t]();
		let _ = [10, 10: complex_resource_t]();
		let _ = [10, 10: relocatable_counting_resource_t]();
		let _ = [10, 10: counting_resource_t]();
		let _ = [10, 10: [resource_t, complex_resource_t, relocatable_counting_resource_t, counting_resource_t]]();
	}

	{
		[1: S]();
		[10: S]();
		[100: S]();
		let a = [1: S]();
		for (let &s in a)
		{
			if (s.i != int32()) unreachable;
			if (s.j != usize()) unreachable;
			if (s.x != float32()) unreachable;
			if (s.y != float64()) unreachable;
			if (s.a != [20: uint32]()) unreachable;
			if (s.s != str()) unreachable;
		}
		let a = [10: S]();
		for (let &s in a)
		{
			if (s.i != int32()) unreachable;
			if (s.j != usize()) unreachable;
			if (s.x != float32()) unreachable;
			if (s.y != float64()) unreachable;
			if (s.a != [20: uint32]()) unreachable;
			if (s.s != str()) unreachable;
		}
		let a = [100: S]();
		for (let &s in a)
		{
			if (s.i != int32()) unreachable;
			if (s.j != usize()) unreachable;
			if (s.x != float32()) unreachable;
			if (s.y != float64()) unreachable;
			if (s.a != [20: uint32]()) unreachable;
			if (s.s != str()) unreachable;
		}

		[1: complex_S]();
		[10: complex_S]();
		[100: complex_S]();
		let _ = [1: complex_S]();
		let _ = [10: complex_S]();
		let _ = [100: complex_S]();
	}

	if (!counting_resource_is_valid()) unreachable;
	if (!relocatable_counting_resource_is_valid()) unreachable;
}
