// static_assert(((-((127i8 + 1i8)))));
// static_assert('\U0010ffff' + 1);
// static_assert(-127i8 - 1i8 - 1i8);
// static_assert('\x00' - 1);
// static_assert((100i8 * 100i8) == 16i8);
// static_assert((-127i8 - 1i8) / -1i8);
// static_assert(123 / 0);
// static_assert(null == null);
// static_assert(((0.0f32 / 0.0f32)) as float64);
// static_assert(1i8 + 3i8 + 12 + 1i8);
// static_assert([1, 2, 3][0] == 1);
static_assert((3u << 31u64 == 2147483648u, false, true));
// static_assert(false);
static_assert(exp(-1.0f32) as float64 == (1.0f32 / exp(1.0f32)) as float64);

import print;
import math;

@symbol_name("asdf")
export function hello()
{
	println("Hello!");
}

// /*
function main() -> int32
{
	hello();

	let arr: [10: float32];
	print(arr[9]);

	return exp(1.0) as int32;
}
// */


@symbol_name("__bozon_builtin_str_eq")
export function __bozon_builtin_str_eq(lhs: str, rhs: str) -> bool
{
	return false;
}

@symbol_name("__bozon_builtin_str_neq")
export function __bozon_builtin_str_neq(lhs: str, rhs: str) -> bool
{
	return !__bozon_builtin_str_eq(lhs, rhs);
}
