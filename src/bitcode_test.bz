@extern("print")             function print(str: str)        -> void;
@extern("print_char")        function print(c: char)         -> void;
@extern("print_int32")       function print(n: int32)        -> void;
@extern("print_int64")       function print(n: int64)        -> void;
@extern("print_uint32")      function print(n: uint32)       -> void;
@extern("print_uint64")      function print(n: uint64)       -> void;
@extern("print_int32_ptr")   function print(p: *const int32) -> void;
@extern("print_float32")     function print(x: float32)      -> void;
@extern("print_float64")     function print(x: float64)      -> void;
@extern("print_bool")        function print(b: bool)         -> void;

@extern("println")           function println(str: str)        -> void;
@extern("println_char")      function println(c: char)         -> void;
@extern("println_int32")     function println(n: int32)        -> void;
@extern("println_int64")     function println(n: int64)        -> void;
@extern("println_uint32")    function println(n: uint32)       -> void;
@extern("println_uint64")    function println(n: uint64)       -> void;
@extern("println_int32_ptr") function println(p: *const int32) -> void;
@extern("println_float32")   function println(x: float32)      -> void;
@extern("println_float64")   function println(x: float64)      -> void;
@extern("println_bool")      function println(b: bool)         -> void;

@extern("exit")              function exit(code: int32)        -> void;


//	/*
function assert(b: bool) -> void
{
	if (!b)
	{
		println("\x1b[91massertion failed!\x1b[0m");
		exit(1);
	}
}

function factorial(n: int32) -> typeof n
{
	let res: typeof n = 1;
	for (let i: typeof n = 2; i <= n; ++i)
	{
		res *= i;
	}
	return res;
}

function factorial_recursive(n: int32) -> int32
{
	if (n <= 1)
	{
		return 1;
	}
	else
	{
		return n * factorial_recursive(n - 1);
	}
}

function main() -> int32
{
	println("");
	println("hello");
	println(123);
	println(factorial(5));
	println("hello again!!!!\nand on a new line\n");

	foo();

	let good = true;
	let i = 0;
	while (i < 20)
	{
		if (factorial(i) != factorial_recursive(i))
		{
			good = false;
		}
		i += 1;
	}

	if (good)
	{
		println("factorial is good!!");
	}
	else
	{
		println("factorial is not good :(");
	}

	let n = 2;
	println(n);
	set_to_zero(n);
	println(n);
	assert(n == 0);

	println("\n==== ref_test ====");
	ref_test();

	println("\n==== cast_test ====");
	cast_test();

	const c = 'д';
	print('\n');
	println(c as uint32);
	print(c);
	print(1076u32 as char);
	print('\n');
	print('\u0470');
	print('\u0471');
	print('\u04c1');
	print('\U000004c1');
	print('\n');
	print('h');

	assert('\u0470' == 'Ѱ');
	assert('\U00000470' == 'Ѱ');
	assert('ѱ' - 1 == 'Ѱ');
	assert('Ѱ' as uint32 == 0x470);
//	"a" "b";

	println("\n=== \x41 ===");
//	+'b';

	println("\n==== const_expr_test ====");
	const_expr_test();

	println("\n==== scope_test ====");
	scope_test();

	println("\n==== christmas_tree ====");
	christmas_tree(4);

	println("\n==== for_test ====");
	for_test();

	println("\n==== array_test ====");
	array_test();

	return 0;
/*
	let bool: bool = false;
	while (bool)
	{
		bool = false;
	}
	print("hello");
	let n: int32 = 0;
	change_val(n);
	let str = "hello";
	let str2 = "hello"; /* nested comment */
	return factorial(1);
*/
}

function set_to_zero(n: &int32) -> void
{
	n = 0;
}

function foo() -> void
{
	let i8 = 0i8;
	let i16 = 0i16;
	let i32 = 0i32;
	let i64 = 0i64;
	let u8 = 0u8;
	let u16 = 0u16;
	let u32 = 0u32;
	let u64 = 0u64;

	i8 == i8;
//	i8 == u8;
	i8 == i16;
	u8 == u64;
	u8 < u64;

	u16 -= u8;
	let p = &i8;
	p -= u64;

	u16 /= u8;
	i16 /= i8;

	i32 = -5;
	i8 = 2i8;
	i32 /= i8;
	print(i32);

	i32 = 1234;
	i16 = 111i16;
	i32 %= i16;
	println(i32);
	println(1234 / 111);
	println(11 * 111 + 13);

	let a = 'a';
	let b = 'c' + -1i8;

	if (a == 'a')
		println("a == 'a'");
	else
		println("a != 'a'");

	if (
		'a' + 1 == 'b'
		&& 'c' + -1 == 'b'
		&& 'c' + -1i8 == 'b'
		&& 'c' - 1 == 'b'
		&& 'a' - -1 == 'b'
		&& 'a' - -1i8 == 'b'
	)
		println("b == 'b'");
	else
		println("b != 'b'");

	const a = 1.0 * 0.5;
	if (a == 0.5)
	{
		println("yay");
	}

	let n = 0xffu32;
	const mask = 0x46u32;
	n &= mask;
	if (n == mask)
		println("yay!!");

	let n = 1;
	let m = 0;
	(n = m = 2) = m;
	if (n == 0 && m == 2)
		println("yay again!");

	let n = 1u32;
	n <<= 3u8;
	println(n);
	n >>= 1u8;
	println(n);
	let m = 5u32;
	n += m = 2u32;
	if (n == 6u32)
	{
		println("yay yet again!");
	}
}

function ref_test() -> void
{
	function change_n(n: &int32) -> void
	{
		n = 1234;
	}
	let n = 0;
	println(n);
	change_n(n);
	println(n);
	assert(n == 1234);

	function foo(n: int32) -> void { println(&n); }
	function foo_ref(n: &const int32) -> void { println(&n); }

	println(&n);
	foo(n);
	foo_ref(n);
	println("first and third pointers should be the same");

	let &m = n;
	assert(&m == &n);
	println(&m);
	foo(m);
	foo_ref(m);
	println("first and third pointers should be the same");

//	asdfasdf([0, 1, 2, 3, 4, 5]);
}

function cast_test() -> void
{
	const f32 = 1.5f32;
//	println(f32);
	println(f32 as float64);
	println(f32 as int32);
	println('A' as uint32);
	println(' ' as uint32);

	function ref_wrapper(n: &int32) -> &int32
	{ return n; }

	let n = 0;

	println(n);
	ref_wrapper(n) = 3;
	println(n);

//	let v: vec2;
}

// function asdfasdf(t: [int32, int32, int32, int32, int32, int32]) -> void;

function const_expr_test() -> void
{
	const n = 9'223'372'036'854'775'807; // int64
	static_assert(typeof n == const int64);
	const n = 9'223'372'036'854'775'808; // uint64
	static_assert(typeof n == const uint64);

//	-(-9'223'372'036'854'775'807i64 - 1);

	assert(9'223'372'036'854'775'808 == 1u64 << 63u);
	assert(((9'223'372'036'854'775'808 as uint32)) == 0u);

	let a = false || false;
	const FALSE: bool = false;
	let b = false && FALSE;
	let c = true || FALSE;

	const p = null as *int32;
	assert(p == null);

	const *const p = &n;
	assert(p != null);

//	*(null as *int32) = 2;
	println("hello" " again" ", and again!");
}

function scope_test() -> void
{
	function foo() -> void { println("foo1"); }

	{
		function foo() -> void { println("foo2"); }
//		const f = foo;
		foo();
	}

//	const f = foo;

	foo();

	function foo(n: const int32) -> void { println("foo(n: const int32)"); }
	const n = 0;

	{
		function foo(n: &const int32) -> void { println("foo(n: &const int32)"); }
		foo(n);
		foo(3);
	}

	foo(n);

	function ambiguous_test_in_scope() -> void { println("test1"); }

	const f = ambiguous_test_in_scope;
	{
		function ambiguous_test_in_scope() -> void { println("test2"); }
//		const f = ambiguous_test_in_scope;
		ambiguous_test_in_scope();
	}
	const f = ambiguous_test_in_scope;

	let n = 40 + 2;

	let n = 0 - -2147483648;
//	255 / 0;
//	n / 0;
//	n /= 0;
//	n % 0;
//	n %= 0;

	let u32 = 0u;
//	u32 % 0u32 + 3u8;
//	((u32 % 0u32)) * 3u32;
	1u + ((u32 * 1u % 0u));
	((u32 * 1u % 0u)) + 1u;

	const n = 1u64;
	((n << 99u));
	const num = 65;
	println(num as char);
	println('A' as int32);
//	-1 as char;

//	1u << 99u;

//	-1.0 / 0.0;
	((1.0 / 0.0)) + 3.0;

	const f = 1.0;
	((f / 0.0)) + 1.0;

	((-1 as uint64));

	let p: *int32;
	p = null;

	((-((1i8 + 127i8))));

//	-1 as uint64;

	let f: float64;
//	f = 3;
//	u32 = 1.0;
	f = 1.0;
//	f = 1.0f32;

	let b: bool;
	b = false;
//	b = 3;

	const f32 = 1.23464234 as typeof 1.0f32;
	const f32: typeof f32 = 0.0f32;

	println((0x8000'0000 as int32));

	println(multiply(123i64, 123i8));
	println(123 * 123);
	assert(multiply(123i64, 123i8) == 123 * 123);

//	const t = int32;
}

function square(n: int32) -> typeof (n * n)
{
	return n * n;
}

function multiply(a: int64, b: int8) -> typeof (a * b) { return a * b; }

function christmas_tree(height: int32) -> void
{
	for (let i = 0; i < height; ++i)
	{
		const spaces = height - 1 - i;
		const stars = 2 * i;

		for (let j = 0; j < spaces; ++j)
		{
			print(' ');
		}
		print('/');
		for (let j = 0; j < stars; ++j)
		{
			print('*');
		}
		print('\\');

		print('\n');
	}

	for (let i = 0; i < height - 1; ++i)
	{
		print(' ');
	}
	print("||\n");
}

function for_test() -> void
{
	for (let i = 0; i < 10; ++i)
	{
		print(i);
		print(' ');
	}
//	print(i);
	print('\n');

	let i: int32;
	for (i = 0; i < 10; ++i)
	{
		print(i);
		print(' ');
	}
	print(i);
	print('\n');

	let i: int32;
	let j: int32;
	for (i = j = 0; i < 10; ++i, j += 2)
	{
		print('('), print(i), print(", "), print(j), print(')');
		print(' ');
	}
	print('\n');

	let i = 0;
	for (; i < 10; ++i)
	{
		print(i), print(' ');
	}
	print('\n');

	function infinite_loop() -> void
	{
		println("entered infinite_loop");
		let i = 0;
		for (;; ++i)
		{
			if (i == 10)
			{
				println("\nexiting infinite_loop");
				return;
			}
			print(i), print(' ');
		}
		print('\n');
	}

	infinite_loop();

	static_assert((((0x8000'0000 - 1u) as int32 + 1)) < 0);
//	const int32_max = (0x8000'0000 - 1u) as int32;
//	println(int32_max);
//	const int32_max = (~1u >> 1u) as int32;
//	println(int32_max);

	for (let i = 0; i <= 10; ++i)
	{
		print(i);
		static_assert('\r' == '\x0d');
		print('\r');
	}
	print('\n');

	function is_prime(n: int32) -> bool
	{
		if (n <= 1)
		{
			return false;
		}

		for (let i = 2; i <= n / 2; ++i)
		{
			if (n % i == 0)
			{
				return false;
			}
		}
		return true;
	}

//	0 + 4, 1;

	for (let i = 0; i < 1'000; ++i)
	{
		if (is_prime(i))
		{
			print(i), print(",");
		}
	}
	print('\n');

	consteval inf = ((1.0 / 0.0));
	println(inf);
	println(((inf - inf)) + 1.0);
}

// static_assert(false);

function declaration_leak() -> void
{
	for (let i = 0; i < 10; ++i);
//	i;
}

function static_assert_test() -> void
{
//	static_assert(false);
//	static_assert(0);
//	static_assert(true, 0);
	static_assert('A' as int32 == 65);
	static_assert('A' - 'a' == -32);
	static_assert('a' - 'A' == 32);
	static_assert('\u1234' as uint32 == 0x1234);
//	static_assert(0.1 + 0.2 == 0.4);
	static_assert(((127i8 + 1i8)) == -128 as int8);
	static_assert(((-1 as uint64)) == 18446744073709551615);
	static_assert(((-1 as uint64)) == ~0u64);

	consteval int64_max = (~0u64 >> 1u) as int64;
	consteval int64_min = (((~0u64 >> 1u) as int64 + 1));
	static_assert(int64_max > 0);
	static_assert(int64_min < 0);
	static_assert(((int64_min - 1)) == int64_max);

	consteval uint64_max = ((-1 as uint64));
	static_assert(((uint64_max + 1u)) == 0u);
	static_assert(int64_max as uint64 * 2u + 1u == uint64_max);

	consteval c = '\ud7ff';
//	c + 1;

	consteval s = "Hello!";
	static_assert(s != "Hello!!");

	let n = null;
	let i: int32;
	let p: *int32;
//	const p: *int32;
//	let ref: &int32;
	consteval p: *int32 = null;
	static_assert(p == null);

	let &i_ref = i;
//	let i_ref_: typeof i_ref;
	let i_ref_: typeof *&i_ref;

	static_assert(const int32 == const const int32);
	static_assert(&int32 == & &int32);
	static_assert(typeof int64_max == const int64);
	static_assert(typeof int64_max != consteval int64);

	static_assert(typeof static_assert_test() == void);
	static_assert(consteval [10: int32] == consteval [10: int32]);
}

function array_test() -> void
{
	let arr: [10: int32];

	print("arr[0] = "), println(arr[0]);
	arr[0] = 3;
	print("arr[0] = "), println(arr[0]);

	let multi_d_array: [4, 4: float64];
	print("multi_d_array[0, 0] = "), println(multi_d_array[0, 0]);
	multi_d_array[0, 0] = 123.0;
	print("multi_d_array[0, 0] = "), println(multi_d_array[0, 0]);
	multi_d_array[0][0] = 246.0;
	print("multi_d_array[0][0] = "), println(multi_d_array[0][0]);
//	multi_d_array[0, 4] = 246.0;

	for (let i = 0; i < 4; ++i)
	{
		let &arr = multi_d_array[i];
		for (let j = 0; j < 4; ++j)
		{
			arr[j] = ((i + 1) * (j + 1)) as float64;
		}
	}

	@maybe_unused
	const arr = arr;

//	let arr: [10:];

	print_matrix(multi_d_array);
	for (
		let val = &multi_d_array[0, 0];
		val <= &multi_d_array[3, 3];
		++val
	)
	{
		*val += 0.5;
	}
	println("====");
	print_matrix(multi_d_array);

	static_assert(typeof null == __null_t);

//	consteval T = int32;

//	let arr: [10: consteval int32];

	const matrix = {
		let result: [4, 4: float64];
		for (let i = 0; i < 4; ++i)
		{
			for (let j = 0; j < 4; ++j)
			{
				result[i, j] = (i * 4 + j) as float64 + 0.33;
			}
		}
		result
	};
	print_matrix(matrix);
}

function print_matrix(arr: [4, 4: float64]) -> void
{
	print("[");
	for (let i = 0; i < 4; ++i)
	{
		print(if (i == 0) "[ " else " [ ");

		for (let j = 0; j < 4; ++j)
		{
			print(arr[i, j]), print(' ');
		}
		print(if (i == 3) "]" else "]\n");
	}
	print("]\n");
}
//	*/

// function circle1() -> typeof circle5() {}
// function circle2() -> typeof circle1() {}
// function circle3() -> typeof circle2() {}
// function circle4() -> typeof circle3() {}
// function circle5() -> typeof circle4() {}
