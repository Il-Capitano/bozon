import std;
import std::libc;
import private_member_test as private::member::test;

function factorial(n: auto) -> typeof n
{
	mut res = 1 as typeof n;
	for (mut i = 2 as typeof n; i <= n; ++i)
	{
		res *= i;
	}
	return res;
}

function factorial_recursive(n: auto) -> typeof n
{
	if (n <= 1)
	{
		return 1;
	}
	else
	{
		return n * factorial_recursive(n - 1);
	}
}

function sum_array(arr: #[??: auto]) -> int32
{
	mut result = 0;
	for (let val in arr)
	{
		result += val;
	}
	return result;
}

mut global = [3, "hello"];
// let global = [3i64, 23.234];
consteval c = 5;
static_assert(c == 5);

type asdf0 = int32;
type asdf = mut asdf0;
static_assert(asdf == mut int32);
static_assert(0.1 + 0.2 != 0.3);

static_assert(std::meta::is_tuple([int32, str]));
static_assert(std::meta::tuple_value_type([int32, str], 0) == int32);
static_assert(std::meta::tuple_value_type([int32, str], 1) == str);
static_assert(std::meta::concat_tuple_types([int32, str], [float64]) == [int32, str, float64]);

struct foo_t
{
	.n: int32;
	.s: str;

	constructor()
	{
		return foo_t[ 1, "default" ];
	}

	constructor(n: int32, s: str)
	{
		return foo_t[ n, s ];
	}

	consteval inner_var = 0;
	type asdf = int32;

	struct inner_t<T: typename>
	{
		.inner_n: int32;
		.inner_s: str;
	}

	function foo() {}
	function foo(: int32) {}
}

function main(args: [: str]) -> int32
{
	let arr: [??: int32] = [ 0, 1 ];
	sum_array(arr);

	sum_array([ 0, 1, 2, 3, 4 ]);

	let arr = __builtin_create_initialized_array([10: int32], 3);
	static_assert(typeof arr == [10: int32]);
	let arr = __builtin_create_initialized_array([10, 10: int32], __builtin_create_initialized_array([10: int32], 5));
	static_assert(typeof arr == [10, 10: int32]);
	let arr = __builtin_create_initialized_array([30: int32], 7);
	static_assert(typeof arr == [30: int32]);
	let arr = __builtin_create_initialized_array([30, 30: int32], __builtin_create_initialized_array([30: int32], 9));
	static_assert(typeof arr == [30, 30: int32]);

	consteval arr = __builtin_create_initialized_array([30: int32], 7);
	static_assert(typeof arr == [30: int32]);
	static_assert(arr[5] == 7);

	static_assert(typeof foo_t.inner_var == int32);
	static_assert(foo_t.inner_var == 0);
	static_assert(foo_t.asdf == int32);
	consteval val = (foo_t.inner_t<foo_t.inner_t<int32> >)();
	static_assert(val.inner_n == 0 && val.inner_s == "");

	let slice = [: int32]();
	let _ = slice.size();

	(consteval {
		let res = (foo_t.inner_t<foo_t>)();
		res
	});

	(foo_t.foo)();
	(foo_t.foo)(3);
	// (foo_t.foo)(3, 4);

	consteval t = [int32, float64, [str]]();
	static_assert(typeof t == [int32, float64, [str]]);
	static_assert(t[0] == 0 && t[1] == 0.0 && t[2, 0] == "");
	let arr = [17, 17: foo_t]();
	for (let &val in arr[0])
	{
		std::assert(val.n == 1);
		std::assert(val.s == "default");
	}
	// foo_t();
	(consteval {
		let p = std::meta::malloc(int32, 1);
		std::meta::free(p);
		// std::meta::free(p);
	});
	@maybe_unused
	let n = ((usize(-1)));
	consteval s = {
		let s = std::string("Hello");
		std::meta::create_global_string(s.as_str())
	};
	static_assert(s == "Hello");

	// let i: void;
	std::print("{} => ", global);
	global[0] = 5;
	std::print("{}\n", global);
	// c = 3;
	for (let arg in args)
	{
		std::print("{}\n", arg);
		// std::println(arg.length());
		// std::println(arg.size());
	}

	consteval n = {
		let val = 0x1100;
		std::popcount(val)
	};
	static_assert(n == 2u);

	std::print("hello\n");

	// (consteval std::print("hello {}!\n", "world"));

	let n = 3;
	switch (n)
	{
		0, 1, 2 => std::print(" < 3\n"),
		else => std::print("something else\n")
	}

	let b = false;
	switch (b)
	{
		true  => std::print("true\n"),
		false => std::print("false\n")
	}

	@maybe_unused
	let m = switch (n) {
		1, 2, 3 => 2u32,
		else => 0u
	};

	consteval m = switch (factorial(3)) {
		1, 2, 3 => 0,
		4, 5, 6 => 1,
		else => unreachable
	};
	static_assert(typeof m == int32);
	static_assert(m == 1);

	@maybe_unused
	let &a = switch (n) {
		0, 1, 2 => m,
		else => n
	};

	@maybe_unused
	consteval n = switch (3u8) {
		0, 1, 2u, 3, 0x4 => 3,
		else => unreachable
	};

	let t = [ 2, "hello" ];
	@maybe_unused let t2 = if (false) { t } else { [ 3, "world" ] };
	@maybe_unused let t2 = (if (false) { t } else [ 3, "world" ]);

	std::print("""hello "raw string"\jasdf \\\""" "\"\"\"" """ <- this was a the end of a "raw string""" "\"\n");

	consteval pointer_size = sizeof *void;
	static_assert(pointer_size == 8 || pointer_size == 4);
	consteval tuple_size = sizeof [int32, int64];
	static_assert(tuple_size == 16u);
	static_assert(sizeof "" == 2 * pointer_size);
	static_assert(usize == uint64 || usize == uint32);

	mut arr: [12: int32];
	@maybe_unused consteval n = arr.size();
	static_assert((std::assert(true), true));

	std::print("\n");
	std::print("hello\n");
	std::print("{}\n", 123);
	std::print("{}\n", 123i8);
	std::print("{}\n", factorial(5));
	std::print("hello again!!!!\nand on a new line\n");

	foo();

	consteval i = factorial(3);
	static_assert(i == 6);
	static_assert(factorial_recursive(10) == 3628800);
	static_assert(factorial_recursive(1) == 1);
	static_assert(factorial(10) == 3628800);
	static_assert((std::assert(true), true));
	static_assert({ std::assert(true); true });
	static_assert(switch (3) { 3 => true, else => false });

	static_assert({
		if (factorial(3) == 7)
		{
			return 0;
		}
		true
	});
	static_assert({
		mut arr: [3: int32];
		for (mut i = 0u; i < arr.size(); ++i)
		{
			arr[i] = 3;
		}
		arr[0] == 3
	});


	let m = 4;
	consteval n = 5;
	static_assert({
		let res = factorial(n);
		res == factorial(5)
	});

	let #r = m;
	static_assert(typeof r == &int32);
	let #r = 4;
	static_assert(typeof r == int32);
	let ##r = m;
	static_assert(typeof r == &int32);
	let ##r = 8;
	static_assert(typeof r == int32);

	consteval fact6 = {
		mut result = 1;
		let count = 6;
		for (mut i = 1; i <= count; ++i)
		{
			result *= i;
		}
		result
	};
	static_assert(fact6 == factorial(6));

	mut good = true;
	for (mut i = 0; i < 20; ++i)
	{
		if (factorial(i) != factorial_recursive(i))
		{
			good = false;
		}
	}

	if (good)
	{
		std::print("factorial is good!!\n");
	}
	else
	{
		std::print("factorial is not good :(\n");
	}

	mut n = 2;
	std::print("{}\n", n);
	set_to_zero(n);
	std::print("{}\n", n);
	std::assert(n == 0);

	std::print("\n==== ref_test ====\n");
	ref_test();

	std::print("\n==== cast_test ====\n");
	cast_test();

	let c = 'д';
	std::print("\n");
	std::print("{}\n", c as uint32);
	std::print("{}", c);
	std::print("{}", 1076 as char);
	std::print("{}", '\n');
	std::print("{}", '\u0470');
	std::print("{}", '\u0471');
	std::print("{}", '\u04c1');
	std::print("{}", '\U000004c1');
	std::print("{}", '\n');
	std::print("{}", 'h');

	static_assert('\u0470' == 'Ѱ');
	static_assert('\U00000470' == 'Ѱ');
	static_assert('ѱ' - 1 == 'Ѱ');
	static_assert('Ѱ' as uint32 == 0x470);
	"a" "b";

	std::print("\n=== \x41 ===\n");
	// +'b';

	std::print("\n==== const_expr_test ====\n");
	const_expr_test();

	std::print("\n==== scope_test ====\n");
	scope_test();

	std::print("\n==== christmas_tree ====\n");
	christmas_tree(4);

	std::print("\n==== for_test ====\n");
	for_test();

	std::print("\n==== array_test ====\n");
	array_test();

	std::print("\n==== tuple_test ====\n");
	tuple_test();

	std::print("\n==== str_pointer_test ====\n");
	str_pointer_test();

	std::print("\n==== generic_test ====\n");
	generic_test();

	std::print("\n==== ambiguous_function_test ====\n");
	ambiguous_function_test();

	std::print("\n==== struct_test ====\n");
	struct_test();

	std::print("\n==== complex_test ====\n");
	complex_test();

	std::print("\n==== algorithm_test ====\n");
	algorithm_test();

	std::print("\n==== destructor_test ====\n");
	destructor_test();

	std::print("\n==== string_test ====\n");
	string_test();

	std::print("\n==== generic_type_test ====\n");
	generic_type_test();

	std::print("\n==== unique_ptr_test ====\n");
	unique_ptr_test();

	std::print("\n==== defer_test ====\n");
	defer_test();

	std::print("\n==== optional_test ====\n");
	optional_test();

	std::print("\n==== enum_test ====\n");
	enum_test();

	std::print("\n==== indirect_call_test ====\n");
	indirect_call_test();

	std::print("\n==== improved_slices_test ====\n");
	improved_slices_test();

	std::print("\n==== end main ====\n");
	std::print("e  = {}\n", std::e);
	std::print("pi = {}\n", std::pi);
	std::print("e  = {}\n", std::e as float32);
	std::print("pi = {}\n", std::pi as float32);
	static_assert(typeof std::exp(1.0) == float64);

	std::print("{} {} {}\n", 1e14, 1.532e-3, 3e-300);
	std::print("============\n");
	std::print("{}\n", ((1.0 / 0.0)));
	static_assert(0.1 + 0.2 != 0.3);
	std::print("{} != {}\n", 0.1 + 0.2, 0.3);

	let constants: [3: float64] = [ std::pi, std::tau, std::e ];
	std::print("{}\n", constants as [: float64]);

	let [...[vals]] = [ [ std::pi ], [ std::tau ], [ std::e ] ];
	std::assert([ ...vals ][0] == std::pi);
	let arr: [3, 1: float64] = [ [ std::pi ], [ std::tau ], [ std::e ] ];
	// let arr: [3, 1: float64] = [ [ 3.141592653589793 ], [ 6.283185307179586 ], [ 2.718281828459045 ] ];
	std::print("{}\n", arr);
	std::print("{}\n", 1e15);
	mut t = [ 3, 3.234, "hello" ];
	std::print("{}\n", t);
	static_assert(std::format("{}", [ 3, 3.234, "hello" ]) == "[ 3, 3.234, hello ]");
	static_assert(std::format("{}", {[ 3, 3.234, "hello" ]}) == "[ 3, 3.234, hello ]");
	static_assert(std::format("{{") == "{");
	static_assert(std::format("}}") == "}");

	t = [ 4i8, 2.334, "hi" ];
	std::print("{}\n", t);

	mut arr: [??: str] = [ "hello", "there", "hi", "this" ];
	std::print("{}\n", arr);
	arr = [ "hmm", "this", "is", "different" ];
	std::print("{}\n", arr);

	mut t1 = [ std::string ]();
	std::print("{}\n", t1);
	let t2 = [ "hi" ];
	t1 = t2;
	std::print("{}\n", t1);

	mut r = make_resource();
	r = make_resource();

	let s = std::string("Hello");
	let *p = &s;
	std::assert(p->size() == 5u);
	std::print("{}\n", 1.2345e-5);


	static_assert(std::format("{:.<+010}", 123456)     == "+123456...");
	static_assert(std::format("{:.<+010}", -123456)    == "-123456...");
	static_assert(std::format("{:.^+010}", 123456)     == "+00123456.");
	static_assert(std::format("{:.^010}", -123456)     == "-00123456.");
	static_assert(std::format("0x{:08x}", 123456u)     == "0x0001e240");
	static_assert(std::format("0x{:08X}", 123456u)     == "0x0001E240");
	static_assert(std::format("0x{:08x}", ((0u - 1u))) == "0xffffffff");
	std::print("{:018}\n", &n);
	static_assert(std::format("{:+10}",  1.2345f32) == "   +1.2345");
	static_assert(std::format("{:+010}", 1.2345f32) == "+0001.2345");
	static_assert(std::format("{:+12}",  1.2345e10f32) == " +1.2345e+10");
	static_assert(std::format("{:+012}", 1.2345e10f32) == "+01.2345e+10");
	static_assert(std::format("{:+012}", std::inf_f32) == "        +inf");
	static_assert(std::format("{:+012}", std::nan_f32) == "         nan");
	static_assert(std::format("{:+015e}", 1.2345f32)    == "+001.234500e+00");
	static_assert(std::format("{:+015E}", 1.2345f32)    == "+001.234500E+00");
	static_assert(std::format("{:+015E}", std::inf_f64) == "           +inf");
	static_assert(std::format("{:g}", 0.0) == "0");
	std::print("{:.160f}\n", -1.234567e-100);
	std::print("{:.160e}\n", -1.234567e-100);
	std::print("{:.160g}\n", -1.234567e-100);

	std::print("{:.160g}\n", 1.234567e+100);
	std::print("{:.1f}\n", 1.234567e+100);

	std::print("{:=^10}\n", std::string("Hello"));
	std::print("{:.>30}\n", 1.2345678910111213);
	std::print("{:.>30}\n", 1.2345678910111214);
	std::print("{:.>30}\n", 1.2345678910111212);
	static_assert(std::format("{} {}!",   "Hello", "World") == "Hello World!");
	static_assert(std::format("{1} {0}!", "Hello", "World") == "World Hello!");
	static_assert(std::format("{0} {1}!", "Hello", "World") == "Hello World!");
	static_assert(std::format("{1} {1}!", "Hello", "World") == "World World!");
	static_assert(std::format("{0} {0}!", "Hello", "World") == "Hello Hello!");
	static_assert(std::format("{0} {}!",  "Hello", "World") == "Hello World!");
	consteval s = std::comptime_format("Hello {:.^10}", "World");
	static_assert(typeof s == str);
	static_assert(s == "Hello ..World...");

	std::print("{:g}\n", 1e-10);

	let t = [ 3, 1.123, "hello there" ];
	std::print("{} {} \"{}\"\n", ...{ let &[...elems] = t; elems });

	let &[...elems] = t;
	consteval size = {
		mut i = 0uz;
		[...(typeof elems, ++i)];
		i
	};
	static_assert(size == 3u);

	static_assert(if (size == 3u) true else false, "hello");

	consteval s = std::comptime_format("{}", switch (size) {
		0, 1, 2 => [ 0, 0.0, "zero" ],
		3, 4, 5 => [ 1, 1.0, "one" ],
		else => unreachable,
	});
	static_assert(s == "[ 1, 1.0, one ]");

	std::print("{}\n", switch (size) {
		0, 1, 2 => [ 0, 0.0, "zero" ],
		3, 4, 5 => [ 1, 1.0, "one" ],
		else => unreachable,
	});

	std::print(
		"this is a very long message with {} arguments: {} {} {} {}\n",
		"a lot of", 3, 2.124, [ "Hello", "World" ], [[3: int32]]()
	);

	std::print("{:%}\n", 1.2345);
	std::print("{:%}\n", 12.345);
	std::print("{:%}\n", 0.005);

	for (let i in 0..20)
	{
		std::print("{} ", i);
	}
	std::print("\n");

	if consteval (std::format("{}", 12) != "12")
	{
		static_assert(std::format("{}", 12) == "11");
		static_assert(std::format("{}", 12) == "13");
	}

	// consteval x = std::sqrt(-1.0);

	// (consteval std::assert(false));

	@maybe_unused
	let n = if (std::format("{}", 12) == "12") { 1 } else { unreachable };

	let n = 3;
	@maybe_unused let n = switch (n) {
		3 => 3,
		0, 1, 2 => 2,
		else => 3,
	};

	switch (n)
	{
		3 => 1,
		4 => 0.12,
		else => {},
	}

	let n = 1;

	let s = "hello";
	switch (s)
	{
		"hello" => {},
		"there" => {},
		"hi" => {},
		"" => {},
		"this is a long string" => {},
		else => {},
	}

	function move_func(n: move auto)
	{
	}

	// move_func(n);
	move_func(move n);

	let res = resource_t(42);
	move_func(__forward res);
	std::print("DONE 1\n");

	(move_func(resource_t(11)), std::print("DONE 2\n"));
	std::print("DONE 3\n");

	(consteval {
		move_func(std::string("Hello!"));
	});

	(consteval {
		mut arr: [5, 5: int32];
		let p = &arr[0, 0];
		p + 5 - 1;
	});

	return 0;
}

function set_to_zero(n: &mut int32) -> void
{
	n = 0;
}

function foo() -> void
{
	mut i8 = 1i8;
	mut i16 = 1i16;
	mut i32 = 1i32;
	mut i64 = 1i64;
	mut u8 = 1u8;
	mut u16 = 1u16;
	mut u32 = 1u32;
	mut u64 = 1u64;

	i8 == i8;
	// i8 == u8;
	i8 == i16;
	i16 == i8;
	i64 == i8;
	i8 == i64;
	u8 == u64;
	u64 == u8;
	i8 < i16;
	i16 < i8;
	u8 < u64;
	u64 < u8;
	u32 < u8;
	u32 < u64;

	u16 -= u8;
	mut p = &i8;
	p -= u64;

	u16 /= u8;
	i16 /= i8;

	i32 = -5;
	i8 = 2i8;
	i32 /= i8;
	std::print("{}\n", i32);

	i32 = 1234;
	i16 = 111i16;
	i32 %= i16;
	std::print("{}\n", i32);
	std::print("{}\n", 1234 / 111);
	std::print("{}\n", 11 * 111 + 13);

	let a = 'a';
	@maybe_unused let b = 'c' + -1i8;

	if (a == 'a')
		std::print("a == 'a'\n");
	else
		std::print("a != 'a'\n");

	if (
		'a' + 1 == 'b'
		&& 'c' + -1 == 'b'
		&& 'c' + -1i8 == 'b'
		&& 'c' - 1 == 'b'
		&& 'a' - -1 == 'b'
		&& 'a' - -1i8 == 'b'
	)
		std::print("b == 'b'\n");
	else
		std::print("b != 'b'\n");

	let a = 1.0 * 0.5;
	if (a == 0.5)
	{
		std::print("yay\n");
	}

	mut n = 0xff;
	let mask = 0x46;
	n &= mask;
	if (n == mask)
		std::print("yay!!\n");

	mut n = 1;
	mut m = 0;
	(n = m = 2) = m;
	if (n == 0 && m == 2)
		std::print("yay again!\n");

	mut n = 1u32;
	n <<= 3u8;
	std::print("{}\n", n);
	n >>= 1u8;
	std::print("{}\n", n);
	mut m = 5u32;
	n += m = 2u32;
	if (n == 6u32)
	{
		std::print("yay yet again!\n");
	}
}

function ref_test() -> void
{
	function change_n(n: &mut int32) -> void
	{
		n = 1234;
	}
	mut n = 0;
	std::print("{}\n", n);
	change_n(n);
	std::print("{}\n", n);
	std::assert(n == 1234);

	function foo(n: int32) -> void { std::print("{}\n", &n); }
	function foo_ref(n: &int32) -> void { std::print("{}\n", &n); }

	std::print("{}\n", &n);
	foo(n);
	foo_ref(n);
	std::print("first and third pointers should be the same\n");

	let &m = n;
	std::assert(&m == &n);
	std::print("{}\n", &m);
	foo(m);
	foo_ref(m);
	std::print("first and third pointers should be the same\n");

	asdfasdf([0, 1, 2, 3, 4, 5]);
}

function cast_test() -> void
{
	let f32 = 1.5f32;
	std::print("{}\n", f32 as float64);
	std::print("{}\n", f32 as int32);
	std::print("{}\n", 'A' as uint32);
	std::print("{}\n", ' ' as uint32);

	function ref_wrapper(n: &mut int32) -> &mut int32
	{ return n; }

	mut n = 0;

	std::print("{}\n", n);
	ref_wrapper(n) = 3;
	std::print("{}\n", n);

//	let v: vec2;
}

function asdfasdf(: [int32, int32, int32, int32, int32, int32]) -> void
{}

function const_expr_test() -> void
{
	let n = 9'223'372'036'854'775'807; // int64
	static_assert(typeof n == int64);
	let n = 9'223'372'036'854'775'808; // uint64
	static_assert(typeof n == uint64);

//	-(-9'223'372'036'854'775'807i64 - 1);

	std::assert(9'223'372'036'854'775'808 == 1u64 << 63u);
	std::assert(((9'223'372'036'854'775'808 as uint32)) == 0u);

	@maybe_unused let a = false || false;
	let FALSE: bool = false;
	@maybe_unused let b = false && FALSE;
	@maybe_unused let c = true || FALSE;

	let p = null as ?*int32;
	std::assert(p == null);

	let *_p = &n;

//	*(null as *int32) = 2;
	std::print("hello" " again" ", and again!" "\n");
}

function scope_test() -> void
{
	function foo() -> void { std::print("foo1\n"); }

	{
		function foo() -> void { std::print("foo2\n"); }
//		let f = foo;
		foo();
	}

//	let f = foo;

	foo();

	function foo(: int32) -> void { std::print("foo(: int32)\n"); }
	let n = 0;

	{
		function foo(: &int32) -> void { std::print("foo(: &int32)\n"); }
		function foo(:  int32) -> void { std::print("foo(:  int32)\n"); }
		foo(n);
		foo(3); // this doesn't work now, because foo(: &int32) shadows foo(: int32)
	}

	foo(n);

	function ambiguous_test_in_scope() -> void { std::print("test1\n"); }

	@maybe_unused let f = ambiguous_test_in_scope;
	{
		function ambiguous_test_in_scope() -> void { std::print("test2\n"); }
//		let f = ambiguous_test_in_scope;
		ambiguous_test_in_scope();
	}
	@maybe_unused let f = ambiguous_test_in_scope;

	@maybe_unused let n = 40 + 2;

	@maybe_unused let n = 0 - -2147483648;
//	255 / 0;
//	n / 0;
//	n /= 0;
//	n % 0;
//	n %= 0;

	let u32 = 0u;
//	u32 % 0u32 + 3u8;
//	((u32 % 0u32)) * 3u32;
	1u + ((u32 * 1u % 0u));
	((u32 * 1u % 0u)) + 1u;

	let n = 1u64;
	((n << 99u));
	let num = 65;
	std::print("{}\n", num as char);
	std::print("{}\n", 'A' as int32);
//	-1 as char;

//	1u << 99u;

//	-1.0 / 0.0;
	((1.0 / 0.0)) + 3.0;

	let f = 1.0;
	((f / 0.0)) + 1.0;

	((-1 as uint64));

	mut p: ?*int32;
	p = null;

	((-((2i8 + 126i8))));

//	-1 as uint64;

	mut f: float64;
//	f = 3;
//	u32 = 1.0;
	f = 1.0;
//	f = 1.0f32;

	mut b: bool;
	b = false;
//	b = 3;

	@maybe_unused let f32 = 1.23464234 as typeof 1.0f32;
	@maybe_unused let f32: typeof f32 = 0.0f32;

	std::print("{}\n", ((0x8000'0000 as int32)));

	std::print("{}\n", multiply(123i64, 123i8));
	std::print("{}\n", 123 * 123);
	std::assert(multiply(123i64, 123i8) == 123 * 123);

//	let t = int32;
}

function square(n: int32) -> typeof (n * n)
{
	return n * n;
}

function multiply(a: int64, b: int8) -> typeof (a * b) { return a * b; }

function christmas_tree(height: int32) -> void
{
	for (mut i = 0; i < height; ++i)
	{
		let spaces = height - 1 - i;
		let stars = 2 * i;

		for (mut j = 0; j < spaces; ++j)
		{
			std::print(" ");
		}
		std::print("/");
		for (mut j = 0; j < stars; ++j)
		{
			std::print("*");
		}
		std::print("\\");

		std::print("\n");
	}

	for (mut i = 0; i < height - 1; ++i)
	{
		std::print(" ");
	}
	std::print("||\n");
}

function for_test() -> void
{
	for (mut i = 0; i < 10; ++i)
	{
		std::print("{} ", i);
	}
//	std::print(i);
	std::print("\n");

	mut i: int32;
	for (i = 0; i < 10; ++i)
	{
		std::print("{} ", i);
	}
	std::print("{}\n", i);

	mut i: int32;
	mut j: int32;
	for (i = j = 0; i < 10; ++i, j += 2)
	{
		std::print("({}, {}) ", i, j);
	}
	std::print("\n");

	mut i = 0;
	for (; i < 10; ++i)
	{
		std::print("{} ", i);
	}
	std::print("\n");

	function infinite_loop() -> void
	{
		std::print("entered infinite_loop\n");
		mut i = 0;
		for (;; ++i)
		{
			if (i == 10)
			{
				std::print("\nexiting infinite_loop\n");
				return;
			}
			std::print("{} ", i);
		}
		std::print("\n");
	}

	infinite_loop();

	static_assert((((0x8000'0000 - 1u) as int32 + 1)) < 0);
//	let int32_max = (0x8000'0000 - 1u) as int32;
//	std::println(int32_max);
//	let int32_max = (~1u >> 1u) as int32;
//	std::println(int32_max);

	for (mut i = 0; i <= 10; ++i)
	{
		static_assert('\r' == '\x0d');
		std::print("{}\r", i);
	}
	std::print("\n");

	function is_prime(n: int32) -> bool
	{
		if (n <= 1)
		{
			return false;
		}

		for (mut i = 2; i <= n / 2; ++i)
		{
			if (n % i == 0)
			{
				return false;
			}
		}
		return true;
	}

//	0 + 4, 1;

	for (mut i = 0; i < 1'000; ++i)
	{
		if (is_prime(i))
		{
			std::print("{},", i);
		}
	}
	std::print("\n");

	consteval inf = ((1.0 / 0.0));
	std::print("{}\n", inf);
	std::print("{}\n", ((inf - inf)) + 1.0);
}

// static_assert(false);
// static_assert(true ^^ true, "\u0080");

function declaration_leak() -> void
{
	for (mut i = 0; i < 10; ++i) {}
//	i;
}

export function div_test(n: int32) -> int32
{
	return n / 10;
}

function static_assert_test() -> void
{
//	static_assert(false);
//	static_assert(0);
//	static_assert(true, 0);
	static_assert('A' as int32 == 65);
	static_assert('A' - 'a' == -32);
	static_assert('a' - 'A' == 32);
	static_assert('\u1234' as uint32 == 0x1234);
//	static_assert(0.1 + 0.2 == 0.4);
	static_assert(((127i8 + 1i8)) == -128 as int8);
	static_assert(((-1 as uint64)) == 18446744073709551615);
	static_assert(((-1 as uint64)) == ~0u64);

	consteval int64_max = (~0u64 >> 1u) as int64;
	consteval int64_min = (((~0u64 >> 1u) as int64 + 1));
	static_assert(int64_max > 0);
	static_assert(int64_min < 0);
	static_assert(((int64_min - 1)) == int64_max);

	consteval uint64_max = ((-1 as uint64));
	static_assert(((uint64_max + 1u)) == 0u);
	static_assert(int64_max as uint64 * 2u + 1u == uint64_max);

//	uint64_max + ('\n' + 1) + uint64_max;

	@maybe_unused consteval c = '\ud7ff';
//	c + 1;

	consteval s = "Hello!";
	static_assert(s != "Hello!!");

	@maybe_unused let n = null;
	mut i: int32;
	// let p: *int32;
//	let p: *int32;
//	let ref: &int32;
	// consteval p: ?*int32 = null;
	// static_assert(p == null);

	let &i_ref = i;
//	let i_ref_: typeof i_ref;
	let i_ref_: typeof *&i_ref = i_ref;
	static_assert(typeof i_ref_ == typeof i_ref);

	static_assert(mut int32 == mut mut int32);
	static_assert(&int32 == & &int32);
	static_assert(typeof int64_max == int64);
	static_assert(typeof int64_max != consteval int64);

	static_assert(typeof static_assert_test() == void);
	static_assert(consteval [10: int32] == consteval [10: int32]);
}

function array_test() -> void
{
	mut arr: [10: int32];

	std::print("arr[0] = {}\n", arr[0]);
	arr[0] = 3;
	std::print("arr[0] = {}\n", arr[0]);

	mut multi_d_array: [4, 4: float64];
	std::print("multi_d_array[0, 0] = {}\n", multi_d_array[0, 0]);
	multi_d_array[0, 0] = 123.0;
	std::print("multi_d_array[0, 0] = {}\n", multi_d_array[0, 0]);
	multi_d_array[0][0] = 246.0;
	std::print("multi_d_array[0][0] = {}\n", multi_d_array[0][0]);
//	multi_d_array[0, 4] = 246.0;

	for (mut i = 0; i < 4; ++i)
	{
		let &mut arr = multi_d_array[i];
		for (mut j = 0; j < 4; ++j)
		{
			arr[j] = ((i + 1) * (j + 1)) as float64;
		}
	}

	@maybe_unused
	let arr = arr;

//	let arr: [10:];

	print_matrix(multi_d_array);
	for (
		mut val = &multi_d_array[0, 0];
		val <= &multi_d_array[3, 3];
		++val
	)
	{
		*val += 0.5;
	}
	std::print("====\n");
	print_matrix(multi_d_array);

	static_assert(typeof null == __null_t);

//	consteval T = int32;

//	let arr: [10: consteval int32];

	let matrix = {
		mut result: [4, 4: float64];
		for (mut i = 0; i < 4; ++i)
		{
			for (mut j = 0; j < 4; ++j)
			{
				result[i, j] = (i * 4 + j) as float64 + 0.33;
			}
		}
		result
	};
	print_matrix(matrix);
}

function print_matrix(arr: [4, 4: float64]) -> void
{
	std::print("[");
	for (mut i = 0; i < 4; ++i)
	{
		std::print(if (i == 0) "[ " else " [ ");

		for (mut j = 0; j < 4; ++j)
		{
			std::print("{} ", arr[i, j]);
		}
		std::print(if (i == 3) "]" else "]\n");
	}
	std::print("]\n");
}

// function circle1() -> typeof circle5() {}
// function circle2() -> typeof circle1() {}
// function circle3() -> typeof circle2() {}
// function circle4() -> typeof circle3() {}
// function circle5() -> typeof circle4() {}

function built_in_op_error_test() -> void
{
	@maybe_unused let i8  = 0i8;
	@maybe_unused let i16 = 0i16;
	@maybe_unused let i32 = 0i32;
	@maybe_unused let i64 = 0i64;
	@maybe_unused let u8  = 0u8;
	@maybe_unused let u16 = 0u16;
	@maybe_unused let u32 = 0u32;
	@maybe_unused let u64 = 0u64;
	@maybe_unused let f32 = 0.0f32;
	@maybe_unused let f64 = 0.0f64;
	@maybe_unused let c = ' ';
	@maybe_unused let p = null as ?*int32;
	@maybe_unused let s = "";

//	-(u32 + u8);
//	~i32;

//	u8 = u64;
//	i8 = i32 + i32;
//	i8 = u64;
//	u32 = i32;
//	f32 = i32;
//	f64 = u64;
//	i32 = f32;
//	f32 = f64;
//	f64 = f32;
//	c = i32;
//	c = u32;
//	i32 = c;

//	i8 + u8;
//	f32 + i32;
//	u32 + f32;
//	f64 + f32;
//	f32 * f32 + f64;
	(123 + 3);

//	f32 - f64;
//	i32 - u32;
//	i32 - f32;

//	u8 += u64;
//	u8 -= u64;

//	i32 * u32;
//	f32 * i32;
//	f32 * f64;

//	i32 / u32;
//	f32 / i32;
//	f32 / f64;

//	f32 *= f64;
//	f32 /= f64;

//	f32 == f64;

//	u16 | u32;
//	i32 ^ i32;
//	i32 | u32;
//	u32 ^= i32;

//	u32 << i8;
//	u64 >>= i16;
//	i32 >> i32;

//	i32 % u32;
//	i32 %= u32;
//	f32 % f32;
//	f64 %= f64;
}

function arr2_test(: [2: int32], : str, : int32) -> [3: int8]
{
	mut arr: [3: int8];
	return arr;
}

function arr2_tester() -> void
{
	mut arr: [2: int32];
	arr2_test(arr, "hello", 3);
	@maybe_unused let arr = arr;
}

function tuple_test() -> void
{
	@maybe_unused mut t: [int32, float64];
	std::print("{}\n", [2, 2.234][1]);

	consteval t = [0, 1.53, "hello"];
	consteval str = t[2];
	static_assert(str == t[2]);
	@maybe_unused let &num = t[1];
	@maybe_unused let t = [t, 234.5f32, 0b0000'1000];
	let t: [int32, auto] = [123, 3.5f32];
	static_assert(typeof t == [int32, float32]);
	@maybe_unused let t: [int32, float64] = [0, 2.5];

	mut t = [ 123, 123.123, "HELLO!!"];
	let &mut i32 = t[0];
	let &mut f64 = t[1];
	let &mut s   = t[2];

	std::print("[{}, {}, {}]\n", t[0], t[1], t[2]);
	i32 = 456;
	std::print("[{}, {}, {}]\n", t[0], t[1], t[2]);
	s = "hello?";
	std::print("[{}, {}, {}]\n", t[0], t[1], t[2]);
	f64 = i32 as float64 + 0.456;
	std::print("[{}, {}, {}]\n", t[0], t[1], t[2]);
	let val = (f64 * 3.2) + (3.2 * f64);
	std::print("{}\n", val);
}

function optimization_test() -> void
{
	function do_calculation(x: float64) -> float64
	{
		mut res = (x * 3.4) + (3.4 * x);
		res *= res;
		return res;
	}

	function do_work(mut arr: [2: int32]) -> [2: int32]
	{
		let tmp = arr[0];
		arr[0] = arr[1];
		arr[1] = tmp;
		return arr;
	}

	mut arr: [2: int32];
	arr[0] = 123;
	arr[1] = 456;
	@maybe_unused let arr = do_work(arr);
}

function phi_test(x: int32, b: bool) -> int32
{
	mut result = x;
	if (b)
	{
		result *= 2;
	}
	else
	{
		result /= 2;
	}
	return result;
}

function str_pointer_test()
{
	let s = "hello";
	let begin = s.begin_ptr();
	let end   = s.end_ptr();
	static_assert(typeof begin == ?*uint8);
	static_assert(typeof begin == typeof end);

	std::print("{}, {}\n", begin, end);

	std::assert(my_str_equals("hello", "hello"));
	std::assert(my_str_equals(s, "hello"));

	mut arr: [10: uint8];
	arr[0] = 'h' as uint32 as uint8;
	arr[1] = 'e' as uint32 as uint8;
	arr[2] = 'l' as uint32 as uint8;
	arr[3] = 'l' as uint32 as uint8;
	arr[4] = 'a' as uint32 as uint8;
	let arr_s = __builtin_str_from_ptrs(&arr[0], &arr[5]);
	static_assert(typeof arr_s == str);
	std::assert(arr_s == "hella");
	arr[4] = 'o' as uint32 as uint8;
	std::assert(arr_s != "hella");

	let arr_slice = __builtin_slice_from_const_ptrs(&arr[0], &arr[5]);
	std::print("{}\n", arr_slice[3] as uint32 as char);

	mut arr: [10: int32];
	for (mut i = 0; i < 10; ++i)
	{
		arr[i] = i;
	}
	let arr = arr;
	let arr_slice: [: auto] = __builtin_slice_from_const_ptrs(&arr[0], &arr[((10))]);
	std::print("{}\n", arr_slice[4]);
}

function my_str_equals(lhs: str, rhs: str) -> bool
{
	mut lhs_it = lhs.begin_ptr();
	mut rhs_it = rhs.begin_ptr();
	let lhs_end = lhs.end_ptr();
	let rhs_end = rhs.end_ptr();

	if (lhs_end - lhs_it != rhs_end - rhs_it)
	{
		return false;
	}

	if (lhs_it == rhs_it)
	{
		return true;
	}

	for (; lhs_it != lhs_end; ++lhs_it, ++rhs_it)
	{
		if (*lhs_it != *rhs_it)
		{
			return false;
		}
	}
	return true;
}

function consteval_test(i: if (true) int32 else int64)
{
	static_assert(typeof i == int32);

	consteval a = (if (false) 123 else 234);
	static_assert(a == 234);

	consteval len = "Hello".length();
	static_assert(len == 5u);
	consteval str = "Helló";
	consteval len  = str.length();
	consteval size = str.size();
	static_assert(len == 5u);
	static_assert(size == 6u);
	static_assert(len != size);

	consteval val = switch (str) {
		"Hello" => 0,
		"Hi" => 1,
		"Helló" => 2,
		else => unreachable,
	};
	static_assert(val == 2);

	function consteval_param(n: consteval int32) -> int32
	{
		static_assert(n > 0);
		return n;
	}

	consteval_param(3);
	// consteval_param(0);

	function index(t: &auto, n: consteval int64) -> typeof t[n]
	{
		return t[n];
	}

	let t = [ 3, 1.123, "Hello" ];
	@maybe_unused let &s = index(t, 0);
}

function add_wrapper(lhs, rhs) -> typeof add(lhs, rhs)
{
	std::print("add_wrapper(auto, auto)\n");
	return add(lhs, rhs);
}

function add_wrapper(&lhs, &rhs) -> typeof add(lhs, rhs)
{
	std::print("add_wrapper(&auto, &auto)\n");
	return add(lhs, rhs);
}

function add(lhs: auto, rhs: auto) -> typeof (lhs + rhs)
{ return lhs + rhs; }

function foo(lhs: auto, rhs: auto) -> int32
{
	lhs + rhs;
	return 0;
}

function generic_test()
{
	static_assert(typeof add_wrapper(1, 2) == int32);
	static_assert(typeof add_wrapper(1i8, 2i8) == int8);
	static_assert(typeof add_wrapper(1i64, 2i8) == int64);
	// static_assert(typeof add_wrapper("", "") == int32);
	// foo("", "");

	let a = 3;
	let b = 7;
	add_wrapper(a, b);
	add_wrapper(a as int64, b);

	@maybe_unused let s1 = "string 1";
	@maybe_unused let s2 = "string 2";
	// add_wrapper(s1, s2);

	// circular1(0i64);
}

function circular1(n) -> typeof circular2(n) {}
function circular2(n) -> typeof circular3(n) {}
function circular3(n) -> typeof circular1(n as int32) {}

function ambiguous_function_test()
{
	function foo(: int32) {}
	function foo(: int64) {}
	foo(3);
	// foo(3i8);

	function bar(: int32, : int64) {}
	function bar(: int64, : int32) {}
	// bar(3, 3);

	function baz(: auto) {}
	function baz(: *auto) {}
	mut n: int32;
	baz(&n);
}

function add_tester()
{
	std::add(3, 4);
	std::add(std::complex[ 0.0, 1.0 ], std::complex[ 1.0, -2.0 ]);
}


// function alias1 = alias1;
// function alias2 = alias1;

struct vec2
{
	.x: float64;
	.y: float64;
}

operator + (lhs: vec2, rhs: vec2) -> vec2
{
	return vec2[ lhs.x + rhs.x, lhs.y + rhs.y ];
}

operator - (lhs: vec2, rhs: vec2) -> vec2
{
	return vec2[ lhs.x - rhs.x, lhs.y - rhs.y ];
}

operator == (lhs: vec2, rhs: vec2) -> bool
{
	return (lhs.x == rhs.x) & (lhs.y == rhs.y);
}

operator != (lhs: vec2, rhs: vec2) -> bool
{
	return !(lhs == rhs);
}

function struct_test()
{
	add_tester();
	/*
	function get_vec() -> &vec2d;
	function modify_vec(v: vec2d) -> vec2d;
	std::print(get_vec().x);
	get_vec().x = 3.4;
	static_assert(typeof get_vec() == &vec2d);
	static_assert(typeof get_vec().x == &float64);
	*/
	// let v = get_vec();
	// let v = modify_vec(v);

	@maybe_unused let v = vec2[ 0.0, 0.0 ];
	consteval v = vec2[ 1.2, -4.3 ];
	static_assert(v.x == 1.2);

	let sum = v + v;
	static_assert(v + v - v == v);
	std::print("{}, {}\n", sum.x, sum.y);
}

function complex_test()
{
	function println(z: std::complex)
	{
		std::print("{}{:+}i\n", z.re, z.im);
	}

	consteval z = std::complex[ 0.0, 1.0 ] * std::complex[ 0.0, 1.0 ];
	static_assert(z == std::complex[ -1.0, 0.0 ]);

	let z1 = std::complex[1.0, -12.35];
	let double_z = z1 + z1;
	std::print("{}\n", z1.abs());
	std::print("{}\n", double_z.abs());

	println(z1);
	println(z1 * z1);
	println(z1 * z1.conjugate());
	std::print("{}\n", z1.abs());
	std::print("{}\n", (z1 * z1).abs());
	std::print("{}\n", z1.abs_square());

	std::print("exp(1i) = ");
	let exp1i = std::exp(std::complex[ 0.0, 1.0 ]);
	println(exp1i);
	std::print("{}\n", exp1i.abs());
	std::print("{}\n", exp1i.phi());

	mut z = std::complex[ 0.0, 0.0 ];
	z.im = 1.0;
	z = exp1i;
	println(z);
	// move z;

	let n = (if (z == std::complex[ 0.0, 1.0 ]) 1 else 1i64);
	static_assert(typeof n == int64);

	consteval z = std::complex[ 1.0, -2.0 ];
	static_assert(z != std::complex());
	static_assert(z.abs() > 1.0);

	function void_ptr(: *void) {}
	void_ptr(&z);

	let p: *mut int32 = __builtin_pointer_cast(*mut int32, std::libc::malloc(4u).get_value());
	std::libc::free(p);
	let p: *mut float32 = __builtin_pointer_cast(*mut float32, std::libc::malloc(4u).get_value());
	std::libc::free(p);
	type_test(int32, 3);
	type_test(uint32, 2);
	type_test(float32, 1);
	// type_test(str, 1);
	int32.type_test(3);
	static_assert(typeof type_test(char, 10) == char);
}

function type_test(T: typename, n: int32) -> T
{
	let i: T = n as T;
	return i;
}

function private_member_test()
{
	// let s = some_struct[ 2 ];
	let s = private::member::test::make_some_struct(0);
	// std::println(s._i);
	std::print("{}\n", s.get_i());
}

function algorithm_test()
{
	let arr = {
		mut arr: [10: int32];
		arr.std::fill(3)
	};
	let it = arr.std::find(3);
	std::assert(it != arr.end());
	std::print("{}\n", &*it);
	std::print("{}\n", *it);
	std::print("{}\n", it - arr.begin());

	let it = arr.std::find(23);
	std::assert(it == arr.end());
	std::print("{}\n", &*it);
	std::print("{}\n", it - arr.begin());

	std::print("{}\n", arr.std::count(3));
	std::print("{}\n", arr.std::count(2));
}

struct resource_t
{
	.i: int32;

	destructor(&self)
	{
		std::print("freeing resource {} at {}\n", self.i, &self);
	}

	constructor(i: int32)
	{
		std::print("constructing resource {}\n", i);
		return resource_t[ i ];
	}

	constructor(other: &resource_t)
	{
		std::print("copying resource {} from {} to {}\n", other.i, &other, ++global_tracker);
		return resource_t[ global_tracker ];
	}
}

function make_resource() -> resource_t
{
	std::print("making resource {}\n", ++global_tracker);
	return resource_t[ global_tracker ];
}

mut global_tracker = 0;

function destructor_test()
{
	function inner() -> int32
	{
		let res = make_resource();
		std::print("{}\n", res.i);
		return res.i;
	}

	inner();

	let res1 = make_resource();
	@maybe_unused let res2 = res1;

	mut r = make_resource();
	static_assert(typeof r == mut resource_t);
	r = r;
}

export function string_test()
{
	mut s = std::string("hello");
	std::print("{}\n", s);
	std::print("{}\n", std::string("world that is a long string").size());
	std::print("{}\n", std::string("world that is a long string").capacity());
	std::print("short string capacity: {}\n", std::string().capacity());

	s = "asdf";
	std::print("'{}' length: {}, size: {}, capacity: {}\n", s.as_str(), s.length(), s.size(), s.capacity());
	s = "this is a very long string that won't have short string optimization";
	std::print("'{}' length: {}, size: {}, capacity: {}\n", s.as_str(), s.length(), s.size(), s.capacity());
	s = "asdf";
	std::print("'{}' length: {}, size: {}, capacity: {}\n", s.as_str(), s.length(), s.size(), s.capacity());
	s.clear();
	std::print("'{}' length: {}, size: {}, capacity: {}\n", s.as_str(), s.length(), s.size(), s.capacity());
	s.push_back('h');
	std::print("'{}' length: {}, size: {}, capacity: {}\n", s.as_str(), s.length(), s.size(), s.capacity());
	s.push_back('e');
	std::print("'{}' length: {}, size: {}, capacity: {}\n", s.as_str(), s.length(), s.size(), s.capacity());
	s.push_back('l');
	std::print("'{}' length: {}, size: {}, capacity: {}\n", s.as_str(), s.length(), s.size(), s.capacity());
	s.push_back('ó');
	std::print("'{}' length: {}, size: {}, capacity: {}\n", s.as_str(), s.length(), s.size(), s.capacity());
	s.push_back('\u0470');
	std::print("'{}' length: {}, size: {}, capacity: {}\n", s.as_str(), s.length(), s.size(), s.capacity());
	s.push_back('\u0470');
	std::print("'{}' length: {}, size: {}, capacity: {}\n", s.as_str(), s.length(), s.size(), s.capacity());

	{
		mut world = std::string("World");
		world += '!';
		std::print(("Hello " + world + '\n').as_str());
		std::print("Hello {}\n".std::format(world.as_str()).as_str());
		std::print("---\n");
		std::print("{}\n", world.empty());
		std::print("{}\n", world.not_empty());
	}

	@maybe_unused
	consteval n = {
		let s = std::format("{}\n", "hello");
		s.length()
	};

	consteval n = {
		mut s = std::string("hello");
		s += " world!";
		s.length()
	};
	static_assert(n == 12u);

	std::print("{}\n", std::string("Hello").is_ascii());
	std::print("{}\n", std::string("Helló").is_ascii());

	let a: [int32, std::string] = [3, std::string("hello")];
	@maybe_unused let b = a;
	static_assert(__builtin_str_starts_with("asdf Hello", "asdf "));
	static_assert("asdf Hello".starts_with("asdf "));
	std::print("{}\n", consteval {
		let s = "asdf Hello";
		let result = s.starts_with("asdf ");
		result
	});

	std::print("{}\n", std::string("???").starts_with("?"));
	// (consteval { std::print("hello"); 0 });

	@maybe_unused
	let val = consteval (std::string("hello") == "hello");
	static_assert(((__builtin_is_comptime())));

	(consteval {
		let s = std::string("Hello from constant expression!");
		s.capacity()
	});

	let a = 1;
	let b = 3;
	let [a_ref, b_val] = [ a, b ];
	static_assert(typeof a_ref == int32);
	static_assert(typeof b_val == int32);

	std::print("hello {}{}\n", "world", '!');

	@maybe_unused
	let arr: [3: int32] = [ 0, 1, 2 ];

	consteval i = true as uint32;
	static_assert(i == 1u);

	mut arr: [5: int32];
	std::print("{}\n", arr[2]);

	static_assert(std::format("{}", 1.23456) == "1.23456");
	(consteval {
		mut arr: [int64, int32];
		std::format("{}", arr[0]) == "0"
	});
}

struct vec3<T: typename>
{
	static_assert(T == float32 || T == float64, "only floating point types are allowed");

	type value_type = T;

	.x: T;
	.y: T;
	.z: T;
}

function abs(v: #vec3) -> (typeof v).value_type
{
	return std::sqrt(v.x * v.x + v.y * v.y + v.z * v.z);
}

function generic_type_test()
{
	let v = vec3<float32>[ 1.0f32, 0.0f32, 0.0f32 ];

	static_assert(typeof v.x == float32);
	static_assert((typeof v).value_type == float32);

	std::print("v = ({}, {}, {})\n", v.x, v.y, v.z);
	std::print("|v| = {}\n", v.abs());

	mut v = std::vector<int32>();
	v.push_back(1);
	std::assert(v.size() == 1u);
	std::assert(v[0] == 1);
	v.push_back(2);
	v.emplace_back(3);
	v.emplace_back();

	for (let i in v)
	{
		std::print("{}, ", i);
	}
	std::print("\n");
}

function add_two(n: int32) -> int32
{
	return n + 2;
}

function unique_ptr_test()
{
	mut ptr = (std::unique_ptr<int32, false>.create)();
	ptr = (std::unique_ptr<int32, false>.create)();

	// ptr = ptr;

	*ptr = 3;
	std::print("{}\n", ptr->add_two());

	mut ptr = (std::unique_ptr<int32, true>.create)();
	ptr = (std::unique_ptr<int32, true>.create)();

	(consteval {
		let ptr = (std::unique_ptr<std::vector<int32>, true>.create)();
		ptr->push_back(1);
		ptr->push_back(2);
	});
}

@symbol_name("move_test") export function move_test()
{
	let i = 0;
	let _ = if (i == 3) {
		let j = move i;
		j
	} else {
		let j = move i;
		j
	};
	// i;
}

function defer_test()
{
	(consteval {
		let p = std::malloc(int32, 1);
		defer std::free(p);
	});

	defer std::print("defer 1\n");
	defer std::print("defer 2\n");
	defer std::print("defer 3\n");
}

function optional_test()
{
	mut oi: ?int32 = null;
	std::print("{}\n", oi);
	oi = 3;
	std::print("{}\n", oi);

	mut oi: ?int32 = 3;
	std::print("{}\n", oi);
	oi = null;
	std::print("{}\n", oi);

	(consteval {
		mut s: ?auto = std::string("Hello");
		let s2: ?std::string = null;
		s = s2;
		s = std::string("Hi");
		s = null;
	});

	let i = 0;
	let p = &i;
	(p + 0) == null;

	mut or: ?&int32 = null;
	or = i;
	std::assert(&or.get_value() == &i);
	or.get_value() == 3;

	// let oror: ?&?&int32 = or;

	let _: ?&int32 = or;
	// _.get_value() = 3;
}

enum animal_kind: uint32
{
	cat,
	dog,
	fish,
	mouse,
	pidgeon
}

static_assert(std::meta::is_enum(animal_kind));
static_assert(!std::meta::is_enum(int32));
static_assert(__builtin_enum_value(animal_kind.cat) == 0);
static_assert(__builtin_enum_value(animal_kind.dog) == 1);

function enum_test()
{
	let v: animal_kind = animal_kind.mouse;
	let _ = v;
	v = .fish;

	let _ = v == animal_kind.dog;
	static_assert(animal_kind.cat != .dog);
	type T = animal_kind;
	static_assert(animal_kind.cat == T.cat);

	switch (v)
	{
		.cat => {},
		.dog => {},
		else => {}
	}

	let _ = std::create_initialized_array([100: animal_kind], animal_kind.cat);

	let _: #animal_kind = .cat;
	let _: ##animal_kind = .cat;
	let _: ?animal_kind = .cat;
	let _ = .cat as animal_kind;
}

function indirect_call_test()
{
	function add_i32(a: int32, b: int32) -> int32
	{
		return a + b;
	}

	function mul_i32(a: int32, b: int32) -> int32
	{
		return a * b;
	}

	function ret_void() -> void
	{}

	let _: function(...##auto) -> ##auto = ret_void;

	mut op: function(int32, int32) -> int32 = add_i32;
	std::assert(op(2, 3) == 5);
	op = mul_i32;
	std::assert(op(2, 3) == 6);
	std::assert(op == mul_i32);
	std::assert(op != add_i32);

	(consteval {
		mut op: function(int32, int32) -> int32 = add_i32;
		std::assert(op(2, 3) == 5);
		op = mul_i32;
		std::assert(op(2, 3) == 6);
		std::assert(op == mul_i32);
		std::assert(op != add_i32);
	});

	consteval op = add_i32;
	static_assert(op(2, 3) == 5);
}

@overload_priority(0) function int_overload(i: int64) -> int32 { return 0; }
@overload_priority(1) function int_overload(i: uint64) -> int32 { return 1; }

function int_overload_test()
{
	static_assert(int_overload(3) == 1);
}

struct addable_t
{
	.value: int32;
}

function add_addable(lhs: addable_t, rhs: addable_t) -> addable_t
{
	return addable_t[ lhs.value + rhs.value ];
}

operator + = add_addable;

function operator_alias()
{
	static_assert((addable_t[ 1 ] + addable_t[ 2 ]).value == 3);
}


function improved_slices_test()
{
	let arr: [??: int32] = [ 0, 1, 2, 3, 4, 5, 6, 7 ];
	let s = arr[__builtin_integer_range_u32(2, 4)]; // [2..4]
	std::assert(s.size() == 2);
	std::assert(s[0] == 2);
	let s = arr[2..4];
	std::assert(s.size() == 2);
	std::assert(s[0] == 2);

	let s = arr[__builtin_integer_range_from_u32(2)]; // [2..]
	std::assert(s.size() == arr.size() - 2);
	let s = s[__builtin_integer_range_u32(0, 3)]; // [0..3]
	std::assert(s.size() == 3);
	let s = arr[2..];
	std::assert(s.size() == arr.size() - 2);
	let s = s[0..3];
	std::assert(s.size() == 3);

	let s = arr[__builtin_range_unbounded()]; // [..]
	std::assert(s.size() == arr.size());
	let s = arr[..];
	std::assert(s.size() == arr.size());

	let s = arr[__builtin_integer_range_to_i32(5)]; // [..5]
	std::assert(s.size() == 5);
	let s = arr[..5];
	std::assert(s.size() == 5);

	std::assert((3..9).begin_value() == 3);
	std::assert((3..9).end_value() == 9);
	std::assert((3..).begin_value() == 3);
	std::assert((..9).end_value() == 9);
	static_assert((3..9).begin_value() == 3);
	static_assert((3..9).end_value() == 9);
	static_assert((3..).begin_value() == 3);
	static_assert((..9).end_value() == 9);

	for (let i in 0..10)
	{
		std::print("{} ", i);
	}
	std::print("\n");

	for (let v in arr[2..])
	{
		std::print("{} ", v);
	}
	std::print("\n");

	arr[2..][3];
	arr[2.., 3];
	arr[.., 3];

	for (let i: uint8 in 250..255u8)
	{
		std::print("{} ", i);
	}
	std::print("\n");

	for (let i: uint8 in 250..=255u8)
	{
		std::print("{} ", i);
	}
	std::print("\n");

	mut count = 0;
	for (let i in 0..)
	{
		std::print("{} ", i);
		count += 1;
		if (i == 10)
		{
			break;
		}
	}
	std::print("\n");

	(consteval {
		let arr: [??: int32] = [ 0, 1, 2, 3, 4, 5, 6, 7 ];
		let s = arr[__builtin_integer_range_u32(2, 4)]; // [2..4]
		std::assert(s.size() == 2);
		std::assert(s[0] == 2);
		let s = arr[2..4];
		std::assert(s.size() == 2);
		std::assert(s[0] == 2);

		let s = arr[__builtin_integer_range_from_u32(2)]; // [2..]
		std::assert(s.size() == arr.size() - 2);
		let s = s[__builtin_integer_range_u32(0, 3)]; // [0..3]
		std::assert(s.size() == 3);
		let s = arr[2..];
		std::assert(s.size() == arr.size() - 2);
		let s = s[0..3];
		std::assert(s.size() == 3);

		let s = arr[__builtin_range_unbounded()]; // [..]
		std::assert(s.size() == arr.size());
		let s = arr[..];
		std::assert(s.size() == arr.size());

		let s = arr[__builtin_integer_range_to_i32(5)]; // [..5]
		std::assert(s.size() == 5);
		let s = arr[..5];
		std::assert(s.size() == 5);
		let i = 3;
		std::assert(arr[..i].size() == 3);

		for (let i: uint8 in 250..=255u8)
		{
			std::assert(i >= 250);
		}

		mut count = 0;
		for (let i in (0..))
		{
			std::assert(i == count);
			count += 1;
			if (count == 1000)
			{
				break;
			}
		}

		let a = [10: int32]();
		std::assert(a == a);
		std::assert(a[0..3] == a[3..6]);
		let b = [10: int8]();
		std::assert(a == b);
		std::assert(a != b[1..]);
	});
}
