function print(str: str) -> void;
function println(str: str) -> void;
function print_int32(n: int32) -> void;
function print_uint32(n: uint32) -> void;

function factorial(n: int32) -> int32
{
	let i = 1;
	let res = 1;
	while (i <= n)
	{
		res = res * i;
		i -= -1;
	}
	return res;
}

function factorial_recursive(n: int32) -> int32
{
	if (n <= 1)
	{
		return 1;
	}
	else
	{
		return n * factorial(n - 1);
	}
}

function main() -> int32
{
	println("");
	println("hello");
	print_int32(123);
	print_int32(factorial(5));
	println("hello again!!!!\nand on a new line\n");

	foo();

	let good = true;
	let i = 0;
	while (i < 20)
	{
		if (factorial(i) != factorial_recursive(i))
		{
			good = false;
		}
		i += 1;
	}

	if (good)
	{
		println("factorial is good!!");
	}
	else
	{
		println("factorial is not good :(");
	}

	return 0;
/*
	let bool: bool = false;
	while (bool)
	{
		bool = false;
	}
	print("hello");
	let n: int32 = 0;
	change_val(n);
	let str = "hello";
	let str2 = "hello";
	return factorial(1);
*/
}

function foo() -> void
{
	let i8 = 0i8;
	let i16 = 0i16;
	let i32 = 0i32;
	let i64 = 0i64;
	let u8 = 0u8;
	let u16 = 0u16;
	let u32 = 0u32;
	let u64 = 0u64;

	i8 == i8;
//	i8 == u8;
	i8 == i16;
	u8 == u64;
	u8 < u64;

	u16 -= u8;
	let p = &i8;
	p -= u64;

	u16 /= u8;
	i16 /= i8;

	i32 = -5;
	i8 = 2i8;
	i32 /= i8;
	print_int32(i32);

	i32 = 1234;
	i16 = 111i16;
	i32 %= i16;
	print_int32(i32);
	print_int32(1234 / 111);
	print_int32(11 * 111 + 13);

	let a = 'a';
	let b = 'c' + -1i8;

	if (a == 'a')
		println("a == 'a'");
	else
		println("a != 'a'");


	if (
		'a' + 1 == 'b'
		&& 'c' + -1 == 'b'
		&& 'c' + -1i8 == 'b'
		&& 'c' - 1 == 'b'
		&& 'a' - -1 == 'b'
		&& 'a' - -1i8 == 'b'
	)
		println("b == 'b'");
	else
		println("b != 'b'");

	const a = 1.0 * 0.5;
	if (a == 0.5)
	{
		println("yay");
	}

	let n = 0xffu32;
	const mask = 0x46u32;
	n &= mask;
	if (n == mask)
		println("yay!!");


	let n = 1;
	let m = 0;
	(n = m = 2) = m;
	if (n == 0 && m == 2)
		println("yay again!");

	let n = 1u32;
	n <<= 3u8;
	print_uint32(n);
	n >>= 1u8;
	print_uint32(n);
	let m = 5u32;
	n += m = 2u32;
	if (n == 6u32)
	{
		println("yay yet again!");
	}
}
