
{
	let a = &0;
	let b = 1;
	0 + 2 + 1;

	let c = 0, 0.0;
	if (true)
	{
		let hello = &1;
	}
}



/*

a && b || c ^^ d  // ((a '&&' b) '||' (c '^^' d))
a < b == c        // ((a '<' b) '==' c)
a == b && c == d  // ((a '==' b) '&&' (c '==' d))

typeof (a + b)  // ('typeof' (a '+' b))
sizeof a + b    // (('sizeof' a) '+' b)
++--a      // ('++' ('--' a))
++a.b      // ('++' (a '.' b))

a().b::c      // (a() '.' (b '::' c))
a[b, c];      // (a '[' (b ',' c))
a((b, c), d)  // a((b ',' c), d)
a[b + c]      // (a '[' (b '+' c))

(a + b) * c  // ((a '+' b) '*' c)
a + b * c    // (a '+' (b '*' c))
a = b = c    // (a '=' (b '=' c))
a + b + c    // ((a '+' b) '+' c)
a->b->c      // ((a '->' b) '->' c)
*/

/*
if (x == 0)
	return 0;
if (x == 1)
	return 1;
return x * factorial(x - 1);
*/
/*
typeof (a + b)   // (typeof (a + b))
sizeof a + b     // ((sizeof a) + b)

a/b/c     // ((a / b) / c)
a+b+c     // ((a + b) + c)
a=b=c     // (a = (b = c))
a+b*c/d   // (a + ((b * c) / d))
++++a     // (++ (++ a))

a||b^^c&&d   // (a || (b ^^ (c && d)))
a&&b||c^^d   // ((a && b) || (c ^^ d))
a==b&&c==d   // ((a == b) && (c == d))

((a|b)^c)&d   // (((a | b) ^ c) & d)
a|b^c&d       // (a | (b ^ (c & d)))
a&b|c^d       // ((a & b) | (c ^ d))

++a->b->c.d   // ('++' (((a '->' b) '->' c) '.' d))
&a::b         // ('&' (a '::' b))
&(a+b+c)      // ('&' ((a '+' b) '+' c))
*/
