import std::ryu::common;
import std::ryu::d2s;
import std::ryu::f2s;
import std::ryu::s2d;
import std::ryu::s2f;
import std::ryu::d2fixed;
import std::meta::types;

@symbol_name("d2s_short")
export function d2s_short(x: float64, buffer: *uint8) -> *uint8
{
	return std::ryu::d2s_shortest(x, buffer);
}

@symbol_name("d2exp_short")
export function d2exp_short(x: float64, precision: uint32, buffer: *uint8, capital_e: bool, strip_trailing_zeros: bool) -> *uint8
{
	return std::ryu::d2exp_short(x, precision, buffer, capital_e, strip_trailing_zeros);
}

@symbol_name("d2fixed_short")
export function d2fixed_short(x: float64, precision: uint32, buffer: *uint8, strip_trailing_zeros: bool) -> *uint8
{
	return std::ryu::d2fixed_short(x, precision, buffer, strip_trailing_zeros);
}

@symbol_name("f2s_short")
export function f2s_short(x: float32, buffer: *uint8) -> *uint8
{
	return std::ryu::f2s_shortest(x, buffer);
}

static_assert(std::meta::enum_underlying_type(std::ryu::parse_result) == int32);

@symbol_name("s2d_str")
export function s2d_str(begin: *const uint8, end: *const uint8, result: *float64) -> std::ryu::parse_result
{
	return std::ryu::s2d_str(__builtin_str_from_ptrs(begin, end), result);
}

@symbol_name("s2f_str")
export function s2f_str(begin: *const uint8, end: *const uint8, result: *float32) -> std::ryu::parse_result
{
	return std::ryu::s2f_str(__builtin_str_from_ptrs(begin, end), result);
}
